
JIMS FC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d21c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000854  0800d3c0  0800d3c0  0001d3c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dc14  0800dc14  000202cc  2**0
                  CONTENTS
  4 .ARM          00000008  0800dc14  0800dc14  0001dc14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dc1c  0800dc1c  000202cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dc1c  0800dc1c  0001dc1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dc20  0800dc20  0001dc20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002cc  20000000  0800dc24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d44  200002cc  0800def0  000202cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002010  0800def0  00022010  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000128a3  00000000  00000000  000202fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000326b  00000000  00000000  00032b9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f58  00000000  00000000  00035e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dd8  00000000  00000000  00036d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019bce  00000000  00000000  00037b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000148fd  00000000  00000000  0005170e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bd54  00000000  00000000  0006600b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f1d5f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005340  00000000  00000000  000f1db0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002cc 	.word	0x200002cc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d3a4 	.word	0x0800d3a4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002d0 	.word	0x200002d0
 80001dc:	0800d3a4 	.word	0x0800d3a4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <FIRFilter_Init>:

/* Variables */
//static float FIR_IMPULSE_RESPONSE[FIR_FILTER_LENGTH] = {-0.0032906f, -0.0052635f, -0.0068811f, 0.0000000f, 0.0254209f, 0.1311260f, 0.1805961f, 0.2000000, 0.1805961f, 0.1311260f, 0.0724719f, 0.0254209f, 0.0000000f, -0.0068811f, -0.0052635f};
static float FIR_IMPULSE_RESPONSE[FIR_FILTER_LENGTH] = {0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f}; /* For 10 point Moving Average Filter*/

void FIRFilter_Init(FIRFilter *fir) {
 8000f5c:	b480      	push	{r7}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]

	/* Clear filter buffer */
	for (uint8_t n = 0; n < FIR_FILTER_LENGTH; n++ ){
 8000f64:	2300      	movs	r3, #0
 8000f66:	73fb      	strb	r3, [r7, #15]
 8000f68:	e009      	b.n	8000f7e <FIRFilter_Init+0x22>

		fir->buf[n] = 0.0f;
 8000f6a:	7bfb      	ldrb	r3, [r7, #15]
 8000f6c:	687a      	ldr	r2, [r7, #4]
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	4413      	add	r3, r2
 8000f72:	f04f 0200 	mov.w	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
	for (uint8_t n = 0; n < FIR_FILTER_LENGTH; n++ ){
 8000f78:	7bfb      	ldrb	r3, [r7, #15]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	73fb      	strb	r3, [r7, #15]
 8000f7e:	7bfb      	ldrb	r3, [r7, #15]
 8000f80:	2b09      	cmp	r3, #9
 8000f82:	d9f2      	bls.n	8000f6a <FIRFilter_Init+0xe>

	}

	/* Reset buffer index */
	fir->bufIndex = 0;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2200      	movs	r2, #0
 8000f88:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	/* Clear filter output */
	fir->out = 0.0f;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	f04f 0200 	mov.w	r2, #0
 8000f92:	62da      	str	r2, [r3, #44]	; 0x2c

}
 8000f94:	bf00      	nop
 8000f96:	3714      	adds	r7, #20
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <FirstOrderIIR_Init>:
 */

/* Including require header */
#include "FirstOrderIIR.h"

void FirstOrderIIR_Init (FirstOrderIIR *filt, float alpha) {
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	ed87 0a00 	vstr	s0, [r7]

	/* Check filter coefficient bounds and store */
	if (alpha < 0.0f )
 8000fac:	edd7 7a00 	vldr	s15, [r7]
 8000fb0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fb8:	d504      	bpl.n	8000fc4 <FirstOrderIIR_Init+0x24>
		filt->alpha = 0.0f;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	f04f 0200 	mov.w	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	e010      	b.n	8000fe6 <FirstOrderIIR_Init+0x46>

	else if (alpha > 1.0f)
 8000fc4:	edd7 7a00 	vldr	s15, [r7]
 8000fc8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000fcc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fd4:	dd04      	ble.n	8000fe0 <FirstOrderIIR_Init+0x40>
		filt->alpha = 1.0f;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	e002      	b.n	8000fe6 <FirstOrderIIR_Init+0x46>

	else
		filt->alpha = alpha;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	683a      	ldr	r2, [r7, #0]
 8000fe4:	601a      	str	r2, [r3, #0]

	/* Reset filter output */
	filt->out = 0.0f;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	f04f 0200 	mov.w	r2, #0
 8000fec:	605a      	str	r2, [r3, #4]

}
 8000fee:	bf00      	nop
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <FirstOrderIIR_Update>:

float FirstOrderIIR_Update (FirstOrderIIR *filt, float in) {
 8000ffa:	b480      	push	{r7}
 8000ffc:	b083      	sub	sp, #12
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
 8001002:	ed87 0a00 	vstr	s0, [r7]

	/* Compute output using input and previous output */
	filt->out = (1.0f - filt->alpha) * in + filt->alpha * filt->out;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	edd3 7a00 	vldr	s15, [r3]
 800100c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001010:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001014:	edd7 7a00 	vldr	s15, [r7]
 8001018:	ee27 7a27 	vmul.f32	s14, s14, s15
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	edd3 6a00 	vldr	s13, [r3]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	edd3 7a01 	vldr	s15, [r3, #4]
 8001028:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800102c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	edc3 7a01 	vstr	s15, [r3, #4]

	/* Return filtered output */
	return filt->out;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	ee07 3a90 	vmov	s15, r3

}
 800103e:	eeb0 0a67 	vmov.f32	s0, s15
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <MPU6050_ReadRegister>:

/*
 * LOW LEVEL FUNCTIONS
 */

HAL_StatusTypeDef MPU6050_ReadRegister(MPU6050 *dev, uint8_t reg, uint8_t *data) {
 800104c:	b580      	push	{r7, lr}
 800104e:	b088      	sub	sp, #32
 8001050:	af04      	add	r7, sp, #16
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	460b      	mov	r3, r1
 8001056:	607a      	str	r2, [r7, #4]
 8001058:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Read(dev->i2cHandle, MPU6050_ADDRESS, reg,
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	6818      	ldr	r0, [r3, #0]
 800105e:	7afb      	ldrb	r3, [r7, #11]
 8001060:	b29a      	uxth	r2, r3
 8001062:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001066:	9302      	str	r3, [sp, #8]
 8001068:	2301      	movs	r3, #1
 800106a:	9301      	str	r3, [sp, #4]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	9300      	str	r3, [sp, #0]
 8001070:	2301      	movs	r3, #1
 8001072:	21d0      	movs	r1, #208	; 0xd0
 8001074:	f001 fbc6 	bl	8002804 <HAL_I2C_Mem_Read>
 8001078:	4603      	mov	r3, r0
	I2C_MEMADD_SIZE_8BIT, data, 1, I2C_TIMEOUT);

}
 800107a:	4618      	mov	r0, r3
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <MPU6050_ReadRegisters>:

HAL_StatusTypeDef MPU6050_ReadRegisters(MPU6050 *dev, uint8_t reg,
		uint8_t *data, uint8_t length) {
 8001082:	b580      	push	{r7, lr}
 8001084:	b088      	sub	sp, #32
 8001086:	af04      	add	r7, sp, #16
 8001088:	60f8      	str	r0, [r7, #12]
 800108a:	607a      	str	r2, [r7, #4]
 800108c:	461a      	mov	r2, r3
 800108e:	460b      	mov	r3, r1
 8001090:	72fb      	strb	r3, [r7, #11]
 8001092:	4613      	mov	r3, r2
 8001094:	72bb      	strb	r3, [r7, #10]

	return HAL_I2C_Mem_Read(dev->i2cHandle, MPU6050_ADDRESS, reg,
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	6818      	ldr	r0, [r3, #0]
 800109a:	7afb      	ldrb	r3, [r7, #11]
 800109c:	b29a      	uxth	r2, r3
 800109e:	7abb      	ldrb	r3, [r7, #10]
 80010a0:	b29b      	uxth	r3, r3
 80010a2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80010a6:	9102      	str	r1, [sp, #8]
 80010a8:	9301      	str	r3, [sp, #4]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	9300      	str	r3, [sp, #0]
 80010ae:	2301      	movs	r3, #1
 80010b0:	21d0      	movs	r1, #208	; 0xd0
 80010b2:	f001 fba7 	bl	8002804 <HAL_I2C_Mem_Read>
 80010b6:	4603      	mov	r3, r0
	I2C_MEMADD_SIZE_8BIT, data, length, I2C_TIMEOUT);

}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3710      	adds	r7, #16
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <MPU6050_WriteRegister>:

HAL_StatusTypeDef MPU6050_WriteRegister(MPU6050 *dev, uint8_t reg,
		uint8_t *data) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b088      	sub	sp, #32
 80010c4:	af04      	add	r7, sp, #16
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	460b      	mov	r3, r1
 80010ca:	607a      	str	r2, [r7, #4]
 80010cc:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Write(dev->i2cHandle, MPU6050_ADDRESS, reg,
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	6818      	ldr	r0, [r3, #0]
 80010d2:	7afb      	ldrb	r3, [r7, #11]
 80010d4:	b29a      	uxth	r2, r3
 80010d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010da:	9302      	str	r3, [sp, #8]
 80010dc:	2301      	movs	r3, #1
 80010de:	9301      	str	r3, [sp, #4]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	9300      	str	r3, [sp, #0]
 80010e4:	2301      	movs	r3, #1
 80010e6:	21d0      	movs	r1, #208	; 0xd0
 80010e8:	f001 fa92 	bl	8002610 <HAL_I2C_Mem_Write>
 80010ec:	4603      	mov	r3, r0
	I2C_MEMADD_SIZE_8BIT, data, 1, I2C_TIMEOUT);

}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <MPU6050_Initialise>:

/*
 * INITIALIZATION
 */

uint8_t MPU6050_Initialise(MPU6050 *dev, I2C_HandleTypeDef *i2cHandle) {
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b084      	sub	sp, #16
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
 80010fe:	6039      	str	r1, [r7, #0]

	/* Set struct parameters */
	dev->i2cHandle = i2cHandle;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	683a      	ldr	r2, [r7, #0]
 8001104:	601a      	str	r2, [r3, #0]
	dev->acc_mps2[0] = 0.0f;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	f04f 0200 	mov.w	r2, #0
 800110c:	605a      	str	r2, [r3, #4]
	dev->acc_mps2[1] = 0.0f;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	f04f 0200 	mov.w	r2, #0
 8001114:	609a      	str	r2, [r3, #8]
	dev->acc_mps2[2] = 0.0f;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	f04f 0200 	mov.w	r2, #0
 800111c:	60da      	str	r2, [r3, #12]

	dev->gyro_deg[0] = 0.0f;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	f04f 0200 	mov.w	r2, #0
 8001124:	611a      	str	r2, [r3, #16]
	dev->gyro_deg[1] = 0.0f;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	f04f 0200 	mov.w	r2, #0
 800112c:	615a      	str	r2, [r3, #20]
	dev->gyro_deg[2] = 0.0f;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	f04f 0200 	mov.w	r2, #0
 8001134:	619a      	str	r2, [r3, #24]

	dev->temp_C = 0.0f;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	f04f 0200 	mov.w	r2, #0
 800113c:	61da      	str	r2, [r3, #28]

	/* Number of errors */
	uint8_t errNum = 0;
 800113e:	2300      	movs	r3, #0
 8001140:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef status;

	uint8_t regData = 0;
 8001142:	2300      	movs	r3, #0
 8001144:	737b      	strb	r3, [r7, #13]

	/*
	 * Check device ID
	 */
	status = MPU6050_ReadRegister(dev, WHO_AM_I, &regData);
 8001146:	f107 030d 	add.w	r3, r7, #13
 800114a:	461a      	mov	r2, r3
 800114c:	2175      	movs	r1, #117	; 0x75
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f7ff ff7c 	bl	800104c <MPU6050_ReadRegister>
 8001154:	4603      	mov	r3, r0
 8001156:	73bb      	strb	r3, [r7, #14]
	errNum += (status != HAL_OK);
 8001158:	7bbb      	ldrb	r3, [r7, #14]
 800115a:	2b00      	cmp	r3, #0
 800115c:	bf14      	ite	ne
 800115e:	2301      	movne	r3, #1
 8001160:	2300      	moveq	r3, #0
 8001162:	b2db      	uxtb	r3, r3
 8001164:	461a      	mov	r2, r3
 8001166:	7bfb      	ldrb	r3, [r7, #15]
 8001168:	4413      	add	r3, r2
 800116a:	73fb      	strb	r3, [r7, #15]

	/*
	 * Putting the sensor on
	 */

	regData = 0X00;
 800116c:	2300      	movs	r3, #0
 800116e:	737b      	strb	r3, [r7, #13]
	status = MPU6050_WriteRegister(dev, PWR_MGMT_1, &regData);
 8001170:	f107 030d 	add.w	r3, r7, #13
 8001174:	461a      	mov	r2, r3
 8001176:	216b      	movs	r1, #107	; 0x6b
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f7ff ffa1 	bl	80010c0 <MPU6050_WriteRegister>
 800117e:	4603      	mov	r3, r0
 8001180:	73bb      	strb	r3, [r7, #14]
	errNum += (status != HAL_OK);
 8001182:	7bbb      	ldrb	r3, [r7, #14]
 8001184:	2b00      	cmp	r3, #0
 8001186:	bf14      	ite	ne
 8001188:	2301      	movne	r3, #1
 800118a:	2300      	moveq	r3, #0
 800118c:	b2db      	uxtb	r3, r3
 800118e:	461a      	mov	r2, r3
 8001190:	7bfb      	ldrb	r3, [r7, #15]
 8001192:	4413      	add	r3, r2
 8001194:	73fb      	strb	r3, [r7, #15]

	/* Using the on chip digital low pass filter */
	regData = 0X02;
 8001196:	2302      	movs	r3, #2
 8001198:	737b      	strb	r3, [r7, #13]
	status = MPU6050_WriteRegister(dev, CONFIG, &regData);
 800119a:	f107 030d 	add.w	r3, r7, #13
 800119e:	461a      	mov	r2, r3
 80011a0:	211a      	movs	r1, #26
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f7ff ff8c 	bl	80010c0 <MPU6050_WriteRegister>
 80011a8:	4603      	mov	r3, r0
 80011aa:	73bb      	strb	r3, [r7, #14]
	errNum += (status != HAL_OK);
 80011ac:	7bbb      	ldrb	r3, [r7, #14]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	bf14      	ite	ne
 80011b2:	2301      	movne	r3, #1
 80011b4:	2300      	moveq	r3, #0
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	461a      	mov	r2, r3
 80011ba:	7bfb      	ldrb	r3, [r7, #15]
 80011bc:	4413      	add	r3, r2
 80011be:	73fb      	strb	r3, [r7, #15]

	/*
	 * Configuring the gyro
	 */
	regData = 0X08;
 80011c0:	2308      	movs	r3, #8
 80011c2:	737b      	strb	r3, [r7, #13]
	status = MPU6050_WriteRegister(dev, GYRO_CONFIG, &regData);
 80011c4:	f107 030d 	add.w	r3, r7, #13
 80011c8:	461a      	mov	r2, r3
 80011ca:	211b      	movs	r1, #27
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f7ff ff77 	bl	80010c0 <MPU6050_WriteRegister>
 80011d2:	4603      	mov	r3, r0
 80011d4:	73bb      	strb	r3, [r7, #14]
	errNum += (status != HAL_OK);
 80011d6:	7bbb      	ldrb	r3, [r7, #14]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	bf14      	ite	ne
 80011dc:	2301      	movne	r3, #1
 80011de:	2300      	moveq	r3, #0
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	461a      	mov	r2, r3
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
 80011e6:	4413      	add	r3, r2
 80011e8:	73fb      	strb	r3, [r7, #15]

	/*
	 * Configuring the accelerometer
	 */
	regData = 0X10;
 80011ea:	2310      	movs	r3, #16
 80011ec:	737b      	strb	r3, [r7, #13]
	status = MPU6050_WriteRegister(dev, ACCEL_CONFIG, &regData);
 80011ee:	f107 030d 	add.w	r3, r7, #13
 80011f2:	461a      	mov	r2, r3
 80011f4:	211c      	movs	r1, #28
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f7ff ff62 	bl	80010c0 <MPU6050_WriteRegister>
 80011fc:	4603      	mov	r3, r0
 80011fe:	73bb      	strb	r3, [r7, #14]
	errNum += (status != HAL_OK);
 8001200:	7bbb      	ldrb	r3, [r7, #14]
 8001202:	2b00      	cmp	r3, #0
 8001204:	bf14      	ite	ne
 8001206:	2301      	movne	r3, #1
 8001208:	2300      	moveq	r3, #0
 800120a:	b2db      	uxtb	r3, r3
 800120c:	461a      	mov	r2, r3
 800120e:	7bfb      	ldrb	r3, [r7, #15]
 8001210:	4413      	add	r3, r2
 8001212:	73fb      	strb	r3, [r7, #15]

	/* Return the number of errors */
	return errNum;
 8001214:	7bfb      	ldrb	r3, [r7, #15]

}
 8001216:	4618      	mov	r0, r3
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
	...

08001220 <MPU6050_ReadTemperature>:

/*
 * DATA ACQUISITION
 */

HAL_StatusTypeDef MPU6050_ReadTemperature(MPU6050 *dev) {
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
	/* Reading raw temperature values */
	uint8_t regData[2];

	HAL_StatusTypeDef status;

	status = MPU6050_ReadRegisters(dev, TEMP_OUT_H, regData, 2);
 8001228:	f107 0208 	add.w	r2, r7, #8
 800122c:	2302      	movs	r3, #2
 800122e:	2141      	movs	r1, #65	; 0x41
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f7ff ff26 	bl	8001082 <MPU6050_ReadRegisters>
 8001236:	4603      	mov	r3, r0
 8001238:	73fb      	strb	r3, [r7, #15]

	/*
	 * Combine values to give raw temperature reading
	 */
	int16_t tempRaw = (regData[0] << 8 | regData[1]);
 800123a:	7a3b      	ldrb	r3, [r7, #8]
 800123c:	021b      	lsls	r3, r3, #8
 800123e:	b21a      	sxth	r2, r3
 8001240:	7a7b      	ldrb	r3, [r7, #9]
 8001242:	b21b      	sxth	r3, r3
 8001244:	4313      	orrs	r3, r2
 8001246:	81bb      	strh	r3, [r7, #12]

	/*
	 * Convert to •C
	 */
	dev->temp_C = ((float) tempRaw / 340) + 36.5;
 8001248:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800124c:	ee07 3a90 	vmov	s15, r3
 8001250:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001254:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001274 <MPU6050_ReadTemperature+0x54>
 8001258:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800125c:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001278 <MPU6050_ReadTemperature+0x58>
 8001260:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	edc3 7a07 	vstr	s15, [r3, #28]

	return status;
 800126a:	7bfb      	ldrb	r3, [r7, #15]

}
 800126c:	4618      	mov	r0, r3
 800126e:	3710      	adds	r7, #16
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	43aa0000 	.word	0x43aa0000
 8001278:	42120000 	.word	0x42120000
 800127c:	00000000 	.word	0x00000000

08001280 <MPU6050_ReadAccelerations>:

HAL_StatusTypeDef MPU6050_ReadAccelerations(MPU6050 *dev) {
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
	/* Reading raw accelerometer values */
	uint8_t regData[6];

	HAL_StatusTypeDef status;

	status = MPU6050_ReadRegisters(dev, ACCEL_XOUT_H, regData, 6);
 8001288:	f107 0210 	add.w	r2, r7, #16
 800128c:	2306      	movs	r3, #6
 800128e:	213b      	movs	r1, #59	; 0x3b
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f7ff fef6 	bl	8001082 <MPU6050_ReadRegisters>
 8001296:	4603      	mov	r3, r0
 8001298:	75fb      	strb	r3, [r7, #23]
	/*
	 * Combine values to give raw temperature reading
	 */
	int16_t accRaw[3];

	accRaw[0] = (regData[0] << 8 | regData[1]);
 800129a:	7c3b      	ldrb	r3, [r7, #16]
 800129c:	021b      	lsls	r3, r3, #8
 800129e:	b21a      	sxth	r2, r3
 80012a0:	7c7b      	ldrb	r3, [r7, #17]
 80012a2:	b21b      	sxth	r3, r3
 80012a4:	4313      	orrs	r3, r2
 80012a6:	b21b      	sxth	r3, r3
 80012a8:	813b      	strh	r3, [r7, #8]
	accRaw[1] = (regData[2] << 8 | regData[3]);
 80012aa:	7cbb      	ldrb	r3, [r7, #18]
 80012ac:	021b      	lsls	r3, r3, #8
 80012ae:	b21a      	sxth	r2, r3
 80012b0:	7cfb      	ldrb	r3, [r7, #19]
 80012b2:	b21b      	sxth	r3, r3
 80012b4:	4313      	orrs	r3, r2
 80012b6:	b21b      	sxth	r3, r3
 80012b8:	817b      	strh	r3, [r7, #10]
	accRaw[2] = (regData[4] << 8 | regData[5]);
 80012ba:	7d3b      	ldrb	r3, [r7, #20]
 80012bc:	021b      	lsls	r3, r3, #8
 80012be:	b21a      	sxth	r2, r3
 80012c0:	7d7b      	ldrb	r3, [r7, #21]
 80012c2:	b21b      	sxth	r3, r3
 80012c4:	4313      	orrs	r3, r2
 80012c6:	b21b      	sxth	r3, r3
 80012c8:	81bb      	strh	r3, [r7, #12]
//	dev->acc_mps2[0] = -0.00239501953125 * accRaw[1];
//	dev->acc_mps2[1] = -0.00239501953125 * accRaw[0];
//	dev->acc_mps2[2] = -0.00239501953125 * accRaw[2];

	/* Worked for complementary filter */
	dev->acc_mps2[0] = 0.00239501953125 * accRaw[0];
 80012ca:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff f930 	bl	8000534 <__aeabi_i2d>
 80012d4:	a31c      	add	r3, pc, #112	; (adr r3, 8001348 <MPU6050_ReadAccelerations+0xc8>)
 80012d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012da:	f7ff f995 	bl	8000608 <__aeabi_dmul>
 80012de:	4602      	mov	r2, r0
 80012e0:	460b      	mov	r3, r1
 80012e2:	4610      	mov	r0, r2
 80012e4:	4619      	mov	r1, r3
 80012e6:	f7ff fc67 	bl	8000bb8 <__aeabi_d2f>
 80012ea:	4602      	mov	r2, r0
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	605a      	str	r2, [r3, #4]
	dev->acc_mps2[1] = 0.00239501953125 * accRaw[1];
 80012f0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff f91d 	bl	8000534 <__aeabi_i2d>
 80012fa:	a313      	add	r3, pc, #76	; (adr r3, 8001348 <MPU6050_ReadAccelerations+0xc8>)
 80012fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001300:	f7ff f982 	bl	8000608 <__aeabi_dmul>
 8001304:	4602      	mov	r2, r0
 8001306:	460b      	mov	r3, r1
 8001308:	4610      	mov	r0, r2
 800130a:	4619      	mov	r1, r3
 800130c:	f7ff fc54 	bl	8000bb8 <__aeabi_d2f>
 8001310:	4602      	mov	r2, r0
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	609a      	str	r2, [r3, #8]
	dev->acc_mps2[2] = 0.00239501953125 * accRaw[2];
 8001316:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff f90a 	bl	8000534 <__aeabi_i2d>
 8001320:	a309      	add	r3, pc, #36	; (adr r3, 8001348 <MPU6050_ReadAccelerations+0xc8>)
 8001322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001326:	f7ff f96f 	bl	8000608 <__aeabi_dmul>
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
 800132e:	4610      	mov	r0, r2
 8001330:	4619      	mov	r1, r3
 8001332:	f7ff fc41 	bl	8000bb8 <__aeabi_d2f>
 8001336:	4602      	mov	r2, r0
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	60da      	str	r2, [r3, #12]

	return status;
 800133c:	7dfb      	ldrb	r3, [r7, #23]
}
 800133e:	4618      	mov	r0, r3
 8001340:	3718      	adds	r7, #24
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	51eb851f 	.word	0x51eb851f
 800134c:	3f639eb8 	.word	0x3f639eb8

08001350 <MPU6050_ReadOrientation>:

HAL_StatusTypeDef MPU6050_ReadOrientation(MPU6050 *dev) {
 8001350:	b580      	push	{r7, lr}
 8001352:	b086      	sub	sp, #24
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
	/* Reading raw accelerometer values */
	uint8_t regData[6];

	HAL_StatusTypeDef status;

	status = MPU6050_ReadRegisters(dev, GYRO_XOUT_H, regData, 6);
 8001358:	f107 0210 	add.w	r2, r7, #16
 800135c:	2306      	movs	r3, #6
 800135e:	2143      	movs	r1, #67	; 0x43
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f7ff fe8e 	bl	8001082 <MPU6050_ReadRegisters>
 8001366:	4603      	mov	r3, r0
 8001368:	75fb      	strb	r3, [r7, #23]
	/*
	 * Combine values to give raw temperature reading
	 */
	int16_t gyroRaw[3];

	gyroRaw[0] = (regData[0] << 8 | regData[1]);
 800136a:	7c3b      	ldrb	r3, [r7, #16]
 800136c:	021b      	lsls	r3, r3, #8
 800136e:	b21a      	sxth	r2, r3
 8001370:	7c7b      	ldrb	r3, [r7, #17]
 8001372:	b21b      	sxth	r3, r3
 8001374:	4313      	orrs	r3, r2
 8001376:	b21b      	sxth	r3, r3
 8001378:	813b      	strh	r3, [r7, #8]
	gyroRaw[1] = (regData[2] << 8 | regData[3]);
 800137a:	7cbb      	ldrb	r3, [r7, #18]
 800137c:	021b      	lsls	r3, r3, #8
 800137e:	b21a      	sxth	r2, r3
 8001380:	7cfb      	ldrb	r3, [r7, #19]
 8001382:	b21b      	sxth	r3, r3
 8001384:	4313      	orrs	r3, r2
 8001386:	b21b      	sxth	r3, r3
 8001388:	817b      	strh	r3, [r7, #10]
	gyroRaw[2] = (regData[4] << 8 | regData[5]);
 800138a:	7d3b      	ldrb	r3, [r7, #20]
 800138c:	021b      	lsls	r3, r3, #8
 800138e:	b21a      	sxth	r2, r3
 8001390:	7d7b      	ldrb	r3, [r7, #21]
 8001392:	b21b      	sxth	r3, r3
 8001394:	4313      	orrs	r3, r2
 8001396:	b21b      	sxth	r3, r3
 8001398:	81bb      	strh	r3, [r7, #12]
//	dev->gyro_deg[0] += 0.0655 * 0.0174533 * gyroRaw[0];
//	dev->gyro_deg[1] += 0.0655 * 0.0174533 * gyroRaw[1];
//	dev->gyro_deg[2] += 0.0655 * 0.0174533 * gyroRaw[2];

	/* Worked for complementary filter */
	dev->gyro_deg[0] = 0.00026646259542f * gyroRaw[0];
 800139a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800139e:	ee07 3a90 	vmov	s15, r3
 80013a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013a6:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80013f4 <MPU6050_ReadOrientation+0xa4>
 80013aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	edc3 7a04 	vstr	s15, [r3, #16]
	dev->gyro_deg[1] = 0.00026646259542f * gyroRaw[1];
 80013b4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80013b8:	ee07 3a90 	vmov	s15, r3
 80013bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013c0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80013f4 <MPU6050_ReadOrientation+0xa4>
 80013c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	edc3 7a05 	vstr	s15, [r3, #20]
	dev->gyro_deg[2] = 0.00026646259542f * gyroRaw[2];
 80013ce:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80013d2:	ee07 3a90 	vmov	s15, r3
 80013d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013da:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80013f4 <MPU6050_ReadOrientation+0xa4>
 80013de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	edc3 7a06 	vstr	s15, [r3, #24]
	/* deg/s ==> rad/s  ==> remapping the axes */
//	dev->gyro_deg[0] = -0.00026646259542f * gyroRaw[1];
//	dev->gyro_deg[1] = -0.00026646259542f * gyroRaw[0];
//	dev->gyro_deg[2] = -0.00026646259542f * gyroRaw[2];

	return status;
 80013e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3718      	adds	r7, #24
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	398bb401 	.word	0x398bb401

080013f8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80013f8:	b5b0      	push	{r4, r5, r7, lr}
 80013fa:	ed2d 8b04 	vpush	{d8-d9}
 80013fe:	b0b2      	sub	sp, #200	; 0xc8
 8001400:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001402:	f000 fc61 	bl	8001cc8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001406:	f000 f9af 	bl	8001768 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800140a:	f000 fa43 	bl	8001894 <MX_GPIO_Init>
	MX_I2C1_Init();
 800140e:	f000 fa13 	bl	8001838 <MX_I2C1_Init>
	MX_USB_DEVICE_Init();
 8001412:	f007 fa4f 	bl	80088b4 <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 2 */

	uint8_t CDC_Transmit_FS(uint8_t*, int);

	/* Initialize IMU */
	MPU6050_Initialise(&IMU, &hi2c1);
 8001416:	49c6      	ldr	r1, [pc, #792]	; (8001730 <main+0x338>)
 8001418:	48c6      	ldr	r0, [pc, #792]	; (8001734 <main+0x33c>)
 800141a:	f7ff fe6c 	bl	80010f6 <MPU6050_Initialise>

	/* Initializes Moving Average filter (10 point) */
	FIRFilter_Init(&MAFilter[0]);
 800141e:	48c6      	ldr	r0, [pc, #792]	; (8001738 <main+0x340>)
 8001420:	f7ff fd9c 	bl	8000f5c <FIRFilter_Init>

	FIRFilter_Init(&MAFilter[1]);
 8001424:	48c5      	ldr	r0, [pc, #788]	; (800173c <main+0x344>)
 8001426:	f7ff fd99 	bl	8000f5c <FIRFilter_Init>

	/* Initialize First order IIR filter */
	for (int n = 0; n < 3; n++) {
 800142a:	2300      	movs	r3, #0
 800142c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001430:	e018      	b.n	8001464 <main+0x6c>

		FirstOrderIIR_Init(&lpfAcc[n], ACC_FILTER_ALPHA);
 8001432:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001436:	00db      	lsls	r3, r3, #3
 8001438:	4ac1      	ldr	r2, [pc, #772]	; (8001740 <main+0x348>)
 800143a:	4413      	add	r3, r2
 800143c:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8001744 <main+0x34c>
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff fdad 	bl	8000fa0 <FirstOrderIIR_Init>

		FirstOrderIIR_Init(&lpfGyro[n], GYRO_FILTER_ALPHA);
 8001446:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800144a:	00db      	lsls	r3, r3, #3
 800144c:	4abe      	ldr	r2, [pc, #760]	; (8001748 <main+0x350>)
 800144e:	4413      	add	r3, r2
 8001450:	ed9f 0abe 	vldr	s0, [pc, #760]	; 800174c <main+0x354>
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff fda3 	bl	8000fa0 <FirstOrderIIR_Init>
	for (int n = 0; n < 3; n++) {
 800145a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800145e:	3301      	adds	r3, #1
 8001460:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001464:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001468:	2b02      	cmp	r3, #2
 800146a:	dde2      	ble.n	8001432 <main+0x3a>

	/* USB data buffer */
	char usbBuf[128];

	/* Timer variables */
	uint32_t timerLog = 0;
 800146c:	2300      	movs	r3, #0
 800146e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	uint32_t timerLed = 0;
 8001472:	2300      	movs	r3, #0
 8001474:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	uint32_t timerLoop = 0;
 8001478:	2300      	movs	r3, #0
 800147a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	/* Estimated angles from the accelerometer */
	float phi_est_acc = 0;
 800147e:	f04f 0300 	mov.w	r3, #0
 8001482:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	float theta_est_acc = 0;
 8001486:	f04f 0300 	mov.w	r3, #0
 800148a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	float phi_est_gyro = 0;
 800148e:	f04f 0300 	mov.w	r3, #0
 8001492:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	float theta_est_gyro = 0;
 8001496:	f04f 0300 	mov.w	r3, #0
 800149a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	float theta_est = 0;
 800149e:	f04f 0300 	mov.w	r3, #0
 80014a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	float phi_est = 0;
 80014a6:	f04f 0300 	mov.w	r3, #0
 80014aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	float phi_dot_eul = 0;
 80014ae:	f04f 0300 	mov.w	r3, #0
 80014b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	float theta_dot_eul = 0;
 80014b6:	f04f 0300 	mov.w	r3, #0
 80014ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		/* IMU update loop */
		if ((HAL_GetTick() - timerLoop) >= LOOP_TIME_MS) {
 80014be:	f000 fc69 	bl	8001d94 <HAL_GetTick>
 80014c2:	4602      	mov	r2, r0
 80014c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80014c8:	4293      	cmp	r3, r2
 80014ca:	f000 80dd 	beq.w	8001688 <main+0x290>

			/* Read Orientation */
			MPU6050_ReadOrientation(&IMU);
 80014ce:	4899      	ldr	r0, [pc, #612]	; (8001734 <main+0x33c>)
 80014d0:	f7ff ff3e 	bl	8001350 <MPU6050_ReadOrientation>

			/* Read temperature */
			MPU6050_ReadTemperature(&IMU);
 80014d4:	4897      	ldr	r0, [pc, #604]	; (8001734 <main+0x33c>)
 80014d6:	f7ff fea3 	bl	8001220 <MPU6050_ReadTemperature>

			/* Read Accelerations */
			MPU6050_ReadAccelerations(&IMU);
 80014da:	4896      	ldr	r0, [pc, #600]	; (8001734 <main+0x33c>)
 80014dc:	f7ff fed0 	bl	8001280 <MPU6050_ReadAccelerations>

			/* Fitering accelerometer data (test) */

			for (int n = 0; n < 3; n++) {
 80014e0:	2300      	movs	r3, #0
 80014e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80014e6:	e028      	b.n	800153a <main+0x142>

				FirstOrderIIR_Update(&lpfAcc[n], IMU.acc_mps2[n]);
 80014e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80014ec:	00db      	lsls	r3, r3, #3
 80014ee:	4a94      	ldr	r2, [pc, #592]	; (8001740 <main+0x348>)
 80014f0:	441a      	add	r2, r3
 80014f2:	4990      	ldr	r1, [pc, #576]	; (8001734 <main+0x33c>)
 80014f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	440b      	add	r3, r1
 80014fc:	3304      	adds	r3, #4
 80014fe:	edd3 7a00 	vldr	s15, [r3]
 8001502:	eeb0 0a67 	vmov.f32	s0, s15
 8001506:	4610      	mov	r0, r2
 8001508:	f7ff fd77 	bl	8000ffa <FirstOrderIIR_Update>

				FirstOrderIIR_Update(&lpfGyro[n], IMU.gyro_deg[n]);
 800150c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001510:	00db      	lsls	r3, r3, #3
 8001512:	4a8d      	ldr	r2, [pc, #564]	; (8001748 <main+0x350>)
 8001514:	441a      	add	r2, r3
 8001516:	4987      	ldr	r1, [pc, #540]	; (8001734 <main+0x33c>)
 8001518:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800151c:	3304      	adds	r3, #4
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	440b      	add	r3, r1
 8001522:	edd3 7a00 	vldr	s15, [r3]
 8001526:	eeb0 0a67 	vmov.f32	s0, s15
 800152a:	4610      	mov	r0, r2
 800152c:	f7ff fd65 	bl	8000ffa <FirstOrderIIR_Update>
			for (int n = 0; n < 3; n++) {
 8001530:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001534:	3301      	adds	r3, #1
 8001536:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800153a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800153e:	2b02      	cmp	r3, #2
 8001540:	ddd2      	ble.n	80014e8 <main+0xf0>

			}

			/* Getting theta and phi estimates from the accelerometer */
			phi_est_acc = atan2f(lpfAcc[1].out, lpfAcc[2].out);
 8001542:	4b7f      	ldr	r3, [pc, #508]	; (8001740 <main+0x348>)
 8001544:	edd3 7a03 	vldr	s15, [r3, #12]
 8001548:	4b7d      	ldr	r3, [pc, #500]	; (8001740 <main+0x348>)
 800154a:	ed93 7a05 	vldr	s14, [r3, #20]
 800154e:	eef0 0a47 	vmov.f32	s1, s14
 8001552:	eeb0 0a67 	vmov.f32	s0, s15
 8001556:	f00a fec9 	bl	800c2ec <atan2f>
 800155a:	ed87 0a26 	vstr	s0, [r7, #152]	; 0x98
			theta_est_acc = asinf(lpfAcc[0].out / 9.81);
 800155e:	4b78      	ldr	r3, [pc, #480]	; (8001740 <main+0x348>)
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	4618      	mov	r0, r3
 8001564:	f7fe fff8 	bl	8000558 <__aeabi_f2d>
 8001568:	a36f      	add	r3, pc, #444	; (adr r3, 8001728 <main+0x330>)
 800156a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800156e:	f7ff f975 	bl	800085c <__aeabi_ddiv>
 8001572:	4602      	mov	r2, r0
 8001574:	460b      	mov	r3, r1
 8001576:	4610      	mov	r0, r2
 8001578:	4619      	mov	r1, r3
 800157a:	f7ff fb1d 	bl	8000bb8 <__aeabi_d2f>
 800157e:	4603      	mov	r3, r0
 8001580:	ee00 3a10 	vmov	s0, r3
 8001584:	f00a fe86 	bl	800c294 <asinf>
 8001588:	ed87 0a25 	vstr	s0, [r7, #148]	; 0x94

			/* Getting theta and phi estimates from the gyroscope (by transforming the body rates to euler rates) */
			phi_dot_eul = lpfGyro[0].out
 800158c:	4b6e      	ldr	r3, [pc, #440]	; (8001748 <main+0x350>)
 800158e:	ed93 8a01 	vldr	s16, [r3, #4]
					+ tanf(theta_est)
 8001592:	ed97 0a29 	vldr	s0, [r7, #164]	; 0xa4
 8001596:	f00a fe51 	bl	800c23c <tanf>
 800159a:	eeb0 9a40 	vmov.f32	s18, s0
							* (sinf(phi_est) * lpfGyro[1].out
 800159e:	ed97 0a28 	vldr	s0, [r7, #160]	; 0xa0
 80015a2:	f00a fe05 	bl	800c1b0 <sinf>
 80015a6:	eeb0 7a40 	vmov.f32	s14, s0
 80015aa:	4b67      	ldr	r3, [pc, #412]	; (8001748 <main+0x350>)
 80015ac:	edd3 7a03 	vldr	s15, [r3, #12]
 80015b0:	ee67 8a27 	vmul.f32	s17, s14, s15
									+ cosf(phi_est) * lpfGyro[2].out);
 80015b4:	ed97 0a28 	vldr	s0, [r7, #160]	; 0xa0
 80015b8:	f00a fdb6 	bl	800c128 <cosf>
 80015bc:	eeb0 7a40 	vmov.f32	s14, s0
 80015c0:	4b61      	ldr	r3, [pc, #388]	; (8001748 <main+0x350>)
 80015c2:	edd3 7a05 	vldr	s15, [r3, #20]
 80015c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015ca:	ee78 7aa7 	vadd.f32	s15, s17, s15
							* (sinf(phi_est) * lpfGyro[1].out
 80015ce:	ee69 7a27 	vmul.f32	s15, s18, s15
			phi_dot_eul = lpfGyro[0].out
 80015d2:	ee78 7a27 	vadd.f32	s15, s16, s15
 80015d6:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88

			theta_dot_eul = cosf(phi_est) * lpfGyro[1].out
 80015da:	ed97 0a28 	vldr	s0, [r7, #160]	; 0xa0
 80015de:	f00a fda3 	bl	800c128 <cosf>
 80015e2:	eeb0 7a40 	vmov.f32	s14, s0
 80015e6:	4b58      	ldr	r3, [pc, #352]	; (8001748 <main+0x350>)
 80015e8:	edd3 7a03 	vldr	s15, [r3, #12]
 80015ec:	ee27 8a27 	vmul.f32	s16, s14, s15
					- sinf(phi_est) * lpfGyro[2].out;
 80015f0:	ed97 0a28 	vldr	s0, [r7, #160]	; 0xa0
 80015f4:	f00a fddc 	bl	800c1b0 <sinf>
 80015f8:	eeb0 7a40 	vmov.f32	s14, s0
 80015fc:	4b52      	ldr	r3, [pc, #328]	; (8001748 <main+0x350>)
 80015fe:	edd3 7a05 	vldr	s15, [r3, #20]
 8001602:	ee67 7a27 	vmul.f32	s15, s14, s15
			theta_dot_eul = cosf(phi_est) * lpfGyro[1].out
 8001606:	ee78 7a67 	vsub.f32	s15, s16, s15
 800160a:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84

			/* Integrating gyro values to get theta and phi estimates */
			theta_est_gyro = (SAMPLE_TIME_LOG_MS / 1000.0f) * theta_dot_eul;
 800160e:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001612:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8001750 <main+0x358>
 8001616:	ee67 7a87 	vmul.f32	s15, s15, s14
 800161a:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c

			phi_est_gyro = (SAMPLE_TIME_LOG_MS / 1000.0f) * phi_dot_eul;
 800161e:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001622:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8001750 <main+0x358>
 8001626:	ee67 7a87 	vmul.f32	s15, s15, s14
 800162a:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90

			/* Combining accelerometer estimates with integral of gyro readings */
			phi_est = ALPHA * phi_est_acc
 800162e:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8001632:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8001754 <main+0x35c>
 8001636:	ee27 7a87 	vmul.f32	s14, s15, s14
					+ (1.0f - ALPHA) * (phi_est + phi_est_gyro);
 800163a:	edd7 6a28 	vldr	s13, [r7, #160]	; 0xa0
 800163e:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001642:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001646:	eddf 6a44 	vldr	s13, [pc, #272]	; 8001758 <main+0x360>
 800164a:	ee67 7aa6 	vmul.f32	s15, s15, s13
			phi_est = ALPHA * phi_est_acc
 800164e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001652:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
			theta_est = ALPHA * theta_est_acc
 8001656:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800165a:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8001754 <main+0x35c>
 800165e:	ee27 7a87 	vmul.f32	s14, s15, s14
					+ (1.0f - ALPHA) * (theta_est + theta_est_gyro);
 8001662:	edd7 6a29 	vldr	s13, [r7, #164]	; 0xa4
 8001666:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800166a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800166e:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8001758 <main+0x360>
 8001672:	ee67 7aa6 	vmul.f32	s15, s15, s13
			theta_est = ALPHA * theta_est_acc
 8001676:	ee77 7a27 	vadd.f32	s15, s14, s15
 800167a:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4

//
//

			timerLoop += LOOP_TIME_MS;
 800167e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001682:	3301      	adds	r3, #1
 8001684:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		}

		/* Send data via virtual COM port */
		if ((HAL_GetTick() - timerLog) >= SAMPLE_TIME_LOG_MS) {
 8001688:	f000 fb84 	bl	8001d94 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	2b31      	cmp	r3, #49	; 0x31
 8001696:	d92f      	bls.n	80016f8 <main+0x300>
//
//			FIRFilter_Update(&MAFilter[1], phi_est);

			/* printing out theta and phi estimates */
			uint8_t usbBufLen = snprintf(usbBuf, 128, "%.3f, %.3f \r\n",
					theta_est * RAD_TO_DEG, phi_est * RAD_TO_DEG);
 8001698:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800169c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800175c <main+0x364>
 80016a0:	ee67 7a87 	vmul.f32	s15, s15, s14
			uint8_t usbBufLen = snprintf(usbBuf, 128, "%.3f, %.3f \r\n",
 80016a4:	ee17 0a90 	vmov	r0, s15
 80016a8:	f7fe ff56 	bl	8000558 <__aeabi_f2d>
 80016ac:	4604      	mov	r4, r0
 80016ae:	460d      	mov	r5, r1
					theta_est * RAD_TO_DEG, phi_est * RAD_TO_DEG);
 80016b0:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80016b4:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800175c <main+0x364>
 80016b8:	ee67 7a87 	vmul.f32	s15, s15, s14
			uint8_t usbBufLen = snprintf(usbBuf, 128, "%.3f, %.3f \r\n",
 80016bc:	ee17 0a90 	vmov	r0, s15
 80016c0:	f7fe ff4a 	bl	8000558 <__aeabi_f2d>
 80016c4:	4602      	mov	r2, r0
 80016c6:	460b      	mov	r3, r1
 80016c8:	4638      	mov	r0, r7
 80016ca:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80016ce:	e9cd 4500 	strd	r4, r5, [sp]
 80016d2:	4a23      	ldr	r2, [pc, #140]	; (8001760 <main+0x368>)
 80016d4:	2180      	movs	r1, #128	; 0x80
 80016d6:	f008 fa99 	bl	8009c0c <sniprintf>
 80016da:	4603      	mov	r3, r0
 80016dc:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83

//			uint8_t usbBufLen = snprintf(usbBuf, 128,
//					"%.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f\r\n",IMU.gyro_deg[0], IMU.gyro_deg[1], IMU.gyro_deg[2], IMU.acc_mps2[0],
//					IMU.acc_mps2[1], IMU.acc_mps2[2], IMU.temp_C);

			CDC_Transmit_FS((uint8_t*) usbBuf, usbBufLen);
 80016e0:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 80016e4:	463b      	mov	r3, r7
 80016e6:	4611      	mov	r1, r2
 80016e8:	4618      	mov	r0, r3
 80016ea:	f007 f9a1 	bl	8008a30 <CDC_Transmit_FS>

			timerLog += SAMPLE_TIME_LOG_MS;
 80016ee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80016f2:	3332      	adds	r3, #50	; 0x32
 80016f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		}

		/* Toggle LED */
		if ((HAL_GetTick() - timerLed) >= SAMPLE_TIME_LED_MS) {
 80016f8:	f000 fb4c 	bl	8001d94 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001708:	f4ff aed9 	bcc.w	80014be <main+0xc6>

			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800170c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001710:	4814      	ldr	r0, [pc, #80]	; (8001764 <main+0x36c>)
 8001712:	f000 fe1e 	bl	8002352 <HAL_GPIO_TogglePin>

			timerLed += SAMPLE_TIME_LED_MS;
 8001716:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800171a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800171e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		if ((HAL_GetTick() - timerLoop) >= LOOP_TIME_MS) {
 8001722:	e6cc      	b.n	80014be <main+0xc6>
 8001724:	f3af 8000 	nop.w
 8001728:	51eb851f 	.word	0x51eb851f
 800172c:	40239eb8 	.word	0x40239eb8
 8001730:	200002e8 	.word	0x200002e8
 8001734:	2000033c 	.word	0x2000033c
 8001738:	2000035c 	.word	0x2000035c
 800173c:	2000038c 	.word	0x2000038c
 8001740:	200003bc 	.word	0x200003bc
 8001744:	3dcccccd 	.word	0x3dcccccd
 8001748:	200003d4 	.word	0x200003d4
 800174c:	3c23d70a 	.word	0x3c23d70a
 8001750:	3d4ccccd 	.word	0x3d4ccccd
 8001754:	3e19999a 	.word	0x3e19999a
 8001758:	3f59999a 	.word	0x3f59999a
 800175c:	42652ee1 	.word	0x42652ee1
 8001760:	0800d3c0 	.word	0x0800d3c0
 8001764:	40020800 	.word	0x40020800

08001768 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001768:	b580      	push	{r7, lr}
 800176a:	b094      	sub	sp, #80	; 0x50
 800176c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800176e:	f107 0320 	add.w	r3, r7, #32
 8001772:	2230      	movs	r2, #48	; 0x30
 8001774:	2100      	movs	r1, #0
 8001776:	4618      	mov	r0, r3
 8001778:	f007 fdd6 	bl	8009328 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800177c:	f107 030c 	add.w	r3, r7, #12
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	605a      	str	r2, [r3, #4]
 8001786:	609a      	str	r2, [r3, #8]
 8001788:	60da      	str	r2, [r3, #12]
 800178a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800178c:	2300      	movs	r3, #0
 800178e:	60bb      	str	r3, [r7, #8]
 8001790:	4b27      	ldr	r3, [pc, #156]	; (8001830 <SystemClock_Config+0xc8>)
 8001792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001794:	4a26      	ldr	r2, [pc, #152]	; (8001830 <SystemClock_Config+0xc8>)
 8001796:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800179a:	6413      	str	r3, [r2, #64]	; 0x40
 800179c:	4b24      	ldr	r3, [pc, #144]	; (8001830 <SystemClock_Config+0xc8>)
 800179e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a4:	60bb      	str	r3, [r7, #8]
 80017a6:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017a8:	2300      	movs	r3, #0
 80017aa:	607b      	str	r3, [r7, #4]
 80017ac:	4b21      	ldr	r3, [pc, #132]	; (8001834 <SystemClock_Config+0xcc>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a20      	ldr	r2, [pc, #128]	; (8001834 <SystemClock_Config+0xcc>)
 80017b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017b6:	6013      	str	r3, [r2, #0]
 80017b8:	4b1e      	ldr	r3, [pc, #120]	; (8001834 <SystemClock_Config+0xcc>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017c0:	607b      	str	r3, [r7, #4]
 80017c2:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017c4:	2301      	movs	r3, #1
 80017c6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017cc:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017ce:	2302      	movs	r3, #2
 80017d0:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017d6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 25;
 80017d8:	2319      	movs	r3, #25
 80017da:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 192;
 80017dc:	23c0      	movs	r3, #192	; 0xc0
 80017de:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017e0:	2302      	movs	r3, #2
 80017e2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80017e4:	2304      	movs	r3, #4
 80017e6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80017e8:	f107 0320 	add.w	r3, r7, #32
 80017ec:	4618      	mov	r0, r3
 80017ee:	f003 f807 	bl	8004800 <HAL_RCC_OscConfig>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <SystemClock_Config+0x94>
		Error_Handler();
 80017f8:	f000 f8ac 	bl	8001954 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80017fc:	230f      	movs	r3, #15
 80017fe:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001800:	2302      	movs	r3, #2
 8001802:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001804:	2300      	movs	r3, #0
 8001806:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001808:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800180c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800180e:	2300      	movs	r3, #0
 8001810:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8001812:	f107 030c 	add.w	r3, r7, #12
 8001816:	2103      	movs	r1, #3
 8001818:	4618      	mov	r0, r3
 800181a:	f003 fa69 	bl	8004cf0 <HAL_RCC_ClockConfig>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <SystemClock_Config+0xc0>
		Error_Handler();
 8001824:	f000 f896 	bl	8001954 <Error_Handler>
	}
}
 8001828:	bf00      	nop
 800182a:	3750      	adds	r7, #80	; 0x50
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	40023800 	.word	0x40023800
 8001834:	40007000 	.word	0x40007000

08001838 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800183c:	4b12      	ldr	r3, [pc, #72]	; (8001888 <MX_I2C1_Init+0x50>)
 800183e:	4a13      	ldr	r2, [pc, #76]	; (800188c <MX_I2C1_Init+0x54>)
 8001840:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 8001842:	4b11      	ldr	r3, [pc, #68]	; (8001888 <MX_I2C1_Init+0x50>)
 8001844:	4a12      	ldr	r2, [pc, #72]	; (8001890 <MX_I2C1_Init+0x58>)
 8001846:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001848:	4b0f      	ldr	r3, [pc, #60]	; (8001888 <MX_I2C1_Init+0x50>)
 800184a:	2200      	movs	r2, #0
 800184c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800184e:	4b0e      	ldr	r3, [pc, #56]	; (8001888 <MX_I2C1_Init+0x50>)
 8001850:	2200      	movs	r2, #0
 8001852:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001854:	4b0c      	ldr	r3, [pc, #48]	; (8001888 <MX_I2C1_Init+0x50>)
 8001856:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800185a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800185c:	4b0a      	ldr	r3, [pc, #40]	; (8001888 <MX_I2C1_Init+0x50>)
 800185e:	2200      	movs	r2, #0
 8001860:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001862:	4b09      	ldr	r3, [pc, #36]	; (8001888 <MX_I2C1_Init+0x50>)
 8001864:	2200      	movs	r2, #0
 8001866:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_ENABLE;
 8001868:	4b07      	ldr	r3, [pc, #28]	; (8001888 <MX_I2C1_Init+0x50>)
 800186a:	2240      	movs	r2, #64	; 0x40
 800186c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800186e:	4b06      	ldr	r3, [pc, #24]	; (8001888 <MX_I2C1_Init+0x50>)
 8001870:	2200      	movs	r2, #0
 8001872:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001874:	4804      	ldr	r0, [pc, #16]	; (8001888 <MX_I2C1_Init+0x50>)
 8001876:	f000 fd87 	bl	8002388 <HAL_I2C_Init>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8001880:	f000 f868 	bl	8001954 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001884:	bf00      	nop
 8001886:	bd80      	pop	{r7, pc}
 8001888:	200002e8 	.word	0x200002e8
 800188c:	40005400 	.word	0x40005400
 8001890:	00061a80 	.word	0x00061a80

08001894 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001894:	b580      	push	{r7, lr}
 8001896:	b08a      	sub	sp, #40	; 0x28
 8001898:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800189a:	f107 0314 	add.w	r3, r7, #20
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	605a      	str	r2, [r3, #4]
 80018a4:	609a      	str	r2, [r3, #8]
 80018a6:	60da      	str	r2, [r3, #12]
 80018a8:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	613b      	str	r3, [r7, #16]
 80018ae:	4b27      	ldr	r3, [pc, #156]	; (800194c <MX_GPIO_Init+0xb8>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	4a26      	ldr	r2, [pc, #152]	; (800194c <MX_GPIO_Init+0xb8>)
 80018b4:	f043 0304 	orr.w	r3, r3, #4
 80018b8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ba:	4b24      	ldr	r3, [pc, #144]	; (800194c <MX_GPIO_Init+0xb8>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	f003 0304 	and.w	r3, r3, #4
 80018c2:	613b      	str	r3, [r7, #16]
 80018c4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	60fb      	str	r3, [r7, #12]
 80018ca:	4b20      	ldr	r3, [pc, #128]	; (800194c <MX_GPIO_Init+0xb8>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	4a1f      	ldr	r2, [pc, #124]	; (800194c <MX_GPIO_Init+0xb8>)
 80018d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018d4:	6313      	str	r3, [r2, #48]	; 0x30
 80018d6:	4b1d      	ldr	r3, [pc, #116]	; (800194c <MX_GPIO_Init+0xb8>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	60bb      	str	r3, [r7, #8]
 80018e6:	4b19      	ldr	r3, [pc, #100]	; (800194c <MX_GPIO_Init+0xb8>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	4a18      	ldr	r2, [pc, #96]	; (800194c <MX_GPIO_Init+0xb8>)
 80018ec:	f043 0301 	orr.w	r3, r3, #1
 80018f0:	6313      	str	r3, [r2, #48]	; 0x30
 80018f2:	4b16      	ldr	r3, [pc, #88]	; (800194c <MX_GPIO_Init+0xb8>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	60bb      	str	r3, [r7, #8]
 80018fc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80018fe:	2300      	movs	r3, #0
 8001900:	607b      	str	r3, [r7, #4]
 8001902:	4b12      	ldr	r3, [pc, #72]	; (800194c <MX_GPIO_Init+0xb8>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	4a11      	ldr	r2, [pc, #68]	; (800194c <MX_GPIO_Init+0xb8>)
 8001908:	f043 0302 	orr.w	r3, r3, #2
 800190c:	6313      	str	r3, [r2, #48]	; 0x30
 800190e:	4b0f      	ldr	r3, [pc, #60]	; (800194c <MX_GPIO_Init+0xb8>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	607b      	str	r3, [r7, #4]
 8001918:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800191a:	2200      	movs	r2, #0
 800191c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001920:	480b      	ldr	r0, [pc, #44]	; (8001950 <MX_GPIO_Init+0xbc>)
 8001922:	f000 fcfd 	bl	8002320 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 8001926:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800192a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800192c:	2301      	movs	r3, #1
 800192e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001930:	2300      	movs	r3, #0
 8001932:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001934:	2300      	movs	r3, #0
 8001936:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001938:	f107 0314 	add.w	r3, r7, #20
 800193c:	4619      	mov	r1, r3
 800193e:	4804      	ldr	r0, [pc, #16]	; (8001950 <MX_GPIO_Init+0xbc>)
 8001940:	f000 fb6a 	bl	8002018 <HAL_GPIO_Init>

}
 8001944:	bf00      	nop
 8001946:	3728      	adds	r7, #40	; 0x28
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	40023800 	.word	0x40023800
 8001950:	40020800 	.word	0x40020800

08001954 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001958:	b672      	cpsid	i
}
 800195a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800195c:	e7fe      	b.n	800195c <Error_Handler+0x8>
	...

08001960 <HAL_MspInit>:

/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8001966:	2300      	movs	r3, #0
 8001968:	607b      	str	r3, [r7, #4]
 800196a:	4b10      	ldr	r3, [pc, #64]	; (80019ac <HAL_MspInit+0x4c>)
 800196c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196e:	4a0f      	ldr	r2, [pc, #60]	; (80019ac <HAL_MspInit+0x4c>)
 8001970:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001974:	6453      	str	r3, [r2, #68]	; 0x44
 8001976:	4b0d      	ldr	r3, [pc, #52]	; (80019ac <HAL_MspInit+0x4c>)
 8001978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800197a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800197e:	607b      	str	r3, [r7, #4]
 8001980:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_PWR_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	603b      	str	r3, [r7, #0]
 8001986:	4b09      	ldr	r3, [pc, #36]	; (80019ac <HAL_MspInit+0x4c>)
 8001988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198a:	4a08      	ldr	r2, [pc, #32]	; (80019ac <HAL_MspInit+0x4c>)
 800198c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001990:	6413      	str	r3, [r2, #64]	; 0x40
 8001992:	4b06      	ldr	r3, [pc, #24]	; (80019ac <HAL_MspInit+0x4c>)
 8001994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800199a:	603b      	str	r3, [r7, #0]
 800199c:	683b      	ldr	r3, [r7, #0]
	/* System interrupt init*/

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	40023800 	.word	0x40023800

080019b0 <HAL_I2C_MspInit>:
 * @brief I2C MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hi2c: I2C handle pointer
 * @retval None
 */
void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c) {
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b08a      	sub	sp, #40	; 0x28
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80019b8:	f107 0314 	add.w	r3, r7, #20
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	605a      	str	r2, [r3, #4]
 80019c2:	609a      	str	r2, [r3, #8]
 80019c4:	60da      	str	r2, [r3, #12]
 80019c6:	611a      	str	r2, [r3, #16]
	if (hi2c->Instance == I2C1) {
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a20      	ldr	r2, [pc, #128]	; (8001a50 <HAL_I2C_MspInit+0xa0>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d13a      	bne.n	8001a48 <HAL_I2C_MspInit+0x98>
		/* USER CODE BEGIN I2C1_MspInit 0 */

		/* USER CODE END I2C1_MspInit 0 */

		/* Peripheral clock enable */
		__HAL_RCC_I2C1_CLK_ENABLE();
 80019d2:	2300      	movs	r3, #0
 80019d4:	613b      	str	r3, [r7, #16]
 80019d6:	4b1f      	ldr	r3, [pc, #124]	; (8001a54 <HAL_I2C_MspInit+0xa4>)
 80019d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019da:	4a1e      	ldr	r2, [pc, #120]	; (8001a54 <HAL_I2C_MspInit+0xa4>)
 80019dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019e0:	6413      	str	r3, [r2, #64]	; 0x40
 80019e2:	4b1c      	ldr	r3, [pc, #112]	; (8001a54 <HAL_I2C_MspInit+0xa4>)
 80019e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019ea:	613b      	str	r3, [r7, #16]
 80019ec:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOB_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	60fb      	str	r3, [r7, #12]
 80019f2:	4b18      	ldr	r3, [pc, #96]	; (8001a54 <HAL_I2C_MspInit+0xa4>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	4a17      	ldr	r2, [pc, #92]	; (8001a54 <HAL_I2C_MspInit+0xa4>)
 80019f8:	f043 0302 	orr.w	r3, r3, #2
 80019fc:	6313      	str	r3, [r2, #48]	; 0x30
 80019fe:	4b15      	ldr	r3, [pc, #84]	; (8001a54 <HAL_I2C_MspInit+0xa4>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	68fb      	ldr	r3, [r7, #12]
		/**I2C1 GPIO Configuration
		 PB6     ------> I2C1_SCL
		 PB7     ------> I2C1_SDA
		 */
		GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a0a:	2312      	movs	r3, #18
 8001a0c:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pin = IMU_SCL_Pin | IMU_SDA_Pin;
 8001a12:	23c0      	movs	r3, #192	; 0xc0
 8001a14:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a16:	2301      	movs	r3, #1
 8001a18:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a1a:	2304      	movs	r3, #4
 8001a1c:	627b      	str	r3, [r7, #36]	; 0x24
		__HAL_RCC_I2C1_FORCE_RESET();
 8001a1e:	4b0d      	ldr	r3, [pc, #52]	; (8001a54 <HAL_I2C_MspInit+0xa4>)
 8001a20:	6a1b      	ldr	r3, [r3, #32]
 8001a22:	4a0c      	ldr	r2, [pc, #48]	; (8001a54 <HAL_I2C_MspInit+0xa4>)
 8001a24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a28:	6213      	str	r3, [r2, #32]
		HAL_Delay(2);
 8001a2a:	2002      	movs	r0, #2
 8001a2c:	f000 f9be 	bl	8001dac <HAL_Delay>
		__HAL_RCC_I2C1_RELEASE_RESET();
 8001a30:	4b08      	ldr	r3, [pc, #32]	; (8001a54 <HAL_I2C_MspInit+0xa4>)
 8001a32:	6a1b      	ldr	r3, [r3, #32]
 8001a34:	4a07      	ldr	r2, [pc, #28]	; (8001a54 <HAL_I2C_MspInit+0xa4>)
 8001a36:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001a3a:	6213      	str	r3, [r2, #32]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a3c:	f107 0314 	add.w	r3, r7, #20
 8001a40:	4619      	mov	r1, r3
 8001a42:	4805      	ldr	r0, [pc, #20]	; (8001a58 <HAL_I2C_MspInit+0xa8>)
 8001a44:	f000 fae8 	bl	8002018 <HAL_GPIO_Init>
		/* USER CODE BEGIN I2C1_MspInit 1 */

		/* USER CODE END I2C1_MspInit 1 */
	}

}
 8001a48:	bf00      	nop
 8001a4a:	3728      	adds	r7, #40	; 0x28
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	40005400 	.word	0x40005400
 8001a54:	40023800 	.word	0x40023800
 8001a58:	40020400 	.word	0x40020400

08001a5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a60:	e7fe      	b.n	8001a60 <NMI_Handler+0x4>

08001a62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a62:	b480      	push	{r7}
 8001a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a66:	e7fe      	b.n	8001a66 <HardFault_Handler+0x4>

08001a68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a6c:	e7fe      	b.n	8001a6c <MemManage_Handler+0x4>

08001a6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a72:	e7fe      	b.n	8001a72 <BusFault_Handler+0x4>

08001a74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a78:	e7fe      	b.n	8001a78 <UsageFault_Handler+0x4>

08001a7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a8c:	bf00      	nop
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr

08001a96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a96:	b480      	push	{r7}
 8001a98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aa8:	f000 f960 	bl	8001d6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001aac:	bf00      	nop
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001ab4:	4802      	ldr	r0, [pc, #8]	; (8001ac0 <OTG_FS_IRQHandler+0x10>)
 8001ab6:	f001 fd76 	bl	80035a6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001aba:	bf00      	nop
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	200018d4 	.word	0x200018d4

08001ac4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
	return 1;
 8001ac8:	2301      	movs	r3, #1
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <_kill>:

int _kill(int pid, int sig)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001ade:	f007 fbf9 	bl	80092d4 <__errno>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2216      	movs	r2, #22
 8001ae6:	601a      	str	r2, [r3, #0]
	return -1;
 8001ae8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <_exit>:

void _exit (int status)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001afc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f7ff ffe7 	bl	8001ad4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b06:	e7fe      	b.n	8001b06 <_exit+0x12>

08001b08 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b086      	sub	sp, #24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b14:	2300      	movs	r3, #0
 8001b16:	617b      	str	r3, [r7, #20]
 8001b18:	e00a      	b.n	8001b30 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b1a:	f3af 8000 	nop.w
 8001b1e:	4601      	mov	r1, r0
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	1c5a      	adds	r2, r3, #1
 8001b24:	60ba      	str	r2, [r7, #8]
 8001b26:	b2ca      	uxtb	r2, r1
 8001b28:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	617b      	str	r3, [r7, #20]
 8001b30:	697a      	ldr	r2, [r7, #20]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	dbf0      	blt.n	8001b1a <_read+0x12>
	}

return len;
 8001b38:	687b      	ldr	r3, [r7, #4]
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3718      	adds	r7, #24
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b086      	sub	sp, #24
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	60f8      	str	r0, [r7, #12]
 8001b4a:	60b9      	str	r1, [r7, #8]
 8001b4c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b4e:	2300      	movs	r3, #0
 8001b50:	617b      	str	r3, [r7, #20]
 8001b52:	e009      	b.n	8001b68 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	1c5a      	adds	r2, r3, #1
 8001b58:	60ba      	str	r2, [r7, #8]
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	3301      	adds	r3, #1
 8001b66:	617b      	str	r3, [r7, #20]
 8001b68:	697a      	ldr	r2, [r7, #20]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	dbf1      	blt.n	8001b54 <_write+0x12>
	}
	return len;
 8001b70:	687b      	ldr	r3, [r7, #4]
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3718      	adds	r7, #24
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <_close>:

int _close(int file)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	b083      	sub	sp, #12
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
	return -1;
 8001b82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr

08001b92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b92:	b480      	push	{r7}
 8001b94:	b083      	sub	sp, #12
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
 8001b9a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ba2:	605a      	str	r2, [r3, #4]
	return 0;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr

08001bb2 <_isatty>:

int _isatty(int file)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	b083      	sub	sp, #12
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
	return 1;
 8001bba:	2301      	movs	r3, #1
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b085      	sub	sp, #20
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	60b9      	str	r1, [r7, #8]
 8001bd2:	607a      	str	r2, [r7, #4]
	return 0;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3714      	adds	r7, #20
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
	...

08001be4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bec:	4a14      	ldr	r2, [pc, #80]	; (8001c40 <_sbrk+0x5c>)
 8001bee:	4b15      	ldr	r3, [pc, #84]	; (8001c44 <_sbrk+0x60>)
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bf8:	4b13      	ldr	r3, [pc, #76]	; (8001c48 <_sbrk+0x64>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d102      	bne.n	8001c06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c00:	4b11      	ldr	r3, [pc, #68]	; (8001c48 <_sbrk+0x64>)
 8001c02:	4a12      	ldr	r2, [pc, #72]	; (8001c4c <_sbrk+0x68>)
 8001c04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c06:	4b10      	ldr	r3, [pc, #64]	; (8001c48 <_sbrk+0x64>)
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d207      	bcs.n	8001c24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c14:	f007 fb5e 	bl	80092d4 <__errno>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	220c      	movs	r2, #12
 8001c1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c22:	e009      	b.n	8001c38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c24:	4b08      	ldr	r3, [pc, #32]	; (8001c48 <_sbrk+0x64>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c2a:	4b07      	ldr	r3, [pc, #28]	; (8001c48 <_sbrk+0x64>)
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4413      	add	r3, r2
 8001c32:	4a05      	ldr	r2, [pc, #20]	; (8001c48 <_sbrk+0x64>)
 8001c34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c36:	68fb      	ldr	r3, [r7, #12]
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3718      	adds	r7, #24
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	20020000 	.word	0x20020000
 8001c44:	00000400 	.word	0x00000400
 8001c48:	200003ec 	.word	0x200003ec
 8001c4c:	20002010 	.word	0x20002010

08001c50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c54:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <SystemInit+0x20>)
 8001c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c5a:	4a05      	ldr	r2, [pc, #20]	; (8001c70 <SystemInit+0x20>)
 8001c5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c64:	bf00      	nop
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	e000ed00 	.word	0xe000ed00

08001c74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c78:	480d      	ldr	r0, [pc, #52]	; (8001cb0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c7a:	490e      	ldr	r1, [pc, #56]	; (8001cb4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c7c:	4a0e      	ldr	r2, [pc, #56]	; (8001cb8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c80:	e002      	b.n	8001c88 <LoopCopyDataInit>

08001c82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c86:	3304      	adds	r3, #4

08001c88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c8c:	d3f9      	bcc.n	8001c82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c8e:	4a0b      	ldr	r2, [pc, #44]	; (8001cbc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c90:	4c0b      	ldr	r4, [pc, #44]	; (8001cc0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c94:	e001      	b.n	8001c9a <LoopFillZerobss>

08001c96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c98:	3204      	adds	r2, #4

08001c9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c9c:	d3fb      	bcc.n	8001c96 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c9e:	f7ff ffd7 	bl	8001c50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ca2:	f007 fb1d 	bl	80092e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ca6:	f7ff fba7 	bl	80013f8 <main>
  bx  lr    
 8001caa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001cac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001cb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cb4:	200002cc 	.word	0x200002cc
  ldr r2, =_sidata
 8001cb8:	0800dc24 	.word	0x0800dc24
  ldr r2, =_sbss
 8001cbc:	200002cc 	.word	0x200002cc
  ldr r4, =_ebss
 8001cc0:	20002010 	.word	0x20002010

08001cc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cc4:	e7fe      	b.n	8001cc4 <ADC_IRQHandler>
	...

08001cc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ccc:	4b0e      	ldr	r3, [pc, #56]	; (8001d08 <HAL_Init+0x40>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a0d      	ldr	r2, [pc, #52]	; (8001d08 <HAL_Init+0x40>)
 8001cd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cd6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cd8:	4b0b      	ldr	r3, [pc, #44]	; (8001d08 <HAL_Init+0x40>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a0a      	ldr	r2, [pc, #40]	; (8001d08 <HAL_Init+0x40>)
 8001cde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ce2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ce4:	4b08      	ldr	r3, [pc, #32]	; (8001d08 <HAL_Init+0x40>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a07      	ldr	r2, [pc, #28]	; (8001d08 <HAL_Init+0x40>)
 8001cea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cf0:	2003      	movs	r0, #3
 8001cf2:	f000 f94f 	bl	8001f94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cf6:	200f      	movs	r0, #15
 8001cf8:	f000 f808 	bl	8001d0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cfc:	f7ff fe30 	bl	8001960 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40023c00 	.word	0x40023c00

08001d0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d14:	4b12      	ldr	r3, [pc, #72]	; (8001d60 <HAL_InitTick+0x54>)
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	4b12      	ldr	r3, [pc, #72]	; (8001d64 <HAL_InitTick+0x58>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d22:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f000 f967 	bl	8001ffe <HAL_SYSTICK_Config>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e00e      	b.n	8001d58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2b0f      	cmp	r3, #15
 8001d3e:	d80a      	bhi.n	8001d56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d40:	2200      	movs	r2, #0
 8001d42:	6879      	ldr	r1, [r7, #4]
 8001d44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d48:	f000 f92f 	bl	8001faa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d4c:	4a06      	ldr	r2, [pc, #24]	; (8001d68 <HAL_InitTick+0x5c>)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d52:	2300      	movs	r3, #0
 8001d54:	e000      	b.n	8001d58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3708      	adds	r7, #8
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	20000000 	.word	0x20000000
 8001d64:	20000008 	.word	0x20000008
 8001d68:	20000004 	.word	0x20000004

08001d6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d70:	4b06      	ldr	r3, [pc, #24]	; (8001d8c <HAL_IncTick+0x20>)
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	461a      	mov	r2, r3
 8001d76:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <HAL_IncTick+0x24>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	4a04      	ldr	r2, [pc, #16]	; (8001d90 <HAL_IncTick+0x24>)
 8001d7e:	6013      	str	r3, [r2, #0]
}
 8001d80:	bf00      	nop
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	20000008 	.word	0x20000008
 8001d90:	200003f0 	.word	0x200003f0

08001d94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  return uwTick;
 8001d98:	4b03      	ldr	r3, [pc, #12]	; (8001da8 <HAL_GetTick+0x14>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	200003f0 	.word	0x200003f0

08001dac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001db4:	f7ff ffee 	bl	8001d94 <HAL_GetTick>
 8001db8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001dc4:	d005      	beq.n	8001dd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dc6:	4b0a      	ldr	r3, [pc, #40]	; (8001df0 <HAL_Delay+0x44>)
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	461a      	mov	r2, r3
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	4413      	add	r3, r2
 8001dd0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001dd2:	bf00      	nop
 8001dd4:	f7ff ffde 	bl	8001d94 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	68fa      	ldr	r2, [r7, #12]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d8f7      	bhi.n	8001dd4 <HAL_Delay+0x28>
  {
  }
}
 8001de4:	bf00      	nop
 8001de6:	bf00      	nop
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20000008 	.word	0x20000008

08001df4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e04:	4b0c      	ldr	r3, [pc, #48]	; (8001e38 <__NVIC_SetPriorityGrouping+0x44>)
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e0a:	68ba      	ldr	r2, [r7, #8]
 8001e0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e10:	4013      	ands	r3, r2
 8001e12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e26:	4a04      	ldr	r2, [pc, #16]	; (8001e38 <__NVIC_SetPriorityGrouping+0x44>)
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	60d3      	str	r3, [r2, #12]
}
 8001e2c:	bf00      	nop
 8001e2e:	3714      	adds	r7, #20
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	e000ed00 	.word	0xe000ed00

08001e3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e40:	4b04      	ldr	r3, [pc, #16]	; (8001e54 <__NVIC_GetPriorityGrouping+0x18>)
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	0a1b      	lsrs	r3, r3, #8
 8001e46:	f003 0307 	and.w	r3, r3, #7
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr
 8001e54:	e000ed00 	.word	0xe000ed00

08001e58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	4603      	mov	r3, r0
 8001e60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	db0b      	blt.n	8001e82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e6a:	79fb      	ldrb	r3, [r7, #7]
 8001e6c:	f003 021f 	and.w	r2, r3, #31
 8001e70:	4907      	ldr	r1, [pc, #28]	; (8001e90 <__NVIC_EnableIRQ+0x38>)
 8001e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e76:	095b      	lsrs	r3, r3, #5
 8001e78:	2001      	movs	r0, #1
 8001e7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e82:	bf00      	nop
 8001e84:	370c      	adds	r7, #12
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	e000e100 	.word	0xe000e100

08001e94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	6039      	str	r1, [r7, #0]
 8001e9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	db0a      	blt.n	8001ebe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	b2da      	uxtb	r2, r3
 8001eac:	490c      	ldr	r1, [pc, #48]	; (8001ee0 <__NVIC_SetPriority+0x4c>)
 8001eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb2:	0112      	lsls	r2, r2, #4
 8001eb4:	b2d2      	uxtb	r2, r2
 8001eb6:	440b      	add	r3, r1
 8001eb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ebc:	e00a      	b.n	8001ed4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	b2da      	uxtb	r2, r3
 8001ec2:	4908      	ldr	r1, [pc, #32]	; (8001ee4 <__NVIC_SetPriority+0x50>)
 8001ec4:	79fb      	ldrb	r3, [r7, #7]
 8001ec6:	f003 030f 	and.w	r3, r3, #15
 8001eca:	3b04      	subs	r3, #4
 8001ecc:	0112      	lsls	r2, r2, #4
 8001ece:	b2d2      	uxtb	r2, r2
 8001ed0:	440b      	add	r3, r1
 8001ed2:	761a      	strb	r2, [r3, #24]
}
 8001ed4:	bf00      	nop
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr
 8001ee0:	e000e100 	.word	0xe000e100
 8001ee4:	e000ed00 	.word	0xe000ed00

08001ee8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b089      	sub	sp, #36	; 0x24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f003 0307 	and.w	r3, r3, #7
 8001efa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	f1c3 0307 	rsb	r3, r3, #7
 8001f02:	2b04      	cmp	r3, #4
 8001f04:	bf28      	it	cs
 8001f06:	2304      	movcs	r3, #4
 8001f08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	3304      	adds	r3, #4
 8001f0e:	2b06      	cmp	r3, #6
 8001f10:	d902      	bls.n	8001f18 <NVIC_EncodePriority+0x30>
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	3b03      	subs	r3, #3
 8001f16:	e000      	b.n	8001f1a <NVIC_EncodePriority+0x32>
 8001f18:	2300      	movs	r3, #0
 8001f1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	fa02 f303 	lsl.w	r3, r2, r3
 8001f26:	43da      	mvns	r2, r3
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	401a      	ands	r2, r3
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f30:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	fa01 f303 	lsl.w	r3, r1, r3
 8001f3a:	43d9      	mvns	r1, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f40:	4313      	orrs	r3, r2
         );
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3724      	adds	r7, #36	; 0x24
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
	...

08001f50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	3b01      	subs	r3, #1
 8001f5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f60:	d301      	bcc.n	8001f66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f62:	2301      	movs	r3, #1
 8001f64:	e00f      	b.n	8001f86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f66:	4a0a      	ldr	r2, [pc, #40]	; (8001f90 <SysTick_Config+0x40>)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	3b01      	subs	r3, #1
 8001f6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f6e:	210f      	movs	r1, #15
 8001f70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f74:	f7ff ff8e 	bl	8001e94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f78:	4b05      	ldr	r3, [pc, #20]	; (8001f90 <SysTick_Config+0x40>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f7e:	4b04      	ldr	r3, [pc, #16]	; (8001f90 <SysTick_Config+0x40>)
 8001f80:	2207      	movs	r2, #7
 8001f82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	e000e010 	.word	0xe000e010

08001f94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f7ff ff29 	bl	8001df4 <__NVIC_SetPriorityGrouping>
}
 8001fa2:	bf00      	nop
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b086      	sub	sp, #24
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	60b9      	str	r1, [r7, #8]
 8001fb4:	607a      	str	r2, [r7, #4]
 8001fb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fbc:	f7ff ff3e 	bl	8001e3c <__NVIC_GetPriorityGrouping>
 8001fc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	68b9      	ldr	r1, [r7, #8]
 8001fc6:	6978      	ldr	r0, [r7, #20]
 8001fc8:	f7ff ff8e 	bl	8001ee8 <NVIC_EncodePriority>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fd2:	4611      	mov	r1, r2
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7ff ff5d 	bl	8001e94 <__NVIC_SetPriority>
}
 8001fda:	bf00      	nop
 8001fdc:	3718      	adds	r7, #24
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b082      	sub	sp, #8
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	4603      	mov	r3, r0
 8001fea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7ff ff31 	bl	8001e58 <__NVIC_EnableIRQ>
}
 8001ff6:	bf00      	nop
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b082      	sub	sp, #8
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f7ff ffa2 	bl	8001f50 <SysTick_Config>
 800200c:	4603      	mov	r3, r0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
	...

08002018 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002018:	b480      	push	{r7}
 800201a:	b089      	sub	sp, #36	; 0x24
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002022:	2300      	movs	r3, #0
 8002024:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002026:	2300      	movs	r3, #0
 8002028:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800202a:	2300      	movs	r3, #0
 800202c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800202e:	2300      	movs	r3, #0
 8002030:	61fb      	str	r3, [r7, #28]
 8002032:	e159      	b.n	80022e8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002034:	2201      	movs	r2, #1
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	697a      	ldr	r2, [r7, #20]
 8002044:	4013      	ands	r3, r2
 8002046:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002048:	693a      	ldr	r2, [r7, #16]
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	429a      	cmp	r2, r3
 800204e:	f040 8148 	bne.w	80022e2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f003 0303 	and.w	r3, r3, #3
 800205a:	2b01      	cmp	r3, #1
 800205c:	d005      	beq.n	800206a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002066:	2b02      	cmp	r3, #2
 8002068:	d130      	bne.n	80020cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	2203      	movs	r2, #3
 8002076:	fa02 f303 	lsl.w	r3, r2, r3
 800207a:	43db      	mvns	r3, r3
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	4013      	ands	r3, r2
 8002080:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	68da      	ldr	r2, [r3, #12]
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	69ba      	ldr	r2, [r7, #24]
 8002090:	4313      	orrs	r3, r2
 8002092:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020a0:	2201      	movs	r2, #1
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	43db      	mvns	r3, r3
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4013      	ands	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	091b      	lsrs	r3, r3, #4
 80020b6:	f003 0201 	and.w	r2, r3, #1
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f003 0303 	and.w	r3, r3, #3
 80020d4:	2b03      	cmp	r3, #3
 80020d6:	d017      	beq.n	8002108 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	2203      	movs	r2, #3
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	43db      	mvns	r3, r3
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	4013      	ands	r3, r2
 80020ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	689a      	ldr	r2, [r3, #8]
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	4313      	orrs	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f003 0303 	and.w	r3, r3, #3
 8002110:	2b02      	cmp	r3, #2
 8002112:	d123      	bne.n	800215c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	08da      	lsrs	r2, r3, #3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	3208      	adds	r2, #8
 800211c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002120:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	f003 0307 	and.w	r3, r3, #7
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	220f      	movs	r2, #15
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	43db      	mvns	r3, r3
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	4013      	ands	r3, r2
 8002136:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	691a      	ldr	r2, [r3, #16]
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	f003 0307 	and.w	r3, r3, #7
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	4313      	orrs	r3, r2
 800214c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	08da      	lsrs	r2, r3, #3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	3208      	adds	r2, #8
 8002156:	69b9      	ldr	r1, [r7, #24]
 8002158:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	2203      	movs	r2, #3
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	43db      	mvns	r3, r3
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	4013      	ands	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f003 0203 	and.w	r2, r3, #3
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	4313      	orrs	r3, r2
 8002188:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002198:	2b00      	cmp	r3, #0
 800219a:	f000 80a2 	beq.w	80022e2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800219e:	2300      	movs	r3, #0
 80021a0:	60fb      	str	r3, [r7, #12]
 80021a2:	4b57      	ldr	r3, [pc, #348]	; (8002300 <HAL_GPIO_Init+0x2e8>)
 80021a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a6:	4a56      	ldr	r2, [pc, #344]	; (8002300 <HAL_GPIO_Init+0x2e8>)
 80021a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021ac:	6453      	str	r3, [r2, #68]	; 0x44
 80021ae:	4b54      	ldr	r3, [pc, #336]	; (8002300 <HAL_GPIO_Init+0x2e8>)
 80021b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021b6:	60fb      	str	r3, [r7, #12]
 80021b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021ba:	4a52      	ldr	r2, [pc, #328]	; (8002304 <HAL_GPIO_Init+0x2ec>)
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	089b      	lsrs	r3, r3, #2
 80021c0:	3302      	adds	r3, #2
 80021c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	f003 0303 	and.w	r3, r3, #3
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	220f      	movs	r2, #15
 80021d2:	fa02 f303 	lsl.w	r3, r2, r3
 80021d6:	43db      	mvns	r3, r3
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	4013      	ands	r3, r2
 80021dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a49      	ldr	r2, [pc, #292]	; (8002308 <HAL_GPIO_Init+0x2f0>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d019      	beq.n	800221a <HAL_GPIO_Init+0x202>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a48      	ldr	r2, [pc, #288]	; (800230c <HAL_GPIO_Init+0x2f4>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d013      	beq.n	8002216 <HAL_GPIO_Init+0x1fe>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a47      	ldr	r2, [pc, #284]	; (8002310 <HAL_GPIO_Init+0x2f8>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d00d      	beq.n	8002212 <HAL_GPIO_Init+0x1fa>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a46      	ldr	r2, [pc, #280]	; (8002314 <HAL_GPIO_Init+0x2fc>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d007      	beq.n	800220e <HAL_GPIO_Init+0x1f6>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a45      	ldr	r2, [pc, #276]	; (8002318 <HAL_GPIO_Init+0x300>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d101      	bne.n	800220a <HAL_GPIO_Init+0x1f2>
 8002206:	2304      	movs	r3, #4
 8002208:	e008      	b.n	800221c <HAL_GPIO_Init+0x204>
 800220a:	2307      	movs	r3, #7
 800220c:	e006      	b.n	800221c <HAL_GPIO_Init+0x204>
 800220e:	2303      	movs	r3, #3
 8002210:	e004      	b.n	800221c <HAL_GPIO_Init+0x204>
 8002212:	2302      	movs	r3, #2
 8002214:	e002      	b.n	800221c <HAL_GPIO_Init+0x204>
 8002216:	2301      	movs	r3, #1
 8002218:	e000      	b.n	800221c <HAL_GPIO_Init+0x204>
 800221a:	2300      	movs	r3, #0
 800221c:	69fa      	ldr	r2, [r7, #28]
 800221e:	f002 0203 	and.w	r2, r2, #3
 8002222:	0092      	lsls	r2, r2, #2
 8002224:	4093      	lsls	r3, r2
 8002226:	69ba      	ldr	r2, [r7, #24]
 8002228:	4313      	orrs	r3, r2
 800222a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800222c:	4935      	ldr	r1, [pc, #212]	; (8002304 <HAL_GPIO_Init+0x2ec>)
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	089b      	lsrs	r3, r3, #2
 8002232:	3302      	adds	r3, #2
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800223a:	4b38      	ldr	r3, [pc, #224]	; (800231c <HAL_GPIO_Init+0x304>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	43db      	mvns	r3, r3
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4013      	ands	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d003      	beq.n	800225e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	4313      	orrs	r3, r2
 800225c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800225e:	4a2f      	ldr	r2, [pc, #188]	; (800231c <HAL_GPIO_Init+0x304>)
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002264:	4b2d      	ldr	r3, [pc, #180]	; (800231c <HAL_GPIO_Init+0x304>)
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	43db      	mvns	r3, r3
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	4013      	ands	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d003      	beq.n	8002288 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	4313      	orrs	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002288:	4a24      	ldr	r2, [pc, #144]	; (800231c <HAL_GPIO_Init+0x304>)
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800228e:	4b23      	ldr	r3, [pc, #140]	; (800231c <HAL_GPIO_Init+0x304>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	43db      	mvns	r3, r3
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	4013      	ands	r3, r2
 800229c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d003      	beq.n	80022b2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022b2:	4a1a      	ldr	r2, [pc, #104]	; (800231c <HAL_GPIO_Init+0x304>)
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022b8:	4b18      	ldr	r3, [pc, #96]	; (800231c <HAL_GPIO_Init+0x304>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	43db      	mvns	r3, r3
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	4013      	ands	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d003      	beq.n	80022dc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	4313      	orrs	r3, r2
 80022da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022dc:	4a0f      	ldr	r2, [pc, #60]	; (800231c <HAL_GPIO_Init+0x304>)
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	3301      	adds	r3, #1
 80022e6:	61fb      	str	r3, [r7, #28]
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	2b0f      	cmp	r3, #15
 80022ec:	f67f aea2 	bls.w	8002034 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022f0:	bf00      	nop
 80022f2:	bf00      	nop
 80022f4:	3724      	adds	r7, #36	; 0x24
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	40023800 	.word	0x40023800
 8002304:	40013800 	.word	0x40013800
 8002308:	40020000 	.word	0x40020000
 800230c:	40020400 	.word	0x40020400
 8002310:	40020800 	.word	0x40020800
 8002314:	40020c00 	.word	0x40020c00
 8002318:	40021000 	.word	0x40021000
 800231c:	40013c00 	.word	0x40013c00

08002320 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	460b      	mov	r3, r1
 800232a:	807b      	strh	r3, [r7, #2]
 800232c:	4613      	mov	r3, r2
 800232e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002330:	787b      	ldrb	r3, [r7, #1]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d003      	beq.n	800233e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002336:	887a      	ldrh	r2, [r7, #2]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800233c:	e003      	b.n	8002346 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800233e:	887b      	ldrh	r3, [r7, #2]
 8002340:	041a      	lsls	r2, r3, #16
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	619a      	str	r2, [r3, #24]
}
 8002346:	bf00      	nop
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr

08002352 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002352:	b480      	push	{r7}
 8002354:	b085      	sub	sp, #20
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
 800235a:	460b      	mov	r3, r1
 800235c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	695b      	ldr	r3, [r3, #20]
 8002362:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002364:	887a      	ldrh	r2, [r7, #2]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	4013      	ands	r3, r2
 800236a:	041a      	lsls	r2, r3, #16
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	43d9      	mvns	r1, r3
 8002370:	887b      	ldrh	r3, [r7, #2]
 8002372:	400b      	ands	r3, r1
 8002374:	431a      	orrs	r2, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	619a      	str	r2, [r3, #24]
}
 800237a:	bf00      	nop
 800237c:	3714      	adds	r7, #20
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
	...

08002388 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d101      	bne.n	800239a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e12b      	b.n	80025f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d106      	bne.n	80023b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f7ff fafe 	bl	80019b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2224      	movs	r2, #36	; 0x24
 80023b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f022 0201 	bic.w	r2, r2, #1
 80023ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80023ec:	f002 fe38 	bl	8005060 <HAL_RCC_GetPCLK1Freq>
 80023f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	4a81      	ldr	r2, [pc, #516]	; (80025fc <HAL_I2C_Init+0x274>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d807      	bhi.n	800240c <HAL_I2C_Init+0x84>
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	4a80      	ldr	r2, [pc, #512]	; (8002600 <HAL_I2C_Init+0x278>)
 8002400:	4293      	cmp	r3, r2
 8002402:	bf94      	ite	ls
 8002404:	2301      	movls	r3, #1
 8002406:	2300      	movhi	r3, #0
 8002408:	b2db      	uxtb	r3, r3
 800240a:	e006      	b.n	800241a <HAL_I2C_Init+0x92>
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	4a7d      	ldr	r2, [pc, #500]	; (8002604 <HAL_I2C_Init+0x27c>)
 8002410:	4293      	cmp	r3, r2
 8002412:	bf94      	ite	ls
 8002414:	2301      	movls	r3, #1
 8002416:	2300      	movhi	r3, #0
 8002418:	b2db      	uxtb	r3, r3
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e0e7      	b.n	80025f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	4a78      	ldr	r2, [pc, #480]	; (8002608 <HAL_I2C_Init+0x280>)
 8002426:	fba2 2303 	umull	r2, r3, r2, r3
 800242a:	0c9b      	lsrs	r3, r3, #18
 800242c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68ba      	ldr	r2, [r7, #8]
 800243e:	430a      	orrs	r2, r1
 8002440:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	6a1b      	ldr	r3, [r3, #32]
 8002448:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	4a6a      	ldr	r2, [pc, #424]	; (80025fc <HAL_I2C_Init+0x274>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d802      	bhi.n	800245c <HAL_I2C_Init+0xd4>
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	3301      	adds	r3, #1
 800245a:	e009      	b.n	8002470 <HAL_I2C_Init+0xe8>
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002462:	fb02 f303 	mul.w	r3, r2, r3
 8002466:	4a69      	ldr	r2, [pc, #420]	; (800260c <HAL_I2C_Init+0x284>)
 8002468:	fba2 2303 	umull	r2, r3, r2, r3
 800246c:	099b      	lsrs	r3, r3, #6
 800246e:	3301      	adds	r3, #1
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	6812      	ldr	r2, [r2, #0]
 8002474:	430b      	orrs	r3, r1
 8002476:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	69db      	ldr	r3, [r3, #28]
 800247e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002482:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	495c      	ldr	r1, [pc, #368]	; (80025fc <HAL_I2C_Init+0x274>)
 800248c:	428b      	cmp	r3, r1
 800248e:	d819      	bhi.n	80024c4 <HAL_I2C_Init+0x13c>
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	1e59      	subs	r1, r3, #1
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	fbb1 f3f3 	udiv	r3, r1, r3
 800249e:	1c59      	adds	r1, r3, #1
 80024a0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80024a4:	400b      	ands	r3, r1
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d00a      	beq.n	80024c0 <HAL_I2C_Init+0x138>
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	1e59      	subs	r1, r3, #1
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80024b8:	3301      	adds	r3, #1
 80024ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024be:	e051      	b.n	8002564 <HAL_I2C_Init+0x1dc>
 80024c0:	2304      	movs	r3, #4
 80024c2:	e04f      	b.n	8002564 <HAL_I2C_Init+0x1dc>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d111      	bne.n	80024f0 <HAL_I2C_Init+0x168>
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	1e58      	subs	r0, r3, #1
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6859      	ldr	r1, [r3, #4]
 80024d4:	460b      	mov	r3, r1
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	440b      	add	r3, r1
 80024da:	fbb0 f3f3 	udiv	r3, r0, r3
 80024de:	3301      	adds	r3, #1
 80024e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	bf0c      	ite	eq
 80024e8:	2301      	moveq	r3, #1
 80024ea:	2300      	movne	r3, #0
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	e012      	b.n	8002516 <HAL_I2C_Init+0x18e>
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	1e58      	subs	r0, r3, #1
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6859      	ldr	r1, [r3, #4]
 80024f8:	460b      	mov	r3, r1
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	440b      	add	r3, r1
 80024fe:	0099      	lsls	r1, r3, #2
 8002500:	440b      	add	r3, r1
 8002502:	fbb0 f3f3 	udiv	r3, r0, r3
 8002506:	3301      	adds	r3, #1
 8002508:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800250c:	2b00      	cmp	r3, #0
 800250e:	bf0c      	ite	eq
 8002510:	2301      	moveq	r3, #1
 8002512:	2300      	movne	r3, #0
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <HAL_I2C_Init+0x196>
 800251a:	2301      	movs	r3, #1
 800251c:	e022      	b.n	8002564 <HAL_I2C_Init+0x1dc>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d10e      	bne.n	8002544 <HAL_I2C_Init+0x1bc>
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	1e58      	subs	r0, r3, #1
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6859      	ldr	r1, [r3, #4]
 800252e:	460b      	mov	r3, r1
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	440b      	add	r3, r1
 8002534:	fbb0 f3f3 	udiv	r3, r0, r3
 8002538:	3301      	adds	r3, #1
 800253a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800253e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002542:	e00f      	b.n	8002564 <HAL_I2C_Init+0x1dc>
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	1e58      	subs	r0, r3, #1
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6859      	ldr	r1, [r3, #4]
 800254c:	460b      	mov	r3, r1
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	440b      	add	r3, r1
 8002552:	0099      	lsls	r1, r3, #2
 8002554:	440b      	add	r3, r1
 8002556:	fbb0 f3f3 	udiv	r3, r0, r3
 800255a:	3301      	adds	r3, #1
 800255c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002560:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002564:	6879      	ldr	r1, [r7, #4]
 8002566:	6809      	ldr	r1, [r1, #0]
 8002568:	4313      	orrs	r3, r2
 800256a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	69da      	ldr	r2, [r3, #28]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a1b      	ldr	r3, [r3, #32]
 800257e:	431a      	orrs	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	430a      	orrs	r2, r1
 8002586:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002592:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	6911      	ldr	r1, [r2, #16]
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	68d2      	ldr	r2, [r2, #12]
 800259e:	4311      	orrs	r1, r2
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	6812      	ldr	r2, [r2, #0]
 80025a4:	430b      	orrs	r3, r1
 80025a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	695a      	ldr	r2, [r3, #20]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	699b      	ldr	r3, [r3, #24]
 80025ba:	431a      	orrs	r2, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	430a      	orrs	r2, r1
 80025c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f042 0201 	orr.w	r2, r2, #1
 80025d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2220      	movs	r2, #32
 80025de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3710      	adds	r7, #16
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	000186a0 	.word	0x000186a0
 8002600:	001e847f 	.word	0x001e847f
 8002604:	003d08ff 	.word	0x003d08ff
 8002608:	431bde83 	.word	0x431bde83
 800260c:	10624dd3 	.word	0x10624dd3

08002610 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b088      	sub	sp, #32
 8002614:	af02      	add	r7, sp, #8
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	4608      	mov	r0, r1
 800261a:	4611      	mov	r1, r2
 800261c:	461a      	mov	r2, r3
 800261e:	4603      	mov	r3, r0
 8002620:	817b      	strh	r3, [r7, #10]
 8002622:	460b      	mov	r3, r1
 8002624:	813b      	strh	r3, [r7, #8]
 8002626:	4613      	mov	r3, r2
 8002628:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800262a:	f7ff fbb3 	bl	8001d94 <HAL_GetTick>
 800262e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002636:	b2db      	uxtb	r3, r3
 8002638:	2b20      	cmp	r3, #32
 800263a:	f040 80d9 	bne.w	80027f0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	9300      	str	r3, [sp, #0]
 8002642:	2319      	movs	r3, #25
 8002644:	2201      	movs	r2, #1
 8002646:	496d      	ldr	r1, [pc, #436]	; (80027fc <HAL_I2C_Mem_Write+0x1ec>)
 8002648:	68f8      	ldr	r0, [r7, #12]
 800264a:	f000 fc7f 	bl	8002f4c <I2C_WaitOnFlagUntilTimeout>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d001      	beq.n	8002658 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002654:	2302      	movs	r3, #2
 8002656:	e0cc      	b.n	80027f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800265e:	2b01      	cmp	r3, #1
 8002660:	d101      	bne.n	8002666 <HAL_I2C_Mem_Write+0x56>
 8002662:	2302      	movs	r3, #2
 8002664:	e0c5      	b.n	80027f2 <HAL_I2C_Mem_Write+0x1e2>
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2201      	movs	r2, #1
 800266a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0301 	and.w	r3, r3, #1
 8002678:	2b01      	cmp	r3, #1
 800267a:	d007      	beq.n	800268c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f042 0201 	orr.w	r2, r2, #1
 800268a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800269a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2221      	movs	r2, #33	; 0x21
 80026a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2240      	movs	r2, #64	; 0x40
 80026a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2200      	movs	r2, #0
 80026b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6a3a      	ldr	r2, [r7, #32]
 80026b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80026bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026c2:	b29a      	uxth	r2, r3
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	4a4d      	ldr	r2, [pc, #308]	; (8002800 <HAL_I2C_Mem_Write+0x1f0>)
 80026cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026ce:	88f8      	ldrh	r0, [r7, #6]
 80026d0:	893a      	ldrh	r2, [r7, #8]
 80026d2:	8979      	ldrh	r1, [r7, #10]
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	9301      	str	r3, [sp, #4]
 80026d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026da:	9300      	str	r3, [sp, #0]
 80026dc:	4603      	mov	r3, r0
 80026de:	68f8      	ldr	r0, [r7, #12]
 80026e0:	f000 fab6 	bl	8002c50 <I2C_RequestMemoryWrite>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d052      	beq.n	8002790 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e081      	b.n	80027f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026ee:	697a      	ldr	r2, [r7, #20]
 80026f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80026f2:	68f8      	ldr	r0, [r7, #12]
 80026f4:	f000 fd00 	bl	80030f8 <I2C_WaitOnTXEFlagUntilTimeout>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d00d      	beq.n	800271a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002702:	2b04      	cmp	r3, #4
 8002704:	d107      	bne.n	8002716 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002714:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e06b      	b.n	80027f2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271e:	781a      	ldrb	r2, [r3, #0]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272a:	1c5a      	adds	r2, r3, #1
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002734:	3b01      	subs	r3, #1
 8002736:	b29a      	uxth	r2, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002740:	b29b      	uxth	r3, r3
 8002742:	3b01      	subs	r3, #1
 8002744:	b29a      	uxth	r2, r3
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	695b      	ldr	r3, [r3, #20]
 8002750:	f003 0304 	and.w	r3, r3, #4
 8002754:	2b04      	cmp	r3, #4
 8002756:	d11b      	bne.n	8002790 <HAL_I2C_Mem_Write+0x180>
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800275c:	2b00      	cmp	r3, #0
 800275e:	d017      	beq.n	8002790 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002764:	781a      	ldrb	r2, [r3, #0]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002770:	1c5a      	adds	r2, r3, #1
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800277a:	3b01      	subs	r3, #1
 800277c:	b29a      	uxth	r2, r3
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002786:	b29b      	uxth	r3, r3
 8002788:	3b01      	subs	r3, #1
 800278a:	b29a      	uxth	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002794:	2b00      	cmp	r3, #0
 8002796:	d1aa      	bne.n	80026ee <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002798:	697a      	ldr	r2, [r7, #20]
 800279a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800279c:	68f8      	ldr	r0, [r7, #12]
 800279e:	f000 fcec 	bl	800317a <I2C_WaitOnBTFFlagUntilTimeout>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d00d      	beq.n	80027c4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ac:	2b04      	cmp	r3, #4
 80027ae:	d107      	bne.n	80027c0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027be:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e016      	b.n	80027f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2220      	movs	r2, #32
 80027d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80027ec:	2300      	movs	r3, #0
 80027ee:	e000      	b.n	80027f2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80027f0:	2302      	movs	r3, #2
  }
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3718      	adds	r7, #24
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	00100002 	.word	0x00100002
 8002800:	ffff0000 	.word	0xffff0000

08002804 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b08c      	sub	sp, #48	; 0x30
 8002808:	af02      	add	r7, sp, #8
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	4608      	mov	r0, r1
 800280e:	4611      	mov	r1, r2
 8002810:	461a      	mov	r2, r3
 8002812:	4603      	mov	r3, r0
 8002814:	817b      	strh	r3, [r7, #10]
 8002816:	460b      	mov	r3, r1
 8002818:	813b      	strh	r3, [r7, #8]
 800281a:	4613      	mov	r3, r2
 800281c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800281e:	f7ff fab9 	bl	8001d94 <HAL_GetTick>
 8002822:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800282a:	b2db      	uxtb	r3, r3
 800282c:	2b20      	cmp	r3, #32
 800282e:	f040 8208 	bne.w	8002c42 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002834:	9300      	str	r3, [sp, #0]
 8002836:	2319      	movs	r3, #25
 8002838:	2201      	movs	r2, #1
 800283a:	497b      	ldr	r1, [pc, #492]	; (8002a28 <HAL_I2C_Mem_Read+0x224>)
 800283c:	68f8      	ldr	r0, [r7, #12]
 800283e:	f000 fb85 	bl	8002f4c <I2C_WaitOnFlagUntilTimeout>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002848:	2302      	movs	r3, #2
 800284a:	e1fb      	b.n	8002c44 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002852:	2b01      	cmp	r3, #1
 8002854:	d101      	bne.n	800285a <HAL_I2C_Mem_Read+0x56>
 8002856:	2302      	movs	r3, #2
 8002858:	e1f4      	b.n	8002c44 <HAL_I2C_Mem_Read+0x440>
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2201      	movs	r2, #1
 800285e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0301 	and.w	r3, r3, #1
 800286c:	2b01      	cmp	r3, #1
 800286e:	d007      	beq.n	8002880 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f042 0201 	orr.w	r2, r2, #1
 800287e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800288e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2222      	movs	r2, #34	; 0x22
 8002894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2240      	movs	r2, #64	; 0x40
 800289c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80028b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b6:	b29a      	uxth	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	4a5b      	ldr	r2, [pc, #364]	; (8002a2c <HAL_I2C_Mem_Read+0x228>)
 80028c0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028c2:	88f8      	ldrh	r0, [r7, #6]
 80028c4:	893a      	ldrh	r2, [r7, #8]
 80028c6:	8979      	ldrh	r1, [r7, #10]
 80028c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ca:	9301      	str	r3, [sp, #4]
 80028cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ce:	9300      	str	r3, [sp, #0]
 80028d0:	4603      	mov	r3, r0
 80028d2:	68f8      	ldr	r0, [r7, #12]
 80028d4:	f000 fa52 	bl	8002d7c <I2C_RequestMemoryRead>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e1b0      	b.n	8002c44 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d113      	bne.n	8002912 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028ea:	2300      	movs	r3, #0
 80028ec:	623b      	str	r3, [r7, #32]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	695b      	ldr	r3, [r3, #20]
 80028f4:	623b      	str	r3, [r7, #32]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	623b      	str	r3, [r7, #32]
 80028fe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800290e:	601a      	str	r2, [r3, #0]
 8002910:	e184      	b.n	8002c1c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002916:	2b01      	cmp	r3, #1
 8002918:	d11b      	bne.n	8002952 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002928:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800292a:	2300      	movs	r3, #0
 800292c:	61fb      	str	r3, [r7, #28]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	695b      	ldr	r3, [r3, #20]
 8002934:	61fb      	str	r3, [r7, #28]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	61fb      	str	r3, [r7, #28]
 800293e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800294e:	601a      	str	r2, [r3, #0]
 8002950:	e164      	b.n	8002c1c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002956:	2b02      	cmp	r3, #2
 8002958:	d11b      	bne.n	8002992 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002968:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002978:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800297a:	2300      	movs	r3, #0
 800297c:	61bb      	str	r3, [r7, #24]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	695b      	ldr	r3, [r3, #20]
 8002984:	61bb      	str	r3, [r7, #24]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	61bb      	str	r3, [r7, #24]
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	e144      	b.n	8002c1c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002992:	2300      	movs	r3, #0
 8002994:	617b      	str	r3, [r7, #20]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	695b      	ldr	r3, [r3, #20]
 800299c:	617b      	str	r3, [r7, #20]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	617b      	str	r3, [r7, #20]
 80029a6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80029a8:	e138      	b.n	8002c1c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ae:	2b03      	cmp	r3, #3
 80029b0:	f200 80f1 	bhi.w	8002b96 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d123      	bne.n	8002a04 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80029c0:	68f8      	ldr	r0, [r7, #12]
 80029c2:	f000 fc1b 	bl	80031fc <I2C_WaitOnRXNEFlagUntilTimeout>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d001      	beq.n	80029d0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e139      	b.n	8002c44 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	691a      	ldr	r2, [r3, #16]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029da:	b2d2      	uxtb	r2, r2
 80029dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e2:	1c5a      	adds	r2, r3, #1
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ec:	3b01      	subs	r3, #1
 80029ee:	b29a      	uxth	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	3b01      	subs	r3, #1
 80029fc:	b29a      	uxth	r2, r3
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a02:	e10b      	b.n	8002c1c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d14e      	bne.n	8002aaa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0e:	9300      	str	r3, [sp, #0]
 8002a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a12:	2200      	movs	r2, #0
 8002a14:	4906      	ldr	r1, [pc, #24]	; (8002a30 <HAL_I2C_Mem_Read+0x22c>)
 8002a16:	68f8      	ldr	r0, [r7, #12]
 8002a18:	f000 fa98 	bl	8002f4c <I2C_WaitOnFlagUntilTimeout>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d008      	beq.n	8002a34 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e10e      	b.n	8002c44 <HAL_I2C_Mem_Read+0x440>
 8002a26:	bf00      	nop
 8002a28:	00100002 	.word	0x00100002
 8002a2c:	ffff0000 	.word	0xffff0000
 8002a30:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	691a      	ldr	r2, [r3, #16]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4e:	b2d2      	uxtb	r2, r2
 8002a50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a56:	1c5a      	adds	r2, r3, #1
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a60:	3b01      	subs	r3, #1
 8002a62:	b29a      	uxth	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	b29a      	uxth	r2, r3
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	691a      	ldr	r2, [r3, #16]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a80:	b2d2      	uxtb	r2, r2
 8002a82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a88:	1c5a      	adds	r2, r3, #1
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a92:	3b01      	subs	r3, #1
 8002a94:	b29a      	uxth	r2, r3
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	b29a      	uxth	r2, r3
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002aa8:	e0b8      	b.n	8002c1c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aac:	9300      	str	r3, [sp, #0]
 8002aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	4966      	ldr	r1, [pc, #408]	; (8002c4c <HAL_I2C_Mem_Read+0x448>)
 8002ab4:	68f8      	ldr	r0, [r7, #12]
 8002ab6:	f000 fa49 	bl	8002f4c <I2C_WaitOnFlagUntilTimeout>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d001      	beq.n	8002ac4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e0bf      	b.n	8002c44 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ad2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	691a      	ldr	r2, [r3, #16]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ade:	b2d2      	uxtb	r2, r2
 8002ae0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae6:	1c5a      	adds	r2, r3, #1
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002af0:	3b01      	subs	r3, #1
 8002af2:	b29a      	uxth	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	3b01      	subs	r3, #1
 8002b00:	b29a      	uxth	r2, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b08:	9300      	str	r3, [sp, #0]
 8002b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	494f      	ldr	r1, [pc, #316]	; (8002c4c <HAL_I2C_Mem_Read+0x448>)
 8002b10:	68f8      	ldr	r0, [r7, #12]
 8002b12:	f000 fa1b 	bl	8002f4c <I2C_WaitOnFlagUntilTimeout>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d001      	beq.n	8002b20 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e091      	b.n	8002c44 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	691a      	ldr	r2, [r3, #16]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3a:	b2d2      	uxtb	r2, r2
 8002b3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b42:	1c5a      	adds	r2, r3, #1
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b4c:	3b01      	subs	r3, #1
 8002b4e:	b29a      	uxth	r2, r3
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	b29a      	uxth	r2, r3
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	691a      	ldr	r2, [r3, #16]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6c:	b2d2      	uxtb	r2, r2
 8002b6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b74:	1c5a      	adds	r2, r3, #1
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	b29a      	uxth	r2, r3
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	b29a      	uxth	r2, r3
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b94:	e042      	b.n	8002c1c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b98:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b9a:	68f8      	ldr	r0, [r7, #12]
 8002b9c:	f000 fb2e 	bl	80031fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e04c      	b.n	8002c44 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	691a      	ldr	r2, [r3, #16]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb4:	b2d2      	uxtb	r2, r2
 8002bb6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbc:	1c5a      	adds	r2, r3, #1
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	b29a      	uxth	r2, r3
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	3b01      	subs	r3, #1
 8002bd6:	b29a      	uxth	r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	695b      	ldr	r3, [r3, #20]
 8002be2:	f003 0304 	and.w	r3, r3, #4
 8002be6:	2b04      	cmp	r3, #4
 8002be8:	d118      	bne.n	8002c1c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	691a      	ldr	r2, [r3, #16]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf4:	b2d2      	uxtb	r2, r2
 8002bf6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfc:	1c5a      	adds	r2, r3, #1
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c06:	3b01      	subs	r3, #1
 8002c08:	b29a      	uxth	r2, r3
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	3b01      	subs	r3, #1
 8002c16:	b29a      	uxth	r2, r3
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	f47f aec2 	bne.w	80029aa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2220      	movs	r2, #32
 8002c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	e000      	b.n	8002c44 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002c42:	2302      	movs	r3, #2
  }
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3728      	adds	r7, #40	; 0x28
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	00010004 	.word	0x00010004

08002c50 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b088      	sub	sp, #32
 8002c54:	af02      	add	r7, sp, #8
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	4608      	mov	r0, r1
 8002c5a:	4611      	mov	r1, r2
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	4603      	mov	r3, r0
 8002c60:	817b      	strh	r3, [r7, #10]
 8002c62:	460b      	mov	r3, r1
 8002c64:	813b      	strh	r3, [r7, #8]
 8002c66:	4613      	mov	r3, r2
 8002c68:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c78:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7c:	9300      	str	r3, [sp, #0]
 8002c7e:	6a3b      	ldr	r3, [r7, #32]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c86:	68f8      	ldr	r0, [r7, #12]
 8002c88:	f000 f960 	bl	8002f4c <I2C_WaitOnFlagUntilTimeout>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d00d      	beq.n	8002cae <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ca0:	d103      	bne.n	8002caa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ca8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e05f      	b.n	8002d6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002cae:	897b      	ldrh	r3, [r7, #10]
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002cbc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc0:	6a3a      	ldr	r2, [r7, #32]
 8002cc2:	492d      	ldr	r1, [pc, #180]	; (8002d78 <I2C_RequestMemoryWrite+0x128>)
 8002cc4:	68f8      	ldr	r0, [r7, #12]
 8002cc6:	f000 f998 	bl	8002ffa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d001      	beq.n	8002cd4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e04c      	b.n	8002d6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	617b      	str	r3, [r7, #20]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	695b      	ldr	r3, [r3, #20]
 8002cde:	617b      	str	r3, [r7, #20]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	617b      	str	r3, [r7, #20]
 8002ce8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cec:	6a39      	ldr	r1, [r7, #32]
 8002cee:	68f8      	ldr	r0, [r7, #12]
 8002cf0:	f000 fa02 	bl	80030f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d00d      	beq.n	8002d16 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfe:	2b04      	cmp	r3, #4
 8002d00:	d107      	bne.n	8002d12 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d10:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e02b      	b.n	8002d6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d16:	88fb      	ldrh	r3, [r7, #6]
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d105      	bne.n	8002d28 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d1c:	893b      	ldrh	r3, [r7, #8]
 8002d1e:	b2da      	uxtb	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	611a      	str	r2, [r3, #16]
 8002d26:	e021      	b.n	8002d6c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002d28:	893b      	ldrh	r3, [r7, #8]
 8002d2a:	0a1b      	lsrs	r3, r3, #8
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	b2da      	uxtb	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d38:	6a39      	ldr	r1, [r7, #32]
 8002d3a:	68f8      	ldr	r0, [r7, #12]
 8002d3c:	f000 f9dc 	bl	80030f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d00d      	beq.n	8002d62 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4a:	2b04      	cmp	r3, #4
 8002d4c:	d107      	bne.n	8002d5e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d5c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e005      	b.n	8002d6e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d62:	893b      	ldrh	r3, [r7, #8]
 8002d64:	b2da      	uxtb	r2, r3
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3718      	adds	r7, #24
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	00010002 	.word	0x00010002

08002d7c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b088      	sub	sp, #32
 8002d80:	af02      	add	r7, sp, #8
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	4608      	mov	r0, r1
 8002d86:	4611      	mov	r1, r2
 8002d88:	461a      	mov	r2, r3
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	817b      	strh	r3, [r7, #10]
 8002d8e:	460b      	mov	r3, r1
 8002d90:	813b      	strh	r3, [r7, #8]
 8002d92:	4613      	mov	r3, r2
 8002d94:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002da4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002db4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db8:	9300      	str	r3, [sp, #0]
 8002dba:	6a3b      	ldr	r3, [r7, #32]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002dc2:	68f8      	ldr	r0, [r7, #12]
 8002dc4:	f000 f8c2 	bl	8002f4c <I2C_WaitOnFlagUntilTimeout>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d00d      	beq.n	8002dea <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ddc:	d103      	bne.n	8002de6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002de4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e0aa      	b.n	8002f40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002dea:	897b      	ldrh	r3, [r7, #10]
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	461a      	mov	r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002df8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfc:	6a3a      	ldr	r2, [r7, #32]
 8002dfe:	4952      	ldr	r1, [pc, #328]	; (8002f48 <I2C_RequestMemoryRead+0x1cc>)
 8002e00:	68f8      	ldr	r0, [r7, #12]
 8002e02:	f000 f8fa 	bl	8002ffa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d001      	beq.n	8002e10 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e097      	b.n	8002f40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e10:	2300      	movs	r3, #0
 8002e12:	617b      	str	r3, [r7, #20]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	617b      	str	r3, [r7, #20]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	699b      	ldr	r3, [r3, #24]
 8002e22:	617b      	str	r3, [r7, #20]
 8002e24:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e28:	6a39      	ldr	r1, [r7, #32]
 8002e2a:	68f8      	ldr	r0, [r7, #12]
 8002e2c:	f000 f964 	bl	80030f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d00d      	beq.n	8002e52 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3a:	2b04      	cmp	r3, #4
 8002e3c:	d107      	bne.n	8002e4e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e4c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e076      	b.n	8002f40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e52:	88fb      	ldrh	r3, [r7, #6]
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d105      	bne.n	8002e64 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e58:	893b      	ldrh	r3, [r7, #8]
 8002e5a:	b2da      	uxtb	r2, r3
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	611a      	str	r2, [r3, #16]
 8002e62:	e021      	b.n	8002ea8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002e64:	893b      	ldrh	r3, [r7, #8]
 8002e66:	0a1b      	lsrs	r3, r3, #8
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	b2da      	uxtb	r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e74:	6a39      	ldr	r1, [r7, #32]
 8002e76:	68f8      	ldr	r0, [r7, #12]
 8002e78:	f000 f93e 	bl	80030f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d00d      	beq.n	8002e9e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e86:	2b04      	cmp	r3, #4
 8002e88:	d107      	bne.n	8002e9a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e98:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e050      	b.n	8002f40 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e9e:	893b      	ldrh	r3, [r7, #8]
 8002ea0:	b2da      	uxtb	r2, r3
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eaa:	6a39      	ldr	r1, [r7, #32]
 8002eac:	68f8      	ldr	r0, [r7, #12]
 8002eae:	f000 f923 	bl	80030f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d00d      	beq.n	8002ed4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebc:	2b04      	cmp	r3, #4
 8002ebe:	d107      	bne.n	8002ed0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ece:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e035      	b.n	8002f40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ee2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee6:	9300      	str	r3, [sp, #0]
 8002ee8:	6a3b      	ldr	r3, [r7, #32]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ef0:	68f8      	ldr	r0, [r7, #12]
 8002ef2:	f000 f82b 	bl	8002f4c <I2C_WaitOnFlagUntilTimeout>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d00d      	beq.n	8002f18 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f0a:	d103      	bne.n	8002f14 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f12:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	e013      	b.n	8002f40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002f18:	897b      	ldrh	r3, [r7, #10]
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	f043 0301 	orr.w	r3, r3, #1
 8002f20:	b2da      	uxtb	r2, r3
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2a:	6a3a      	ldr	r2, [r7, #32]
 8002f2c:	4906      	ldr	r1, [pc, #24]	; (8002f48 <I2C_RequestMemoryRead+0x1cc>)
 8002f2e:	68f8      	ldr	r0, [r7, #12]
 8002f30:	f000 f863 	bl	8002ffa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d001      	beq.n	8002f3e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e000      	b.n	8002f40 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002f3e:	2300      	movs	r3, #0
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3718      	adds	r7, #24
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	00010002 	.word	0x00010002

08002f4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	603b      	str	r3, [r7, #0]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f5c:	e025      	b.n	8002faa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f64:	d021      	beq.n	8002faa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f66:	f7fe ff15 	bl	8001d94 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	683a      	ldr	r2, [r7, #0]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d302      	bcc.n	8002f7c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d116      	bne.n	8002faa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2220      	movs	r2, #32
 8002f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f96:	f043 0220 	orr.w	r2, r3, #32
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e023      	b.n	8002ff2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	0c1b      	lsrs	r3, r3, #16
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d10d      	bne.n	8002fd0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	43da      	mvns	r2, r3
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	bf0c      	ite	eq
 8002fc6:	2301      	moveq	r3, #1
 8002fc8:	2300      	movne	r3, #0
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	461a      	mov	r2, r3
 8002fce:	e00c      	b.n	8002fea <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	43da      	mvns	r2, r3
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	4013      	ands	r3, r2
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	bf0c      	ite	eq
 8002fe2:	2301      	moveq	r3, #1
 8002fe4:	2300      	movne	r3, #0
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	461a      	mov	r2, r3
 8002fea:	79fb      	ldrb	r3, [r7, #7]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d0b6      	beq.n	8002f5e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3710      	adds	r7, #16
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}

08002ffa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002ffa:	b580      	push	{r7, lr}
 8002ffc:	b084      	sub	sp, #16
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	60f8      	str	r0, [r7, #12]
 8003002:	60b9      	str	r1, [r7, #8]
 8003004:	607a      	str	r2, [r7, #4]
 8003006:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003008:	e051      	b.n	80030ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	695b      	ldr	r3, [r3, #20]
 8003010:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003014:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003018:	d123      	bne.n	8003062 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003028:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003032:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2200      	movs	r2, #0
 8003038:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2220      	movs	r2, #32
 800303e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304e:	f043 0204 	orr.w	r2, r3, #4
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e046      	b.n	80030f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003068:	d021      	beq.n	80030ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800306a:	f7fe fe93 	bl	8001d94 <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	429a      	cmp	r2, r3
 8003078:	d302      	bcc.n	8003080 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d116      	bne.n	80030ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2200      	movs	r2, #0
 8003084:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2220      	movs	r2, #32
 800308a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2200      	movs	r2, #0
 8003092:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309a:	f043 0220 	orr.w	r2, r3, #32
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e020      	b.n	80030f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	0c1b      	lsrs	r3, r3, #16
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d10c      	bne.n	80030d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	43da      	mvns	r2, r3
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	4013      	ands	r3, r2
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	bf14      	ite	ne
 80030ca:	2301      	movne	r3, #1
 80030cc:	2300      	moveq	r3, #0
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	e00b      	b.n	80030ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	43da      	mvns	r2, r3
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	4013      	ands	r3, r2
 80030de:	b29b      	uxth	r3, r3
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	bf14      	ite	ne
 80030e4:	2301      	movne	r3, #1
 80030e6:	2300      	moveq	r3, #0
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d18d      	bne.n	800300a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3710      	adds	r7, #16
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003104:	e02d      	b.n	8003162 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003106:	68f8      	ldr	r0, [r7, #12]
 8003108:	f000 f8ce 	bl	80032a8 <I2C_IsAcknowledgeFailed>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e02d      	b.n	8003172 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800311c:	d021      	beq.n	8003162 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800311e:	f7fe fe39 	bl	8001d94 <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	68ba      	ldr	r2, [r7, #8]
 800312a:	429a      	cmp	r2, r3
 800312c:	d302      	bcc.n	8003134 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d116      	bne.n	8003162 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2200      	movs	r2, #0
 8003138:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2220      	movs	r2, #32
 800313e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314e:	f043 0220 	orr.w	r2, r3, #32
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e007      	b.n	8003172 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	695b      	ldr	r3, [r3, #20]
 8003168:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800316c:	2b80      	cmp	r3, #128	; 0x80
 800316e:	d1ca      	bne.n	8003106 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3710      	adds	r7, #16
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}

0800317a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800317a:	b580      	push	{r7, lr}
 800317c:	b084      	sub	sp, #16
 800317e:	af00      	add	r7, sp, #0
 8003180:	60f8      	str	r0, [r7, #12]
 8003182:	60b9      	str	r1, [r7, #8]
 8003184:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003186:	e02d      	b.n	80031e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003188:	68f8      	ldr	r0, [r7, #12]
 800318a:	f000 f88d 	bl	80032a8 <I2C_IsAcknowledgeFailed>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d001      	beq.n	8003198 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e02d      	b.n	80031f4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800319e:	d021      	beq.n	80031e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031a0:	f7fe fdf8 	bl	8001d94 <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	68ba      	ldr	r2, [r7, #8]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d302      	bcc.n	80031b6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d116      	bne.n	80031e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2220      	movs	r2, #32
 80031c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d0:	f043 0220 	orr.w	r2, r3, #32
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e007      	b.n	80031f4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	695b      	ldr	r3, [r3, #20]
 80031ea:	f003 0304 	and.w	r3, r3, #4
 80031ee:	2b04      	cmp	r3, #4
 80031f0:	d1ca      	bne.n	8003188 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031f2:	2300      	movs	r3, #0
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3710      	adds	r7, #16
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}

080031fc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003208:	e042      	b.n	8003290 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	695b      	ldr	r3, [r3, #20]
 8003210:	f003 0310 	and.w	r3, r3, #16
 8003214:	2b10      	cmp	r3, #16
 8003216:	d119      	bne.n	800324c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f06f 0210 	mvn.w	r2, #16
 8003220:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2200      	movs	r2, #0
 8003226:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2220      	movs	r2, #32
 800322c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e029      	b.n	80032a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800324c:	f7fe fda2 	bl	8001d94 <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	68ba      	ldr	r2, [r7, #8]
 8003258:	429a      	cmp	r2, r3
 800325a:	d302      	bcc.n	8003262 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d116      	bne.n	8003290 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2200      	movs	r2, #0
 8003266:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2220      	movs	r2, #32
 800326c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327c:	f043 0220 	orr.w	r2, r3, #32
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e007      	b.n	80032a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800329a:	2b40      	cmp	r3, #64	; 0x40
 800329c:	d1b5      	bne.n	800320a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800329e:	2300      	movs	r3, #0
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3710      	adds	r7, #16
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	695b      	ldr	r3, [r3, #20]
 80032b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032be:	d11b      	bne.n	80032f8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032c8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2220      	movs	r2, #32
 80032d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e4:	f043 0204 	orr.w	r2, r3, #4
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e000      	b.n	80032fa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	370c      	adds	r7, #12
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr

08003306 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003306:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003308:	b08f      	sub	sp, #60	; 0x3c
 800330a:	af0a      	add	r7, sp, #40	; 0x28
 800330c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d101      	bne.n	8003318 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e10f      	b.n	8003538 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b00      	cmp	r3, #0
 8003328:	d106      	bne.n	8003338 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f005 fcc4 	bl	8008cc0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2203      	movs	r2, #3
 800333c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003348:	2b00      	cmp	r3, #0
 800334a:	d102      	bne.n	8003352 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4618      	mov	r0, r3
 8003358:	f001 ffab 	bl	80052b2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	603b      	str	r3, [r7, #0]
 8003362:	687e      	ldr	r6, [r7, #4]
 8003364:	466d      	mov	r5, sp
 8003366:	f106 0410 	add.w	r4, r6, #16
 800336a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800336c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800336e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003370:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003372:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003376:	e885 0003 	stmia.w	r5, {r0, r1}
 800337a:	1d33      	adds	r3, r6, #4
 800337c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800337e:	6838      	ldr	r0, [r7, #0]
 8003380:	f001 fe82 	bl	8005088 <USB_CoreInit>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d005      	beq.n	8003396 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2202      	movs	r2, #2
 800338e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e0d0      	b.n	8003538 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2100      	movs	r1, #0
 800339c:	4618      	mov	r0, r3
 800339e:	f001 ff99 	bl	80052d4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033a2:	2300      	movs	r3, #0
 80033a4:	73fb      	strb	r3, [r7, #15]
 80033a6:	e04a      	b.n	800343e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80033a8:	7bfa      	ldrb	r2, [r7, #15]
 80033aa:	6879      	ldr	r1, [r7, #4]
 80033ac:	4613      	mov	r3, r2
 80033ae:	00db      	lsls	r3, r3, #3
 80033b0:	4413      	add	r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	440b      	add	r3, r1
 80033b6:	333d      	adds	r3, #61	; 0x3d
 80033b8:	2201      	movs	r2, #1
 80033ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80033bc:	7bfa      	ldrb	r2, [r7, #15]
 80033be:	6879      	ldr	r1, [r7, #4]
 80033c0:	4613      	mov	r3, r2
 80033c2:	00db      	lsls	r3, r3, #3
 80033c4:	4413      	add	r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	440b      	add	r3, r1
 80033ca:	333c      	adds	r3, #60	; 0x3c
 80033cc:	7bfa      	ldrb	r2, [r7, #15]
 80033ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80033d0:	7bfa      	ldrb	r2, [r7, #15]
 80033d2:	7bfb      	ldrb	r3, [r7, #15]
 80033d4:	b298      	uxth	r0, r3
 80033d6:	6879      	ldr	r1, [r7, #4]
 80033d8:	4613      	mov	r3, r2
 80033da:	00db      	lsls	r3, r3, #3
 80033dc:	4413      	add	r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	440b      	add	r3, r1
 80033e2:	3344      	adds	r3, #68	; 0x44
 80033e4:	4602      	mov	r2, r0
 80033e6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80033e8:	7bfa      	ldrb	r2, [r7, #15]
 80033ea:	6879      	ldr	r1, [r7, #4]
 80033ec:	4613      	mov	r3, r2
 80033ee:	00db      	lsls	r3, r3, #3
 80033f0:	4413      	add	r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	440b      	add	r3, r1
 80033f6:	3340      	adds	r3, #64	; 0x40
 80033f8:	2200      	movs	r2, #0
 80033fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80033fc:	7bfa      	ldrb	r2, [r7, #15]
 80033fe:	6879      	ldr	r1, [r7, #4]
 8003400:	4613      	mov	r3, r2
 8003402:	00db      	lsls	r3, r3, #3
 8003404:	4413      	add	r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	440b      	add	r3, r1
 800340a:	3348      	adds	r3, #72	; 0x48
 800340c:	2200      	movs	r2, #0
 800340e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003410:	7bfa      	ldrb	r2, [r7, #15]
 8003412:	6879      	ldr	r1, [r7, #4]
 8003414:	4613      	mov	r3, r2
 8003416:	00db      	lsls	r3, r3, #3
 8003418:	4413      	add	r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	440b      	add	r3, r1
 800341e:	334c      	adds	r3, #76	; 0x4c
 8003420:	2200      	movs	r2, #0
 8003422:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003424:	7bfa      	ldrb	r2, [r7, #15]
 8003426:	6879      	ldr	r1, [r7, #4]
 8003428:	4613      	mov	r3, r2
 800342a:	00db      	lsls	r3, r3, #3
 800342c:	4413      	add	r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	440b      	add	r3, r1
 8003432:	3354      	adds	r3, #84	; 0x54
 8003434:	2200      	movs	r2, #0
 8003436:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003438:	7bfb      	ldrb	r3, [r7, #15]
 800343a:	3301      	adds	r3, #1
 800343c:	73fb      	strb	r3, [r7, #15]
 800343e:	7bfa      	ldrb	r2, [r7, #15]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	429a      	cmp	r2, r3
 8003446:	d3af      	bcc.n	80033a8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003448:	2300      	movs	r3, #0
 800344a:	73fb      	strb	r3, [r7, #15]
 800344c:	e044      	b.n	80034d8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800344e:	7bfa      	ldrb	r2, [r7, #15]
 8003450:	6879      	ldr	r1, [r7, #4]
 8003452:	4613      	mov	r3, r2
 8003454:	00db      	lsls	r3, r3, #3
 8003456:	4413      	add	r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	440b      	add	r3, r1
 800345c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003460:	2200      	movs	r2, #0
 8003462:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003464:	7bfa      	ldrb	r2, [r7, #15]
 8003466:	6879      	ldr	r1, [r7, #4]
 8003468:	4613      	mov	r3, r2
 800346a:	00db      	lsls	r3, r3, #3
 800346c:	4413      	add	r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	440b      	add	r3, r1
 8003472:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003476:	7bfa      	ldrb	r2, [r7, #15]
 8003478:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800347a:	7bfa      	ldrb	r2, [r7, #15]
 800347c:	6879      	ldr	r1, [r7, #4]
 800347e:	4613      	mov	r3, r2
 8003480:	00db      	lsls	r3, r3, #3
 8003482:	4413      	add	r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	440b      	add	r3, r1
 8003488:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800348c:	2200      	movs	r2, #0
 800348e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003490:	7bfa      	ldrb	r2, [r7, #15]
 8003492:	6879      	ldr	r1, [r7, #4]
 8003494:	4613      	mov	r3, r2
 8003496:	00db      	lsls	r3, r3, #3
 8003498:	4413      	add	r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	440b      	add	r3, r1
 800349e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80034a2:	2200      	movs	r2, #0
 80034a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80034a6:	7bfa      	ldrb	r2, [r7, #15]
 80034a8:	6879      	ldr	r1, [r7, #4]
 80034aa:	4613      	mov	r3, r2
 80034ac:	00db      	lsls	r3, r3, #3
 80034ae:	4413      	add	r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	440b      	add	r3, r1
 80034b4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80034b8:	2200      	movs	r2, #0
 80034ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80034bc:	7bfa      	ldrb	r2, [r7, #15]
 80034be:	6879      	ldr	r1, [r7, #4]
 80034c0:	4613      	mov	r3, r2
 80034c2:	00db      	lsls	r3, r3, #3
 80034c4:	4413      	add	r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	440b      	add	r3, r1
 80034ca:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80034ce:	2200      	movs	r2, #0
 80034d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034d2:	7bfb      	ldrb	r3, [r7, #15]
 80034d4:	3301      	adds	r3, #1
 80034d6:	73fb      	strb	r3, [r7, #15]
 80034d8:	7bfa      	ldrb	r2, [r7, #15]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d3b5      	bcc.n	800344e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	603b      	str	r3, [r7, #0]
 80034e8:	687e      	ldr	r6, [r7, #4]
 80034ea:	466d      	mov	r5, sp
 80034ec:	f106 0410 	add.w	r4, r6, #16
 80034f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034f8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80034fc:	e885 0003 	stmia.w	r5, {r0, r1}
 8003500:	1d33      	adds	r3, r6, #4
 8003502:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003504:	6838      	ldr	r0, [r7, #0]
 8003506:	f001 ff31 	bl	800536c <USB_DevInit>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d005      	beq.n	800351c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2202      	movs	r2, #2
 8003514:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e00d      	b.n	8003538 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4618      	mov	r0, r3
 8003532:	f003 f880 	bl	8006636 <USB_DevDisconnect>

  return HAL_OK;
 8003536:	2300      	movs	r3, #0
}
 8003538:	4618      	mov	r0, r3
 800353a:	3714      	adds	r7, #20
 800353c:	46bd      	mov	sp, r7
 800353e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003540 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003554:	2b01      	cmp	r3, #1
 8003556:	d101      	bne.n	800355c <HAL_PCD_Start+0x1c>
 8003558:	2302      	movs	r3, #2
 800355a:	e020      	b.n	800359e <HAL_PCD_Start+0x5e>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003568:	2b01      	cmp	r3, #1
 800356a:	d109      	bne.n	8003580 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003570:	2b01      	cmp	r3, #1
 8003572:	d005      	beq.n	8003580 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003578:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4618      	mov	r0, r3
 8003586:	f001 fe83 	bl	8005290 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4618      	mov	r0, r3
 8003590:	f003 f830 	bl	80065f4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3710      	adds	r7, #16
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80035a6:	b590      	push	{r4, r7, lr}
 80035a8:	b08d      	sub	sp, #52	; 0x34
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035b4:	6a3b      	ldr	r3, [r7, #32]
 80035b6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4618      	mov	r0, r3
 80035be:	f003 f8ee 	bl	800679e <USB_GetMode>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	f040 848a 	bne.w	8003ede <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f003 f852 	bl	8006678 <USB_ReadInterrupts>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	f000 8480 	beq.w	8003edc <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	0a1b      	lsrs	r3, r3, #8
 80035e6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f003 f83f 	bl	8006678 <USB_ReadInterrupts>
 80035fa:	4603      	mov	r3, r0
 80035fc:	f003 0302 	and.w	r3, r3, #2
 8003600:	2b02      	cmp	r3, #2
 8003602:	d107      	bne.n	8003614 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	695a      	ldr	r2, [r3, #20]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f002 0202 	and.w	r2, r2, #2
 8003612:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4618      	mov	r0, r3
 800361a:	f003 f82d 	bl	8006678 <USB_ReadInterrupts>
 800361e:	4603      	mov	r3, r0
 8003620:	f003 0310 	and.w	r3, r3, #16
 8003624:	2b10      	cmp	r3, #16
 8003626:	d161      	bne.n	80036ec <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	699a      	ldr	r2, [r3, #24]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f022 0210 	bic.w	r2, r2, #16
 8003636:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003638:	6a3b      	ldr	r3, [r7, #32]
 800363a:	6a1b      	ldr	r3, [r3, #32]
 800363c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	f003 020f 	and.w	r2, r3, #15
 8003644:	4613      	mov	r3, r2
 8003646:	00db      	lsls	r3, r3, #3
 8003648:	4413      	add	r3, r2
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	4413      	add	r3, r2
 8003654:	3304      	adds	r3, #4
 8003656:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	0c5b      	lsrs	r3, r3, #17
 800365c:	f003 030f 	and.w	r3, r3, #15
 8003660:	2b02      	cmp	r3, #2
 8003662:	d124      	bne.n	80036ae <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003664:	69ba      	ldr	r2, [r7, #24]
 8003666:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800366a:	4013      	ands	r3, r2
 800366c:	2b00      	cmp	r3, #0
 800366e:	d035      	beq.n	80036dc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	091b      	lsrs	r3, r3, #4
 8003678:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800367a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800367e:	b29b      	uxth	r3, r3
 8003680:	461a      	mov	r2, r3
 8003682:	6a38      	ldr	r0, [r7, #32]
 8003684:	f002 fe64 	bl	8006350 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	691a      	ldr	r2, [r3, #16]
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	091b      	lsrs	r3, r3, #4
 8003690:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003694:	441a      	add	r2, r3
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	6a1a      	ldr	r2, [r3, #32]
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	091b      	lsrs	r3, r3, #4
 80036a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036a6:	441a      	add	r2, r3
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	621a      	str	r2, [r3, #32]
 80036ac:	e016      	b.n	80036dc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	0c5b      	lsrs	r3, r3, #17
 80036b2:	f003 030f 	and.w	r3, r3, #15
 80036b6:	2b06      	cmp	r3, #6
 80036b8:	d110      	bne.n	80036dc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80036c0:	2208      	movs	r2, #8
 80036c2:	4619      	mov	r1, r3
 80036c4:	6a38      	ldr	r0, [r7, #32]
 80036c6:	f002 fe43 	bl	8006350 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	6a1a      	ldr	r2, [r3, #32]
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	091b      	lsrs	r3, r3, #4
 80036d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036d6:	441a      	add	r2, r3
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	699a      	ldr	r2, [r3, #24]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f042 0210 	orr.w	r2, r2, #16
 80036ea:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f002 ffc1 	bl	8006678 <USB_ReadInterrupts>
 80036f6:	4603      	mov	r3, r0
 80036f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036fc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003700:	f040 80a7 	bne.w	8003852 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003704:	2300      	movs	r3, #0
 8003706:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4618      	mov	r0, r3
 800370e:	f002 ffc6 	bl	800669e <USB_ReadDevAllOutEpInterrupt>
 8003712:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003714:	e099      	b.n	800384a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003718:	f003 0301 	and.w	r3, r3, #1
 800371c:	2b00      	cmp	r3, #0
 800371e:	f000 808e 	beq.w	800383e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003728:	b2d2      	uxtb	r2, r2
 800372a:	4611      	mov	r1, r2
 800372c:	4618      	mov	r0, r3
 800372e:	f002 ffea 	bl	8006706 <USB_ReadDevOutEPInterrupt>
 8003732:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00c      	beq.n	8003758 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800373e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003740:	015a      	lsls	r2, r3, #5
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	4413      	add	r3, r2
 8003746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800374a:	461a      	mov	r2, r3
 800374c:	2301      	movs	r3, #1
 800374e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003750:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 fec2 	bl	80044dc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	f003 0308 	and.w	r3, r3, #8
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00c      	beq.n	800377c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003764:	015a      	lsls	r2, r3, #5
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	4413      	add	r3, r2
 800376a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800376e:	461a      	mov	r2, r3
 8003770:	2308      	movs	r3, #8
 8003772:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003774:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 ff98 	bl	80046ac <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	f003 0310 	and.w	r3, r3, #16
 8003782:	2b00      	cmp	r3, #0
 8003784:	d008      	beq.n	8003798 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003788:	015a      	lsls	r2, r3, #5
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	4413      	add	r3, r2
 800378e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003792:	461a      	mov	r2, r3
 8003794:	2310      	movs	r3, #16
 8003796:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	f003 0302 	and.w	r3, r3, #2
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d030      	beq.n	8003804 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80037a2:	6a3b      	ldr	r3, [r7, #32]
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037aa:	2b80      	cmp	r3, #128	; 0x80
 80037ac:	d109      	bne.n	80037c2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	69fa      	ldr	r2, [r7, #28]
 80037b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037c0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80037c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037c4:	4613      	mov	r3, r2
 80037c6:	00db      	lsls	r3, r3, #3
 80037c8:	4413      	add	r3, r2
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	4413      	add	r3, r2
 80037d4:	3304      	adds	r3, #4
 80037d6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	78db      	ldrb	r3, [r3, #3]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d108      	bne.n	80037f2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	2200      	movs	r2, #0
 80037e4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80037e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	4619      	mov	r1, r3
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f005 fb63 	bl	8008eb8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80037f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f4:	015a      	lsls	r2, r3, #5
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	4413      	add	r3, r2
 80037fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037fe:	461a      	mov	r2, r3
 8003800:	2302      	movs	r3, #2
 8003802:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	f003 0320 	and.w	r3, r3, #32
 800380a:	2b00      	cmp	r3, #0
 800380c:	d008      	beq.n	8003820 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800380e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003810:	015a      	lsls	r2, r3, #5
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	4413      	add	r3, r2
 8003816:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800381a:	461a      	mov	r2, r3
 800381c:	2320      	movs	r3, #32
 800381e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d009      	beq.n	800383e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800382a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382c:	015a      	lsls	r2, r3, #5
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	4413      	add	r3, r2
 8003832:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003836:	461a      	mov	r2, r3
 8003838:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800383c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800383e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003840:	3301      	adds	r3, #1
 8003842:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003846:	085b      	lsrs	r3, r3, #1
 8003848:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800384a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800384c:	2b00      	cmp	r3, #0
 800384e:	f47f af62 	bne.w	8003716 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4618      	mov	r0, r3
 8003858:	f002 ff0e 	bl	8006678 <USB_ReadInterrupts>
 800385c:	4603      	mov	r3, r0
 800385e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003862:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003866:	f040 80db 	bne.w	8003a20 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4618      	mov	r0, r3
 8003870:	f002 ff2f 	bl	80066d2 <USB_ReadDevAllInEpInterrupt>
 8003874:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003876:	2300      	movs	r3, #0
 8003878:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800387a:	e0cd      	b.n	8003a18 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800387c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	2b00      	cmp	r3, #0
 8003884:	f000 80c2 	beq.w	8003a0c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800388e:	b2d2      	uxtb	r2, r2
 8003890:	4611      	mov	r1, r2
 8003892:	4618      	mov	r0, r3
 8003894:	f002 ff55 	bl	8006742 <USB_ReadDevInEPInterrupt>
 8003898:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	f003 0301 	and.w	r3, r3, #1
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d057      	beq.n	8003954 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80038a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a6:	f003 030f 	and.w	r3, r3, #15
 80038aa:	2201      	movs	r2, #1
 80038ac:	fa02 f303 	lsl.w	r3, r2, r3
 80038b0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	43db      	mvns	r3, r3
 80038be:	69f9      	ldr	r1, [r7, #28]
 80038c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80038c4:	4013      	ands	r3, r2
 80038c6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80038c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ca:	015a      	lsls	r2, r3, #5
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	4413      	add	r3, r2
 80038d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038d4:	461a      	mov	r2, r3
 80038d6:	2301      	movs	r3, #1
 80038d8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d132      	bne.n	8003948 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80038e2:	6879      	ldr	r1, [r7, #4]
 80038e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038e6:	4613      	mov	r3, r2
 80038e8:	00db      	lsls	r3, r3, #3
 80038ea:	4413      	add	r3, r2
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	440b      	add	r3, r1
 80038f0:	334c      	adds	r3, #76	; 0x4c
 80038f2:	6819      	ldr	r1, [r3, #0]
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038f8:	4613      	mov	r3, r2
 80038fa:	00db      	lsls	r3, r3, #3
 80038fc:	4413      	add	r3, r2
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	4403      	add	r3, r0
 8003902:	3348      	adds	r3, #72	; 0x48
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4419      	add	r1, r3
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800390c:	4613      	mov	r3, r2
 800390e:	00db      	lsls	r3, r3, #3
 8003910:	4413      	add	r3, r2
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	4403      	add	r3, r0
 8003916:	334c      	adds	r3, #76	; 0x4c
 8003918:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800391a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391c:	2b00      	cmp	r3, #0
 800391e:	d113      	bne.n	8003948 <HAL_PCD_IRQHandler+0x3a2>
 8003920:	6879      	ldr	r1, [r7, #4]
 8003922:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003924:	4613      	mov	r3, r2
 8003926:	00db      	lsls	r3, r3, #3
 8003928:	4413      	add	r3, r2
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	440b      	add	r3, r1
 800392e:	3354      	adds	r3, #84	; 0x54
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d108      	bne.n	8003948 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6818      	ldr	r0, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003940:	461a      	mov	r2, r3
 8003942:	2101      	movs	r1, #1
 8003944:	f002 ff5c 	bl	8006800 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394a:	b2db      	uxtb	r3, r3
 800394c:	4619      	mov	r1, r3
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f005 fa37 	bl	8008dc2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	f003 0308 	and.w	r3, r3, #8
 800395a:	2b00      	cmp	r3, #0
 800395c:	d008      	beq.n	8003970 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800395e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003960:	015a      	lsls	r2, r3, #5
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	4413      	add	r3, r2
 8003966:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800396a:	461a      	mov	r2, r3
 800396c:	2308      	movs	r3, #8
 800396e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	f003 0310 	and.w	r3, r3, #16
 8003976:	2b00      	cmp	r3, #0
 8003978:	d008      	beq.n	800398c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800397a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397c:	015a      	lsls	r2, r3, #5
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	4413      	add	r3, r2
 8003982:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003986:	461a      	mov	r2, r3
 8003988:	2310      	movs	r3, #16
 800398a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003992:	2b00      	cmp	r3, #0
 8003994:	d008      	beq.n	80039a8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003998:	015a      	lsls	r2, r3, #5
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	4413      	add	r3, r2
 800399e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039a2:	461a      	mov	r2, r3
 80039a4:	2340      	movs	r3, #64	; 0x40
 80039a6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	f003 0302 	and.w	r3, r3, #2
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d023      	beq.n	80039fa <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80039b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039b4:	6a38      	ldr	r0, [r7, #32]
 80039b6:	f001 fe3d 	bl	8005634 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80039ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039bc:	4613      	mov	r3, r2
 80039be:	00db      	lsls	r3, r3, #3
 80039c0:	4413      	add	r3, r2
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	3338      	adds	r3, #56	; 0x38
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	4413      	add	r3, r2
 80039ca:	3304      	adds	r3, #4
 80039cc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	78db      	ldrb	r3, [r3, #3]
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d108      	bne.n	80039e8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	2200      	movs	r2, #0
 80039da:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80039dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	4619      	mov	r1, r3
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f005 fa7a 	bl	8008edc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80039e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ea:	015a      	lsls	r2, r3, #5
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	4413      	add	r3, r2
 80039f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039f4:	461a      	mov	r2, r3
 80039f6:	2302      	movs	r3, #2
 80039f8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d003      	beq.n	8003a0c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003a04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 fcdb 	bl	80043c2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0e:	3301      	adds	r3, #1
 8003a10:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a14:	085b      	lsrs	r3, r3, #1
 8003a16:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	f47f af2e 	bne.w	800387c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4618      	mov	r0, r3
 8003a26:	f002 fe27 	bl	8006678 <USB_ReadInterrupts>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a34:	d122      	bne.n	8003a7c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	69fa      	ldr	r2, [r7, #28]
 8003a40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a44:	f023 0301 	bic.w	r3, r3, #1
 8003a48:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d108      	bne.n	8003a66 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003a5c:	2100      	movs	r1, #0
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 fec2 	bl	80047e8 <HAL_PCDEx_LPM_Callback>
 8003a64:	e002      	b.n	8003a6c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f005 fa18 	bl	8008e9c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	695a      	ldr	r2, [r3, #20]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003a7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4618      	mov	r0, r3
 8003a82:	f002 fdf9 	bl	8006678 <USB_ReadInterrupts>
 8003a86:	4603      	mov	r3, r0
 8003a88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a90:	d112      	bne.n	8003ab8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f003 0301 	and.w	r3, r3, #1
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d102      	bne.n	8003aa8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f005 f9d4 	bl	8008e50 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	695a      	ldr	r2, [r3, #20]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003ab6:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4618      	mov	r0, r3
 8003abe:	f002 fddb 	bl	8006678 <USB_ReadInterrupts>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ac8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003acc:	f040 80b7 	bne.w	8003c3e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	69fa      	ldr	r2, [r7, #28]
 8003ada:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ade:	f023 0301 	bic.w	r3, r3, #1
 8003ae2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2110      	movs	r1, #16
 8003aea:	4618      	mov	r0, r3
 8003aec:	f001 fda2 	bl	8005634 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003af0:	2300      	movs	r3, #0
 8003af2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003af4:	e046      	b.n	8003b84 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003af8:	015a      	lsls	r2, r3, #5
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	4413      	add	r3, r2
 8003afe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b02:	461a      	mov	r2, r3
 8003b04:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b08:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b0c:	015a      	lsls	r2, r3, #5
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	4413      	add	r3, r2
 8003b12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b1a:	0151      	lsls	r1, r2, #5
 8003b1c:	69fa      	ldr	r2, [r7, #28]
 8003b1e:	440a      	add	r2, r1
 8003b20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b24:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003b28:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b2c:	015a      	lsls	r2, r3, #5
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	4413      	add	r3, r2
 8003b32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b36:	461a      	mov	r2, r3
 8003b38:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b3c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b40:	015a      	lsls	r2, r3, #5
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	4413      	add	r3, r2
 8003b46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b4e:	0151      	lsls	r1, r2, #5
 8003b50:	69fa      	ldr	r2, [r7, #28]
 8003b52:	440a      	add	r2, r1
 8003b54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b58:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003b5c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b60:	015a      	lsls	r2, r3, #5
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	4413      	add	r3, r2
 8003b66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b6e:	0151      	lsls	r1, r2, #5
 8003b70:	69fa      	ldr	r2, [r7, #28]
 8003b72:	440a      	add	r2, r1
 8003b74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b78:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003b7c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b80:	3301      	adds	r3, #1
 8003b82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d3b3      	bcc.n	8003af6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b94:	69db      	ldr	r3, [r3, #28]
 8003b96:	69fa      	ldr	r2, [r7, #28]
 8003b98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b9c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003ba0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d016      	beq.n	8003bd8 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bb4:	69fa      	ldr	r2, [r7, #28]
 8003bb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bba:	f043 030b 	orr.w	r3, r3, #11
 8003bbe:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bca:	69fa      	ldr	r2, [r7, #28]
 8003bcc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bd0:	f043 030b 	orr.w	r3, r3, #11
 8003bd4:	6453      	str	r3, [r2, #68]	; 0x44
 8003bd6:	e015      	b.n	8003c04 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bde:	695b      	ldr	r3, [r3, #20]
 8003be0:	69fa      	ldr	r2, [r7, #28]
 8003be2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003be6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003bea:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003bee:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bf6:	691b      	ldr	r3, [r3, #16]
 8003bf8:	69fa      	ldr	r2, [r7, #28]
 8003bfa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bfe:	f043 030b 	orr.w	r3, r3, #11
 8003c02:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	69fa      	ldr	r2, [r7, #28]
 8003c0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c12:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003c16:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6818      	ldr	r0, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	691b      	ldr	r3, [r3, #16]
 8003c20:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003c28:	461a      	mov	r2, r3
 8003c2a:	f002 fde9 	bl	8006800 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	695a      	ldr	r2, [r3, #20]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003c3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4618      	mov	r0, r3
 8003c44:	f002 fd18 	bl	8006678 <USB_ReadInterrupts>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c52:	d124      	bne.n	8003c9e <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f002 fdae 	bl	80067ba <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f001 fd63 	bl	800572e <USB_GetDevSpeed>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681c      	ldr	r4, [r3, #0]
 8003c74:	f001 f9e8 	bl	8005048 <HAL_RCC_GetHCLKFreq>
 8003c78:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	461a      	mov	r2, r3
 8003c82:	4620      	mov	r0, r4
 8003c84:	f001 fa62 	bl	800514c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f005 f8c2 	bl	8008e12 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	695a      	ldr	r2, [r3, #20]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003c9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f002 fce8 	bl	8006678 <USB_ReadInterrupts>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	f003 0308 	and.w	r3, r3, #8
 8003cae:	2b08      	cmp	r3, #8
 8003cb0:	d10a      	bne.n	8003cc8 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f005 f89f 	bl	8008df6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	695a      	ldr	r2, [r3, #20]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f002 0208 	and.w	r2, r2, #8
 8003cc6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f002 fcd3 	bl	8006678 <USB_ReadInterrupts>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cd8:	2b80      	cmp	r3, #128	; 0x80
 8003cda:	d122      	bne.n	8003d22 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003cdc:	6a3b      	ldr	r3, [r7, #32]
 8003cde:	699b      	ldr	r3, [r3, #24]
 8003ce0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ce4:	6a3b      	ldr	r3, [r7, #32]
 8003ce6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ce8:	2301      	movs	r3, #1
 8003cea:	627b      	str	r3, [r7, #36]	; 0x24
 8003cec:	e014      	b.n	8003d18 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003cee:	6879      	ldr	r1, [r7, #4]
 8003cf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	00db      	lsls	r3, r3, #3
 8003cf6:	4413      	add	r3, r2
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	440b      	add	r3, r1
 8003cfc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d105      	bne.n	8003d12 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f000 fb27 	bl	8004360 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d14:	3301      	adds	r3, #1
 8003d16:	627b      	str	r3, [r7, #36]	; 0x24
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d3e5      	bcc.n	8003cee <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4618      	mov	r0, r3
 8003d28:	f002 fca6 	bl	8006678 <USB_ReadInterrupts>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d36:	d13b      	bne.n	8003db0 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d38:	2301      	movs	r3, #1
 8003d3a:	627b      	str	r3, [r7, #36]	; 0x24
 8003d3c:	e02b      	b.n	8003d96 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d40:	015a      	lsls	r2, r3, #5
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	4413      	add	r3, r2
 8003d46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003d4e:	6879      	ldr	r1, [r7, #4]
 8003d50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d52:	4613      	mov	r3, r2
 8003d54:	00db      	lsls	r3, r3, #3
 8003d56:	4413      	add	r3, r2
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	440b      	add	r3, r1
 8003d5c:	3340      	adds	r3, #64	; 0x40
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d115      	bne.n	8003d90 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003d64:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	da12      	bge.n	8003d90 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003d6a:	6879      	ldr	r1, [r7, #4]
 8003d6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d6e:	4613      	mov	r3, r2
 8003d70:	00db      	lsls	r3, r3, #3
 8003d72:	4413      	add	r3, r2
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	440b      	add	r3, r1
 8003d78:	333f      	adds	r3, #63	; 0x3f
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	4619      	mov	r1, r3
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 fae8 	bl	8004360 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d92:	3301      	adds	r3, #1
 8003d94:	627b      	str	r3, [r7, #36]	; 0x24
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d3ce      	bcc.n	8003d3e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	695a      	ldr	r2, [r3, #20]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003dae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4618      	mov	r0, r3
 8003db6:	f002 fc5f 	bl	8006678 <USB_ReadInterrupts>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dc0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003dc4:	d155      	bne.n	8003e72 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	627b      	str	r3, [r7, #36]	; 0x24
 8003dca:	e045      	b.n	8003e58 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dce:	015a      	lsls	r2, r3, #5
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	4413      	add	r3, r2
 8003dd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ddc:	6879      	ldr	r1, [r7, #4]
 8003dde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003de0:	4613      	mov	r3, r2
 8003de2:	00db      	lsls	r3, r3, #3
 8003de4:	4413      	add	r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	440b      	add	r3, r1
 8003dea:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d12e      	bne.n	8003e52 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003df4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	da2b      	bge.n	8003e52 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003e06:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d121      	bne.n	8003e52 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003e0e:	6879      	ldr	r1, [r7, #4]
 8003e10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e12:	4613      	mov	r3, r2
 8003e14:	00db      	lsls	r3, r3, #3
 8003e16:	4413      	add	r3, r2
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	440b      	add	r3, r1
 8003e1c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003e20:	2201      	movs	r2, #1
 8003e22:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003e24:	6a3b      	ldr	r3, [r7, #32]
 8003e26:	699b      	ldr	r3, [r3, #24]
 8003e28:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003e2c:	6a3b      	ldr	r3, [r7, #32]
 8003e2e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003e30:	6a3b      	ldr	r3, [r7, #32]
 8003e32:	695b      	ldr	r3, [r3, #20]
 8003e34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d10a      	bne.n	8003e52 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	69fa      	ldr	r2, [r7, #28]
 8003e46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e4e:	6053      	str	r3, [r2, #4]
            break;
 8003e50:	e007      	b.n	8003e62 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e54:	3301      	adds	r3, #1
 8003e56:	627b      	str	r3, [r7, #36]	; 0x24
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d3b4      	bcc.n	8003dcc <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	695a      	ldr	r2, [r3, #20]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003e70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4618      	mov	r0, r3
 8003e78:	f002 fbfe 	bl	8006678 <USB_ReadInterrupts>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003e82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e86:	d10a      	bne.n	8003e9e <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f005 f839 	bl	8008f00 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	695a      	ldr	r2, [r3, #20]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003e9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f002 fbe8 	bl	8006678 <USB_ReadInterrupts>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	f003 0304 	and.w	r3, r3, #4
 8003eae:	2b04      	cmp	r3, #4
 8003eb0:	d115      	bne.n	8003ede <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	f003 0304 	and.w	r3, r3, #4
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d002      	beq.n	8003eca <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f005 f829 	bl	8008f1c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	6859      	ldr	r1, [r3, #4]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	69ba      	ldr	r2, [r7, #24]
 8003ed6:	430a      	orrs	r2, r1
 8003ed8:	605a      	str	r2, [r3, #4]
 8003eda:	e000      	b.n	8003ede <HAL_PCD_IRQHandler+0x938>
      return;
 8003edc:	bf00      	nop
    }
  }
}
 8003ede:	3734      	adds	r7, #52	; 0x34
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd90      	pop	{r4, r7, pc}

08003ee4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	460b      	mov	r3, r1
 8003eee:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d101      	bne.n	8003efe <HAL_PCD_SetAddress+0x1a>
 8003efa:	2302      	movs	r3, #2
 8003efc:	e013      	b.n	8003f26 <HAL_PCD_SetAddress+0x42>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2201      	movs	r2, #1
 8003f02:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	78fa      	ldrb	r2, [r7, #3]
 8003f0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	78fa      	ldrb	r2, [r7, #3]
 8003f14:	4611      	mov	r1, r2
 8003f16:	4618      	mov	r0, r3
 8003f18:	f002 fb46 	bl	80065a8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3708      	adds	r7, #8
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}

08003f2e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003f2e:	b580      	push	{r7, lr}
 8003f30:	b084      	sub	sp, #16
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	6078      	str	r0, [r7, #4]
 8003f36:	4608      	mov	r0, r1
 8003f38:	4611      	mov	r1, r2
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	70fb      	strb	r3, [r7, #3]
 8003f40:	460b      	mov	r3, r1
 8003f42:	803b      	strh	r3, [r7, #0]
 8003f44:	4613      	mov	r3, r2
 8003f46:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003f4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	da0f      	bge.n	8003f74 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f54:	78fb      	ldrb	r3, [r7, #3]
 8003f56:	f003 020f 	and.w	r2, r3, #15
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	00db      	lsls	r3, r3, #3
 8003f5e:	4413      	add	r3, r2
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	3338      	adds	r3, #56	; 0x38
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	4413      	add	r3, r2
 8003f68:	3304      	adds	r3, #4
 8003f6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	705a      	strb	r2, [r3, #1]
 8003f72:	e00f      	b.n	8003f94 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f74:	78fb      	ldrb	r3, [r7, #3]
 8003f76:	f003 020f 	and.w	r2, r3, #15
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	00db      	lsls	r3, r3, #3
 8003f7e:	4413      	add	r3, r2
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	4413      	add	r3, r2
 8003f8a:	3304      	adds	r3, #4
 8003f8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2200      	movs	r2, #0
 8003f92:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003f94:	78fb      	ldrb	r3, [r7, #3]
 8003f96:	f003 030f 	and.w	r3, r3, #15
 8003f9a:	b2da      	uxtb	r2, r3
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003fa0:	883a      	ldrh	r2, [r7, #0]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	78ba      	ldrb	r2, [r7, #2]
 8003faa:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	785b      	ldrb	r3, [r3, #1]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d004      	beq.n	8003fbe <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	b29a      	uxth	r2, r3
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003fbe:	78bb      	ldrb	r3, [r7, #2]
 8003fc0:	2b02      	cmp	r3, #2
 8003fc2:	d102      	bne.n	8003fca <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d101      	bne.n	8003fd8 <HAL_PCD_EP_Open+0xaa>
 8003fd4:	2302      	movs	r3, #2
 8003fd6:	e00e      	b.n	8003ff6 <HAL_PCD_EP_Open+0xc8>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	68f9      	ldr	r1, [r7, #12]
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f001 fbc6 	bl	8005778 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003ff4:	7afb      	ldrb	r3, [r7, #11]
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3710      	adds	r7, #16
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}

08003ffe <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ffe:	b580      	push	{r7, lr}
 8004000:	b084      	sub	sp, #16
 8004002:	af00      	add	r7, sp, #0
 8004004:	6078      	str	r0, [r7, #4]
 8004006:	460b      	mov	r3, r1
 8004008:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800400a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800400e:	2b00      	cmp	r3, #0
 8004010:	da0f      	bge.n	8004032 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004012:	78fb      	ldrb	r3, [r7, #3]
 8004014:	f003 020f 	and.w	r2, r3, #15
 8004018:	4613      	mov	r3, r2
 800401a:	00db      	lsls	r3, r3, #3
 800401c:	4413      	add	r3, r2
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	3338      	adds	r3, #56	; 0x38
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	4413      	add	r3, r2
 8004026:	3304      	adds	r3, #4
 8004028:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2201      	movs	r2, #1
 800402e:	705a      	strb	r2, [r3, #1]
 8004030:	e00f      	b.n	8004052 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004032:	78fb      	ldrb	r3, [r7, #3]
 8004034:	f003 020f 	and.w	r2, r3, #15
 8004038:	4613      	mov	r3, r2
 800403a:	00db      	lsls	r3, r3, #3
 800403c:	4413      	add	r3, r2
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	4413      	add	r3, r2
 8004048:	3304      	adds	r3, #4
 800404a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2200      	movs	r2, #0
 8004050:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004052:	78fb      	ldrb	r3, [r7, #3]
 8004054:	f003 030f 	and.w	r3, r3, #15
 8004058:	b2da      	uxtb	r2, r3
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004064:	2b01      	cmp	r3, #1
 8004066:	d101      	bne.n	800406c <HAL_PCD_EP_Close+0x6e>
 8004068:	2302      	movs	r3, #2
 800406a:	e00e      	b.n	800408a <HAL_PCD_EP_Close+0x8c>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68f9      	ldr	r1, [r7, #12]
 800407a:	4618      	mov	r0, r3
 800407c:	f001 fc04 	bl	8005888 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3710      	adds	r7, #16
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}

08004092 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004092:	b580      	push	{r7, lr}
 8004094:	b086      	sub	sp, #24
 8004096:	af00      	add	r7, sp, #0
 8004098:	60f8      	str	r0, [r7, #12]
 800409a:	607a      	str	r2, [r7, #4]
 800409c:	603b      	str	r3, [r7, #0]
 800409e:	460b      	mov	r3, r1
 80040a0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040a2:	7afb      	ldrb	r3, [r7, #11]
 80040a4:	f003 020f 	and.w	r2, r3, #15
 80040a8:	4613      	mov	r3, r2
 80040aa:	00db      	lsls	r3, r3, #3
 80040ac:	4413      	add	r3, r2
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	4413      	add	r3, r2
 80040b8:	3304      	adds	r3, #4
 80040ba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	683a      	ldr	r2, [r7, #0]
 80040c6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	2200      	movs	r2, #0
 80040cc:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	2200      	movs	r2, #0
 80040d2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040d4:	7afb      	ldrb	r3, [r7, #11]
 80040d6:	f003 030f 	and.w	r3, r3, #15
 80040da:	b2da      	uxtb	r2, r3
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d102      	bne.n	80040ee <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80040ee:	7afb      	ldrb	r3, [r7, #11]
 80040f0:	f003 030f 	and.w	r3, r3, #15
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d109      	bne.n	800410c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6818      	ldr	r0, [r3, #0]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	691b      	ldr	r3, [r3, #16]
 8004100:	b2db      	uxtb	r3, r3
 8004102:	461a      	mov	r2, r3
 8004104:	6979      	ldr	r1, [r7, #20]
 8004106:	f001 fee3 	bl	8005ed0 <USB_EP0StartXfer>
 800410a:	e008      	b.n	800411e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6818      	ldr	r0, [r3, #0]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	691b      	ldr	r3, [r3, #16]
 8004114:	b2db      	uxtb	r3, r3
 8004116:	461a      	mov	r2, r3
 8004118:	6979      	ldr	r1, [r7, #20]
 800411a:	f001 fc91 	bl	8005a40 <USB_EPStartXfer>
  }

  return HAL_OK;
 800411e:	2300      	movs	r3, #0
}
 8004120:	4618      	mov	r0, r3
 8004122:	3718      	adds	r7, #24
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	460b      	mov	r3, r1
 8004132:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004134:	78fb      	ldrb	r3, [r7, #3]
 8004136:	f003 020f 	and.w	r2, r3, #15
 800413a:	6879      	ldr	r1, [r7, #4]
 800413c:	4613      	mov	r3, r2
 800413e:	00db      	lsls	r3, r3, #3
 8004140:	4413      	add	r3, r2
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	440b      	add	r3, r1
 8004146:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800414a:	681b      	ldr	r3, [r3, #0]
}
 800414c:	4618      	mov	r0, r3
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b086      	sub	sp, #24
 800415c:	af00      	add	r7, sp, #0
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	607a      	str	r2, [r7, #4]
 8004162:	603b      	str	r3, [r7, #0]
 8004164:	460b      	mov	r3, r1
 8004166:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004168:	7afb      	ldrb	r3, [r7, #11]
 800416a:	f003 020f 	and.w	r2, r3, #15
 800416e:	4613      	mov	r3, r2
 8004170:	00db      	lsls	r3, r3, #3
 8004172:	4413      	add	r3, r2
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	3338      	adds	r3, #56	; 0x38
 8004178:	68fa      	ldr	r2, [r7, #12]
 800417a:	4413      	add	r3, r2
 800417c:	3304      	adds	r3, #4
 800417e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	683a      	ldr	r2, [r7, #0]
 800418a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	2200      	movs	r2, #0
 8004190:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	2201      	movs	r2, #1
 8004196:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004198:	7afb      	ldrb	r3, [r7, #11]
 800419a:	f003 030f 	and.w	r3, r3, #15
 800419e:	b2da      	uxtb	r2, r3
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d102      	bne.n	80041b2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80041b2:	7afb      	ldrb	r3, [r7, #11]
 80041b4:	f003 030f 	and.w	r3, r3, #15
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d109      	bne.n	80041d0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6818      	ldr	r0, [r3, #0]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	691b      	ldr	r3, [r3, #16]
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	461a      	mov	r2, r3
 80041c8:	6979      	ldr	r1, [r7, #20]
 80041ca:	f001 fe81 	bl	8005ed0 <USB_EP0StartXfer>
 80041ce:	e008      	b.n	80041e2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6818      	ldr	r0, [r3, #0]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	691b      	ldr	r3, [r3, #16]
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	461a      	mov	r2, r3
 80041dc:	6979      	ldr	r1, [r7, #20]
 80041de:	f001 fc2f 	bl	8005a40 <USB_EPStartXfer>
  }

  return HAL_OK;
 80041e2:	2300      	movs	r3, #0
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3718      	adds	r7, #24
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}

080041ec <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	460b      	mov	r3, r1
 80041f6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80041f8:	78fb      	ldrb	r3, [r7, #3]
 80041fa:	f003 020f 	and.w	r2, r3, #15
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	429a      	cmp	r2, r3
 8004204:	d901      	bls.n	800420a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e050      	b.n	80042ac <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800420a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800420e:	2b00      	cmp	r3, #0
 8004210:	da0f      	bge.n	8004232 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004212:	78fb      	ldrb	r3, [r7, #3]
 8004214:	f003 020f 	and.w	r2, r3, #15
 8004218:	4613      	mov	r3, r2
 800421a:	00db      	lsls	r3, r3, #3
 800421c:	4413      	add	r3, r2
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	3338      	adds	r3, #56	; 0x38
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	4413      	add	r3, r2
 8004226:	3304      	adds	r3, #4
 8004228:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2201      	movs	r2, #1
 800422e:	705a      	strb	r2, [r3, #1]
 8004230:	e00d      	b.n	800424e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004232:	78fa      	ldrb	r2, [r7, #3]
 8004234:	4613      	mov	r3, r2
 8004236:	00db      	lsls	r3, r3, #3
 8004238:	4413      	add	r3, r2
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	4413      	add	r3, r2
 8004244:	3304      	adds	r3, #4
 8004246:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2200      	movs	r2, #0
 800424c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2201      	movs	r2, #1
 8004252:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004254:	78fb      	ldrb	r3, [r7, #3]
 8004256:	f003 030f 	and.w	r3, r3, #15
 800425a:	b2da      	uxtb	r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004266:	2b01      	cmp	r3, #1
 8004268:	d101      	bne.n	800426e <HAL_PCD_EP_SetStall+0x82>
 800426a:	2302      	movs	r3, #2
 800426c:	e01e      	b.n	80042ac <HAL_PCD_EP_SetStall+0xc0>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2201      	movs	r2, #1
 8004272:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	68f9      	ldr	r1, [r7, #12]
 800427c:	4618      	mov	r0, r3
 800427e:	f002 f8bf 	bl	8006400 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004282:	78fb      	ldrb	r3, [r7, #3]
 8004284:	f003 030f 	and.w	r3, r3, #15
 8004288:	2b00      	cmp	r3, #0
 800428a:	d10a      	bne.n	80042a2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6818      	ldr	r0, [r3, #0]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	691b      	ldr	r3, [r3, #16]
 8004294:	b2d9      	uxtb	r1, r3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800429c:	461a      	mov	r2, r3
 800429e:	f002 faaf 	bl	8006800 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3710      	adds	r7, #16
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	460b      	mov	r3, r1
 80042be:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80042c0:	78fb      	ldrb	r3, [r7, #3]
 80042c2:	f003 020f 	and.w	r2, r3, #15
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d901      	bls.n	80042d2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e042      	b.n	8004358 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80042d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	da0f      	bge.n	80042fa <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042da:	78fb      	ldrb	r3, [r7, #3]
 80042dc:	f003 020f 	and.w	r2, r3, #15
 80042e0:	4613      	mov	r3, r2
 80042e2:	00db      	lsls	r3, r3, #3
 80042e4:	4413      	add	r3, r2
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	3338      	adds	r3, #56	; 0x38
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	4413      	add	r3, r2
 80042ee:	3304      	adds	r3, #4
 80042f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2201      	movs	r2, #1
 80042f6:	705a      	strb	r2, [r3, #1]
 80042f8:	e00f      	b.n	800431a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042fa:	78fb      	ldrb	r3, [r7, #3]
 80042fc:	f003 020f 	and.w	r2, r3, #15
 8004300:	4613      	mov	r3, r2
 8004302:	00db      	lsls	r3, r3, #3
 8004304:	4413      	add	r3, r2
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	4413      	add	r3, r2
 8004310:	3304      	adds	r3, #4
 8004312:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2200      	movs	r2, #0
 800431e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004320:	78fb      	ldrb	r3, [r7, #3]
 8004322:	f003 030f 	and.w	r3, r3, #15
 8004326:	b2da      	uxtb	r2, r3
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004332:	2b01      	cmp	r3, #1
 8004334:	d101      	bne.n	800433a <HAL_PCD_EP_ClrStall+0x86>
 8004336:	2302      	movs	r3, #2
 8004338:	e00e      	b.n	8004358 <HAL_PCD_EP_ClrStall+0xa4>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2201      	movs	r2, #1
 800433e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	68f9      	ldr	r1, [r7, #12]
 8004348:	4618      	mov	r0, r3
 800434a:	f002 f8c7 	bl	80064dc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004356:	2300      	movs	r3, #0
}
 8004358:	4618      	mov	r0, r3
 800435a:	3710      	adds	r7, #16
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	460b      	mov	r3, r1
 800436a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800436c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004370:	2b00      	cmp	r3, #0
 8004372:	da0c      	bge.n	800438e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004374:	78fb      	ldrb	r3, [r7, #3]
 8004376:	f003 020f 	and.w	r2, r3, #15
 800437a:	4613      	mov	r3, r2
 800437c:	00db      	lsls	r3, r3, #3
 800437e:	4413      	add	r3, r2
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	3338      	adds	r3, #56	; 0x38
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	4413      	add	r3, r2
 8004388:	3304      	adds	r3, #4
 800438a:	60fb      	str	r3, [r7, #12]
 800438c:	e00c      	b.n	80043a8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800438e:	78fb      	ldrb	r3, [r7, #3]
 8004390:	f003 020f 	and.w	r2, r3, #15
 8004394:	4613      	mov	r3, r2
 8004396:	00db      	lsls	r3, r3, #3
 8004398:	4413      	add	r3, r2
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	4413      	add	r3, r2
 80043a4:	3304      	adds	r3, #4
 80043a6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68f9      	ldr	r1, [r7, #12]
 80043ae:	4618      	mov	r0, r3
 80043b0:	f001 fee6 	bl	8006180 <USB_EPStopXfer>
 80043b4:	4603      	mov	r3, r0
 80043b6:	72fb      	strb	r3, [r7, #11]

  return ret;
 80043b8:	7afb      	ldrb	r3, [r7, #11]
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3710      	adds	r7, #16
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}

080043c2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80043c2:	b580      	push	{r7, lr}
 80043c4:	b08a      	sub	sp, #40	; 0x28
 80043c6:	af02      	add	r7, sp, #8
 80043c8:	6078      	str	r0, [r7, #4]
 80043ca:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80043d6:	683a      	ldr	r2, [r7, #0]
 80043d8:	4613      	mov	r3, r2
 80043da:	00db      	lsls	r3, r3, #3
 80043dc:	4413      	add	r3, r2
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	3338      	adds	r3, #56	; 0x38
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	4413      	add	r3, r2
 80043e6:	3304      	adds	r3, #4
 80043e8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6a1a      	ldr	r2, [r3, #32]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	699b      	ldr	r3, [r3, #24]
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d901      	bls.n	80043fa <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e06c      	b.n	80044d4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	699a      	ldr	r2, [r3, #24]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	6a1b      	ldr	r3, [r3, #32]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	69fa      	ldr	r2, [r7, #28]
 800440c:	429a      	cmp	r2, r3
 800440e:	d902      	bls.n	8004416 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	3303      	adds	r3, #3
 800441a:	089b      	lsrs	r3, r3, #2
 800441c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800441e:	e02b      	b.n	8004478 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	699a      	ldr	r2, [r3, #24]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6a1b      	ldr	r3, [r3, #32]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	69fa      	ldr	r2, [r7, #28]
 8004432:	429a      	cmp	r2, r3
 8004434:	d902      	bls.n	800443c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	3303      	adds	r3, #3
 8004440:	089b      	lsrs	r3, r3, #2
 8004442:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6919      	ldr	r1, [r3, #16]
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	b2da      	uxtb	r2, r3
 800444c:	69fb      	ldr	r3, [r7, #28]
 800444e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004454:	b2db      	uxtb	r3, r3
 8004456:	9300      	str	r3, [sp, #0]
 8004458:	4603      	mov	r3, r0
 800445a:	6978      	ldr	r0, [r7, #20]
 800445c:	f001 ff3a 	bl	80062d4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	691a      	ldr	r2, [r3, #16]
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	441a      	add	r2, r3
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6a1a      	ldr	r2, [r3, #32]
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	441a      	add	r2, r3
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	015a      	lsls	r2, r3, #5
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	4413      	add	r3, r2
 8004480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004484:	699b      	ldr	r3, [r3, #24]
 8004486:	b29b      	uxth	r3, r3
 8004488:	69ba      	ldr	r2, [r7, #24]
 800448a:	429a      	cmp	r2, r3
 800448c:	d809      	bhi.n	80044a2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6a1a      	ldr	r2, [r3, #32]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004496:	429a      	cmp	r2, r3
 8004498:	d203      	bcs.n	80044a2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	699b      	ldr	r3, [r3, #24]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1be      	bne.n	8004420 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	699a      	ldr	r2, [r3, #24]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6a1b      	ldr	r3, [r3, #32]
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d811      	bhi.n	80044d2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	f003 030f 	and.w	r3, r3, #15
 80044b4:	2201      	movs	r2, #1
 80044b6:	fa02 f303 	lsl.w	r3, r2, r3
 80044ba:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	43db      	mvns	r3, r3
 80044c8:	6939      	ldr	r1, [r7, #16]
 80044ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044ce:	4013      	ands	r3, r2
 80044d0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80044d2:	2300      	movs	r3, #0
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3720      	adds	r7, #32
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}

080044dc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b088      	sub	sp, #32
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	333c      	adds	r3, #60	; 0x3c
 80044f4:	3304      	adds	r3, #4
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	015a      	lsls	r2, r3, #5
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	4413      	add	r3, r2
 8004502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	2b01      	cmp	r3, #1
 8004510:	d17b      	bne.n	800460a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	f003 0308 	and.w	r3, r3, #8
 8004518:	2b00      	cmp	r3, #0
 800451a:	d015      	beq.n	8004548 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	4a61      	ldr	r2, [pc, #388]	; (80046a4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004520:	4293      	cmp	r3, r2
 8004522:	f240 80b9 	bls.w	8004698 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800452c:	2b00      	cmp	r3, #0
 800452e:	f000 80b3 	beq.w	8004698 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	015a      	lsls	r2, r3, #5
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	4413      	add	r3, r2
 800453a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800453e:	461a      	mov	r2, r3
 8004540:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004544:	6093      	str	r3, [r2, #8]
 8004546:	e0a7      	b.n	8004698 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	f003 0320 	and.w	r3, r3, #32
 800454e:	2b00      	cmp	r3, #0
 8004550:	d009      	beq.n	8004566 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	015a      	lsls	r2, r3, #5
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	4413      	add	r3, r2
 800455a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800455e:	461a      	mov	r2, r3
 8004560:	2320      	movs	r3, #32
 8004562:	6093      	str	r3, [r2, #8]
 8004564:	e098      	b.n	8004698 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800456c:	2b00      	cmp	r3, #0
 800456e:	f040 8093 	bne.w	8004698 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	4a4b      	ldr	r2, [pc, #300]	; (80046a4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d90f      	bls.n	800459a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004580:	2b00      	cmp	r3, #0
 8004582:	d00a      	beq.n	800459a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	015a      	lsls	r2, r3, #5
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	4413      	add	r3, r2
 800458c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004590:	461a      	mov	r2, r3
 8004592:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004596:	6093      	str	r3, [r2, #8]
 8004598:	e07e      	b.n	8004698 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800459a:	683a      	ldr	r2, [r7, #0]
 800459c:	4613      	mov	r3, r2
 800459e:	00db      	lsls	r3, r3, #3
 80045a0:	4413      	add	r3, r2
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	4413      	add	r3, r2
 80045ac:	3304      	adds	r3, #4
 80045ae:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	69da      	ldr	r2, [r3, #28]
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	0159      	lsls	r1, r3, #5
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	440b      	add	r3, r1
 80045bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045c6:	1ad2      	subs	r2, r2, r3
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d114      	bne.n	80045fc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	699b      	ldr	r3, [r3, #24]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d109      	bne.n	80045ee <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6818      	ldr	r0, [r3, #0]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80045e4:	461a      	mov	r2, r3
 80045e6:	2101      	movs	r1, #1
 80045e8:	f002 f90a 	bl	8006800 <USB_EP0_OutStart>
 80045ec:	e006      	b.n	80045fc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	691a      	ldr	r2, [r3, #16]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6a1b      	ldr	r3, [r3, #32]
 80045f6:	441a      	add	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	4619      	mov	r1, r3
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f004 fbc2 	bl	8008d8c <HAL_PCD_DataOutStageCallback>
 8004608:	e046      	b.n	8004698 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	4a26      	ldr	r2, [pc, #152]	; (80046a8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d124      	bne.n	800465c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d00a      	beq.n	8004632 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	015a      	lsls	r2, r3, #5
 8004620:	69bb      	ldr	r3, [r7, #24]
 8004622:	4413      	add	r3, r2
 8004624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004628:	461a      	mov	r2, r3
 800462a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800462e:	6093      	str	r3, [r2, #8]
 8004630:	e032      	b.n	8004698 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	f003 0320 	and.w	r3, r3, #32
 8004638:	2b00      	cmp	r3, #0
 800463a:	d008      	beq.n	800464e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	015a      	lsls	r2, r3, #5
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	4413      	add	r3, r2
 8004644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004648:	461a      	mov	r2, r3
 800464a:	2320      	movs	r3, #32
 800464c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	b2db      	uxtb	r3, r3
 8004652:	4619      	mov	r1, r3
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f004 fb99 	bl	8008d8c <HAL_PCD_DataOutStageCallback>
 800465a:	e01d      	b.n	8004698 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d114      	bne.n	800468c <PCD_EP_OutXfrComplete_int+0x1b0>
 8004662:	6879      	ldr	r1, [r7, #4]
 8004664:	683a      	ldr	r2, [r7, #0]
 8004666:	4613      	mov	r3, r2
 8004668:	00db      	lsls	r3, r3, #3
 800466a:	4413      	add	r3, r2
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	440b      	add	r3, r1
 8004670:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d108      	bne.n	800468c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6818      	ldr	r0, [r3, #0]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004684:	461a      	mov	r2, r3
 8004686:	2100      	movs	r1, #0
 8004688:	f002 f8ba 	bl	8006800 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	b2db      	uxtb	r3, r3
 8004690:	4619      	mov	r1, r3
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f004 fb7a 	bl	8008d8c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3720      	adds	r7, #32
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	4f54300a 	.word	0x4f54300a
 80046a8:	4f54310a 	.word	0x4f54310a

080046ac <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b086      	sub	sp, #24
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	333c      	adds	r3, #60	; 0x3c
 80046c4:	3304      	adds	r3, #4
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	015a      	lsls	r2, r3, #5
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	4413      	add	r3, r2
 80046d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	4a15      	ldr	r2, [pc, #84]	; (8004734 <PCD_EP_OutSetupPacket_int+0x88>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d90e      	bls.n	8004700 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d009      	beq.n	8004700 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	015a      	lsls	r2, r3, #5
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	4413      	add	r3, r2
 80046f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046f8:	461a      	mov	r2, r3
 80046fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046fe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f004 fb31 	bl	8008d68 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	4a0a      	ldr	r2, [pc, #40]	; (8004734 <PCD_EP_OutSetupPacket_int+0x88>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d90c      	bls.n	8004728 <PCD_EP_OutSetupPacket_int+0x7c>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	2b01      	cmp	r3, #1
 8004714:	d108      	bne.n	8004728 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6818      	ldr	r0, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004720:	461a      	mov	r2, r3
 8004722:	2101      	movs	r1, #1
 8004724:	f002 f86c 	bl	8006800 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	3718      	adds	r7, #24
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	4f54300a 	.word	0x4f54300a

08004738 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004738:	b480      	push	{r7}
 800473a:	b085      	sub	sp, #20
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	460b      	mov	r3, r1
 8004742:	70fb      	strb	r3, [r7, #3]
 8004744:	4613      	mov	r3, r2
 8004746:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004750:	78fb      	ldrb	r3, [r7, #3]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d107      	bne.n	8004766 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004756:	883b      	ldrh	r3, [r7, #0]
 8004758:	0419      	lsls	r1, r3, #16
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	68ba      	ldr	r2, [r7, #8]
 8004760:	430a      	orrs	r2, r1
 8004762:	629a      	str	r2, [r3, #40]	; 0x28
 8004764:	e028      	b.n	80047b8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800476c:	0c1b      	lsrs	r3, r3, #16
 800476e:	68ba      	ldr	r2, [r7, #8]
 8004770:	4413      	add	r3, r2
 8004772:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004774:	2300      	movs	r3, #0
 8004776:	73fb      	strb	r3, [r7, #15]
 8004778:	e00d      	b.n	8004796 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	7bfb      	ldrb	r3, [r7, #15]
 8004780:	3340      	adds	r3, #64	; 0x40
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	4413      	add	r3, r2
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	0c1b      	lsrs	r3, r3, #16
 800478a:	68ba      	ldr	r2, [r7, #8]
 800478c:	4413      	add	r3, r2
 800478e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004790:	7bfb      	ldrb	r3, [r7, #15]
 8004792:	3301      	adds	r3, #1
 8004794:	73fb      	strb	r3, [r7, #15]
 8004796:	7bfa      	ldrb	r2, [r7, #15]
 8004798:	78fb      	ldrb	r3, [r7, #3]
 800479a:	3b01      	subs	r3, #1
 800479c:	429a      	cmp	r2, r3
 800479e:	d3ec      	bcc.n	800477a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80047a0:	883b      	ldrh	r3, [r7, #0]
 80047a2:	0418      	lsls	r0, r3, #16
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6819      	ldr	r1, [r3, #0]
 80047a8:	78fb      	ldrb	r3, [r7, #3]
 80047aa:	3b01      	subs	r3, #1
 80047ac:	68ba      	ldr	r2, [r7, #8]
 80047ae:	4302      	orrs	r2, r0
 80047b0:	3340      	adds	r3, #64	; 0x40
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	440b      	add	r3, r1
 80047b6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3714      	adds	r7, #20
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr

080047c6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80047c6:	b480      	push	{r7}
 80047c8:	b083      	sub	sp, #12
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
 80047ce:	460b      	mov	r3, r1
 80047d0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	887a      	ldrh	r2, [r7, #2]
 80047d8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80047da:	2300      	movs	r3, #0
}
 80047dc:	4618      	mov	r0, r3
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	460b      	mov	r3, r1
 80047f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80047f4:	bf00      	nop
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b086      	sub	sp, #24
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d101      	bne.n	8004812 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e267      	b.n	8004ce2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0301 	and.w	r3, r3, #1
 800481a:	2b00      	cmp	r3, #0
 800481c:	d075      	beq.n	800490a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800481e:	4b88      	ldr	r3, [pc, #544]	; (8004a40 <HAL_RCC_OscConfig+0x240>)
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f003 030c 	and.w	r3, r3, #12
 8004826:	2b04      	cmp	r3, #4
 8004828:	d00c      	beq.n	8004844 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800482a:	4b85      	ldr	r3, [pc, #532]	; (8004a40 <HAL_RCC_OscConfig+0x240>)
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004832:	2b08      	cmp	r3, #8
 8004834:	d112      	bne.n	800485c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004836:	4b82      	ldr	r3, [pc, #520]	; (8004a40 <HAL_RCC_OscConfig+0x240>)
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800483e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004842:	d10b      	bne.n	800485c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004844:	4b7e      	ldr	r3, [pc, #504]	; (8004a40 <HAL_RCC_OscConfig+0x240>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800484c:	2b00      	cmp	r3, #0
 800484e:	d05b      	beq.n	8004908 <HAL_RCC_OscConfig+0x108>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d157      	bne.n	8004908 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e242      	b.n	8004ce2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004864:	d106      	bne.n	8004874 <HAL_RCC_OscConfig+0x74>
 8004866:	4b76      	ldr	r3, [pc, #472]	; (8004a40 <HAL_RCC_OscConfig+0x240>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a75      	ldr	r2, [pc, #468]	; (8004a40 <HAL_RCC_OscConfig+0x240>)
 800486c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004870:	6013      	str	r3, [r2, #0]
 8004872:	e01d      	b.n	80048b0 <HAL_RCC_OscConfig+0xb0>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800487c:	d10c      	bne.n	8004898 <HAL_RCC_OscConfig+0x98>
 800487e:	4b70      	ldr	r3, [pc, #448]	; (8004a40 <HAL_RCC_OscConfig+0x240>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a6f      	ldr	r2, [pc, #444]	; (8004a40 <HAL_RCC_OscConfig+0x240>)
 8004884:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004888:	6013      	str	r3, [r2, #0]
 800488a:	4b6d      	ldr	r3, [pc, #436]	; (8004a40 <HAL_RCC_OscConfig+0x240>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a6c      	ldr	r2, [pc, #432]	; (8004a40 <HAL_RCC_OscConfig+0x240>)
 8004890:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004894:	6013      	str	r3, [r2, #0]
 8004896:	e00b      	b.n	80048b0 <HAL_RCC_OscConfig+0xb0>
 8004898:	4b69      	ldr	r3, [pc, #420]	; (8004a40 <HAL_RCC_OscConfig+0x240>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a68      	ldr	r2, [pc, #416]	; (8004a40 <HAL_RCC_OscConfig+0x240>)
 800489e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048a2:	6013      	str	r3, [r2, #0]
 80048a4:	4b66      	ldr	r3, [pc, #408]	; (8004a40 <HAL_RCC_OscConfig+0x240>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a65      	ldr	r2, [pc, #404]	; (8004a40 <HAL_RCC_OscConfig+0x240>)
 80048aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d013      	beq.n	80048e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048b8:	f7fd fa6c 	bl	8001d94 <HAL_GetTick>
 80048bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048be:	e008      	b.n	80048d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048c0:	f7fd fa68 	bl	8001d94 <HAL_GetTick>
 80048c4:	4602      	mov	r2, r0
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	2b64      	cmp	r3, #100	; 0x64
 80048cc:	d901      	bls.n	80048d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e207      	b.n	8004ce2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048d2:	4b5b      	ldr	r3, [pc, #364]	; (8004a40 <HAL_RCC_OscConfig+0x240>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d0f0      	beq.n	80048c0 <HAL_RCC_OscConfig+0xc0>
 80048de:	e014      	b.n	800490a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048e0:	f7fd fa58 	bl	8001d94 <HAL_GetTick>
 80048e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048e6:	e008      	b.n	80048fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048e8:	f7fd fa54 	bl	8001d94 <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	2b64      	cmp	r3, #100	; 0x64
 80048f4:	d901      	bls.n	80048fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e1f3      	b.n	8004ce2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048fa:	4b51      	ldr	r3, [pc, #324]	; (8004a40 <HAL_RCC_OscConfig+0x240>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d1f0      	bne.n	80048e8 <HAL_RCC_OscConfig+0xe8>
 8004906:	e000      	b.n	800490a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004908:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0302 	and.w	r3, r3, #2
 8004912:	2b00      	cmp	r3, #0
 8004914:	d063      	beq.n	80049de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004916:	4b4a      	ldr	r3, [pc, #296]	; (8004a40 <HAL_RCC_OscConfig+0x240>)
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	f003 030c 	and.w	r3, r3, #12
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00b      	beq.n	800493a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004922:	4b47      	ldr	r3, [pc, #284]	; (8004a40 <HAL_RCC_OscConfig+0x240>)
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800492a:	2b08      	cmp	r3, #8
 800492c:	d11c      	bne.n	8004968 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800492e:	4b44      	ldr	r3, [pc, #272]	; (8004a40 <HAL_RCC_OscConfig+0x240>)
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d116      	bne.n	8004968 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800493a:	4b41      	ldr	r3, [pc, #260]	; (8004a40 <HAL_RCC_OscConfig+0x240>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 0302 	and.w	r3, r3, #2
 8004942:	2b00      	cmp	r3, #0
 8004944:	d005      	beq.n	8004952 <HAL_RCC_OscConfig+0x152>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	2b01      	cmp	r3, #1
 800494c:	d001      	beq.n	8004952 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e1c7      	b.n	8004ce2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004952:	4b3b      	ldr	r3, [pc, #236]	; (8004a40 <HAL_RCC_OscConfig+0x240>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	00db      	lsls	r3, r3, #3
 8004960:	4937      	ldr	r1, [pc, #220]	; (8004a40 <HAL_RCC_OscConfig+0x240>)
 8004962:	4313      	orrs	r3, r2
 8004964:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004966:	e03a      	b.n	80049de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d020      	beq.n	80049b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004970:	4b34      	ldr	r3, [pc, #208]	; (8004a44 <HAL_RCC_OscConfig+0x244>)
 8004972:	2201      	movs	r2, #1
 8004974:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004976:	f7fd fa0d 	bl	8001d94 <HAL_GetTick>
 800497a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800497c:	e008      	b.n	8004990 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800497e:	f7fd fa09 	bl	8001d94 <HAL_GetTick>
 8004982:	4602      	mov	r2, r0
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	2b02      	cmp	r3, #2
 800498a:	d901      	bls.n	8004990 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	e1a8      	b.n	8004ce2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004990:	4b2b      	ldr	r3, [pc, #172]	; (8004a40 <HAL_RCC_OscConfig+0x240>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0302 	and.w	r3, r3, #2
 8004998:	2b00      	cmp	r3, #0
 800499a:	d0f0      	beq.n	800497e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800499c:	4b28      	ldr	r3, [pc, #160]	; (8004a40 <HAL_RCC_OscConfig+0x240>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	691b      	ldr	r3, [r3, #16]
 80049a8:	00db      	lsls	r3, r3, #3
 80049aa:	4925      	ldr	r1, [pc, #148]	; (8004a40 <HAL_RCC_OscConfig+0x240>)
 80049ac:	4313      	orrs	r3, r2
 80049ae:	600b      	str	r3, [r1, #0]
 80049b0:	e015      	b.n	80049de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049b2:	4b24      	ldr	r3, [pc, #144]	; (8004a44 <HAL_RCC_OscConfig+0x244>)
 80049b4:	2200      	movs	r2, #0
 80049b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049b8:	f7fd f9ec 	bl	8001d94 <HAL_GetTick>
 80049bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049be:	e008      	b.n	80049d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049c0:	f7fd f9e8 	bl	8001d94 <HAL_GetTick>
 80049c4:	4602      	mov	r2, r0
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	2b02      	cmp	r3, #2
 80049cc:	d901      	bls.n	80049d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80049ce:	2303      	movs	r3, #3
 80049d0:	e187      	b.n	8004ce2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049d2:	4b1b      	ldr	r3, [pc, #108]	; (8004a40 <HAL_RCC_OscConfig+0x240>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0302 	and.w	r3, r3, #2
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d1f0      	bne.n	80049c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0308 	and.w	r3, r3, #8
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d036      	beq.n	8004a58 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	695b      	ldr	r3, [r3, #20]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d016      	beq.n	8004a20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049f2:	4b15      	ldr	r3, [pc, #84]	; (8004a48 <HAL_RCC_OscConfig+0x248>)
 80049f4:	2201      	movs	r2, #1
 80049f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049f8:	f7fd f9cc 	bl	8001d94 <HAL_GetTick>
 80049fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049fe:	e008      	b.n	8004a12 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a00:	f7fd f9c8 	bl	8001d94 <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d901      	bls.n	8004a12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e167      	b.n	8004ce2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a12:	4b0b      	ldr	r3, [pc, #44]	; (8004a40 <HAL_RCC_OscConfig+0x240>)
 8004a14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a16:	f003 0302 	and.w	r3, r3, #2
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d0f0      	beq.n	8004a00 <HAL_RCC_OscConfig+0x200>
 8004a1e:	e01b      	b.n	8004a58 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a20:	4b09      	ldr	r3, [pc, #36]	; (8004a48 <HAL_RCC_OscConfig+0x248>)
 8004a22:	2200      	movs	r2, #0
 8004a24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a26:	f7fd f9b5 	bl	8001d94 <HAL_GetTick>
 8004a2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a2c:	e00e      	b.n	8004a4c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a2e:	f7fd f9b1 	bl	8001d94 <HAL_GetTick>
 8004a32:	4602      	mov	r2, r0
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	1ad3      	subs	r3, r2, r3
 8004a38:	2b02      	cmp	r3, #2
 8004a3a:	d907      	bls.n	8004a4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004a3c:	2303      	movs	r3, #3
 8004a3e:	e150      	b.n	8004ce2 <HAL_RCC_OscConfig+0x4e2>
 8004a40:	40023800 	.word	0x40023800
 8004a44:	42470000 	.word	0x42470000
 8004a48:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a4c:	4b88      	ldr	r3, [pc, #544]	; (8004c70 <HAL_RCC_OscConfig+0x470>)
 8004a4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a50:	f003 0302 	and.w	r3, r3, #2
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d1ea      	bne.n	8004a2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0304 	and.w	r3, r3, #4
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	f000 8097 	beq.w	8004b94 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a66:	2300      	movs	r3, #0
 8004a68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a6a:	4b81      	ldr	r3, [pc, #516]	; (8004c70 <HAL_RCC_OscConfig+0x470>)
 8004a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d10f      	bne.n	8004a96 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a76:	2300      	movs	r3, #0
 8004a78:	60bb      	str	r3, [r7, #8]
 8004a7a:	4b7d      	ldr	r3, [pc, #500]	; (8004c70 <HAL_RCC_OscConfig+0x470>)
 8004a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7e:	4a7c      	ldr	r2, [pc, #496]	; (8004c70 <HAL_RCC_OscConfig+0x470>)
 8004a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a84:	6413      	str	r3, [r2, #64]	; 0x40
 8004a86:	4b7a      	ldr	r3, [pc, #488]	; (8004c70 <HAL_RCC_OscConfig+0x470>)
 8004a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a8e:	60bb      	str	r3, [r7, #8]
 8004a90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a92:	2301      	movs	r3, #1
 8004a94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a96:	4b77      	ldr	r3, [pc, #476]	; (8004c74 <HAL_RCC_OscConfig+0x474>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d118      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004aa2:	4b74      	ldr	r3, [pc, #464]	; (8004c74 <HAL_RCC_OscConfig+0x474>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a73      	ldr	r2, [pc, #460]	; (8004c74 <HAL_RCC_OscConfig+0x474>)
 8004aa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004aac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004aae:	f7fd f971 	bl	8001d94 <HAL_GetTick>
 8004ab2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ab4:	e008      	b.n	8004ac8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ab6:	f7fd f96d 	bl	8001d94 <HAL_GetTick>
 8004aba:	4602      	mov	r2, r0
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	1ad3      	subs	r3, r2, r3
 8004ac0:	2b02      	cmp	r3, #2
 8004ac2:	d901      	bls.n	8004ac8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	e10c      	b.n	8004ce2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ac8:	4b6a      	ldr	r3, [pc, #424]	; (8004c74 <HAL_RCC_OscConfig+0x474>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d0f0      	beq.n	8004ab6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d106      	bne.n	8004aea <HAL_RCC_OscConfig+0x2ea>
 8004adc:	4b64      	ldr	r3, [pc, #400]	; (8004c70 <HAL_RCC_OscConfig+0x470>)
 8004ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ae0:	4a63      	ldr	r2, [pc, #396]	; (8004c70 <HAL_RCC_OscConfig+0x470>)
 8004ae2:	f043 0301 	orr.w	r3, r3, #1
 8004ae6:	6713      	str	r3, [r2, #112]	; 0x70
 8004ae8:	e01c      	b.n	8004b24 <HAL_RCC_OscConfig+0x324>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	2b05      	cmp	r3, #5
 8004af0:	d10c      	bne.n	8004b0c <HAL_RCC_OscConfig+0x30c>
 8004af2:	4b5f      	ldr	r3, [pc, #380]	; (8004c70 <HAL_RCC_OscConfig+0x470>)
 8004af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af6:	4a5e      	ldr	r2, [pc, #376]	; (8004c70 <HAL_RCC_OscConfig+0x470>)
 8004af8:	f043 0304 	orr.w	r3, r3, #4
 8004afc:	6713      	str	r3, [r2, #112]	; 0x70
 8004afe:	4b5c      	ldr	r3, [pc, #368]	; (8004c70 <HAL_RCC_OscConfig+0x470>)
 8004b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b02:	4a5b      	ldr	r2, [pc, #364]	; (8004c70 <HAL_RCC_OscConfig+0x470>)
 8004b04:	f043 0301 	orr.w	r3, r3, #1
 8004b08:	6713      	str	r3, [r2, #112]	; 0x70
 8004b0a:	e00b      	b.n	8004b24 <HAL_RCC_OscConfig+0x324>
 8004b0c:	4b58      	ldr	r3, [pc, #352]	; (8004c70 <HAL_RCC_OscConfig+0x470>)
 8004b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b10:	4a57      	ldr	r2, [pc, #348]	; (8004c70 <HAL_RCC_OscConfig+0x470>)
 8004b12:	f023 0301 	bic.w	r3, r3, #1
 8004b16:	6713      	str	r3, [r2, #112]	; 0x70
 8004b18:	4b55      	ldr	r3, [pc, #340]	; (8004c70 <HAL_RCC_OscConfig+0x470>)
 8004b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b1c:	4a54      	ldr	r2, [pc, #336]	; (8004c70 <HAL_RCC_OscConfig+0x470>)
 8004b1e:	f023 0304 	bic.w	r3, r3, #4
 8004b22:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d015      	beq.n	8004b58 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b2c:	f7fd f932 	bl	8001d94 <HAL_GetTick>
 8004b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b32:	e00a      	b.n	8004b4a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b34:	f7fd f92e 	bl	8001d94 <HAL_GetTick>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d901      	bls.n	8004b4a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e0cb      	b.n	8004ce2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b4a:	4b49      	ldr	r3, [pc, #292]	; (8004c70 <HAL_RCC_OscConfig+0x470>)
 8004b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b4e:	f003 0302 	and.w	r3, r3, #2
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d0ee      	beq.n	8004b34 <HAL_RCC_OscConfig+0x334>
 8004b56:	e014      	b.n	8004b82 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b58:	f7fd f91c 	bl	8001d94 <HAL_GetTick>
 8004b5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b5e:	e00a      	b.n	8004b76 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b60:	f7fd f918 	bl	8001d94 <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d901      	bls.n	8004b76 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004b72:	2303      	movs	r3, #3
 8004b74:	e0b5      	b.n	8004ce2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b76:	4b3e      	ldr	r3, [pc, #248]	; (8004c70 <HAL_RCC_OscConfig+0x470>)
 8004b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b7a:	f003 0302 	and.w	r3, r3, #2
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d1ee      	bne.n	8004b60 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b82:	7dfb      	ldrb	r3, [r7, #23]
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d105      	bne.n	8004b94 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b88:	4b39      	ldr	r3, [pc, #228]	; (8004c70 <HAL_RCC_OscConfig+0x470>)
 8004b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8c:	4a38      	ldr	r2, [pc, #224]	; (8004c70 <HAL_RCC_OscConfig+0x470>)
 8004b8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b92:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	699b      	ldr	r3, [r3, #24]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	f000 80a1 	beq.w	8004ce0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b9e:	4b34      	ldr	r3, [pc, #208]	; (8004c70 <HAL_RCC_OscConfig+0x470>)
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	f003 030c 	and.w	r3, r3, #12
 8004ba6:	2b08      	cmp	r3, #8
 8004ba8:	d05c      	beq.n	8004c64 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	699b      	ldr	r3, [r3, #24]
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d141      	bne.n	8004c36 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bb2:	4b31      	ldr	r3, [pc, #196]	; (8004c78 <HAL_RCC_OscConfig+0x478>)
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bb8:	f7fd f8ec 	bl	8001d94 <HAL_GetTick>
 8004bbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bbe:	e008      	b.n	8004bd2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bc0:	f7fd f8e8 	bl	8001d94 <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d901      	bls.n	8004bd2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e087      	b.n	8004ce2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bd2:	4b27      	ldr	r3, [pc, #156]	; (8004c70 <HAL_RCC_OscConfig+0x470>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d1f0      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	69da      	ldr	r2, [r3, #28]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a1b      	ldr	r3, [r3, #32]
 8004be6:	431a      	orrs	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bec:	019b      	lsls	r3, r3, #6
 8004bee:	431a      	orrs	r2, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf4:	085b      	lsrs	r3, r3, #1
 8004bf6:	3b01      	subs	r3, #1
 8004bf8:	041b      	lsls	r3, r3, #16
 8004bfa:	431a      	orrs	r2, r3
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c00:	061b      	lsls	r3, r3, #24
 8004c02:	491b      	ldr	r1, [pc, #108]	; (8004c70 <HAL_RCC_OscConfig+0x470>)
 8004c04:	4313      	orrs	r3, r2
 8004c06:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c08:	4b1b      	ldr	r3, [pc, #108]	; (8004c78 <HAL_RCC_OscConfig+0x478>)
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c0e:	f7fd f8c1 	bl	8001d94 <HAL_GetTick>
 8004c12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c14:	e008      	b.n	8004c28 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c16:	f7fd f8bd 	bl	8001d94 <HAL_GetTick>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d901      	bls.n	8004c28 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	e05c      	b.n	8004ce2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c28:	4b11      	ldr	r3, [pc, #68]	; (8004c70 <HAL_RCC_OscConfig+0x470>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d0f0      	beq.n	8004c16 <HAL_RCC_OscConfig+0x416>
 8004c34:	e054      	b.n	8004ce0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c36:	4b10      	ldr	r3, [pc, #64]	; (8004c78 <HAL_RCC_OscConfig+0x478>)
 8004c38:	2200      	movs	r2, #0
 8004c3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c3c:	f7fd f8aa 	bl	8001d94 <HAL_GetTick>
 8004c40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c42:	e008      	b.n	8004c56 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c44:	f7fd f8a6 	bl	8001d94 <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d901      	bls.n	8004c56 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e045      	b.n	8004ce2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c56:	4b06      	ldr	r3, [pc, #24]	; (8004c70 <HAL_RCC_OscConfig+0x470>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d1f0      	bne.n	8004c44 <HAL_RCC_OscConfig+0x444>
 8004c62:	e03d      	b.n	8004ce0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	699b      	ldr	r3, [r3, #24]
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d107      	bne.n	8004c7c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e038      	b.n	8004ce2 <HAL_RCC_OscConfig+0x4e2>
 8004c70:	40023800 	.word	0x40023800
 8004c74:	40007000 	.word	0x40007000
 8004c78:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c7c:	4b1b      	ldr	r3, [pc, #108]	; (8004cec <HAL_RCC_OscConfig+0x4ec>)
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	699b      	ldr	r3, [r3, #24]
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d028      	beq.n	8004cdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d121      	bne.n	8004cdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d11a      	bne.n	8004cdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ca6:	68fa      	ldr	r2, [r7, #12]
 8004ca8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004cac:	4013      	ands	r3, r2
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004cb2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d111      	bne.n	8004cdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc2:	085b      	lsrs	r3, r3, #1
 8004cc4:	3b01      	subs	r3, #1
 8004cc6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d107      	bne.n	8004cdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d001      	beq.n	8004ce0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e000      	b.n	8004ce2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3718      	adds	r7, #24
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	40023800 	.word	0x40023800

08004cf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d101      	bne.n	8004d04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e0cc      	b.n	8004e9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d04:	4b68      	ldr	r3, [pc, #416]	; (8004ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0307 	and.w	r3, r3, #7
 8004d0c:	683a      	ldr	r2, [r7, #0]
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d90c      	bls.n	8004d2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d12:	4b65      	ldr	r3, [pc, #404]	; (8004ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d14:	683a      	ldr	r2, [r7, #0]
 8004d16:	b2d2      	uxtb	r2, r2
 8004d18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d1a:	4b63      	ldr	r3, [pc, #396]	; (8004ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 0307 	and.w	r3, r3, #7
 8004d22:	683a      	ldr	r2, [r7, #0]
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d001      	beq.n	8004d2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e0b8      	b.n	8004e9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 0302 	and.w	r3, r3, #2
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d020      	beq.n	8004d7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0304 	and.w	r3, r3, #4
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d005      	beq.n	8004d50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d44:	4b59      	ldr	r3, [pc, #356]	; (8004eac <HAL_RCC_ClockConfig+0x1bc>)
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	4a58      	ldr	r2, [pc, #352]	; (8004eac <HAL_RCC_ClockConfig+0x1bc>)
 8004d4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 0308 	and.w	r3, r3, #8
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d005      	beq.n	8004d68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d5c:	4b53      	ldr	r3, [pc, #332]	; (8004eac <HAL_RCC_ClockConfig+0x1bc>)
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	4a52      	ldr	r2, [pc, #328]	; (8004eac <HAL_RCC_ClockConfig+0x1bc>)
 8004d62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d68:	4b50      	ldr	r3, [pc, #320]	; (8004eac <HAL_RCC_ClockConfig+0x1bc>)
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	494d      	ldr	r1, [pc, #308]	; (8004eac <HAL_RCC_ClockConfig+0x1bc>)
 8004d76:	4313      	orrs	r3, r2
 8004d78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0301 	and.w	r3, r3, #1
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d044      	beq.n	8004e10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d107      	bne.n	8004d9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d8e:	4b47      	ldr	r3, [pc, #284]	; (8004eac <HAL_RCC_ClockConfig+0x1bc>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d119      	bne.n	8004dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e07f      	b.n	8004e9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	2b02      	cmp	r3, #2
 8004da4:	d003      	beq.n	8004dae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004daa:	2b03      	cmp	r3, #3
 8004dac:	d107      	bne.n	8004dbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dae:	4b3f      	ldr	r3, [pc, #252]	; (8004eac <HAL_RCC_ClockConfig+0x1bc>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d109      	bne.n	8004dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e06f      	b.n	8004e9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dbe:	4b3b      	ldr	r3, [pc, #236]	; (8004eac <HAL_RCC_ClockConfig+0x1bc>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 0302 	and.w	r3, r3, #2
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d101      	bne.n	8004dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e067      	b.n	8004e9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004dce:	4b37      	ldr	r3, [pc, #220]	; (8004eac <HAL_RCC_ClockConfig+0x1bc>)
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	f023 0203 	bic.w	r2, r3, #3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	4934      	ldr	r1, [pc, #208]	; (8004eac <HAL_RCC_ClockConfig+0x1bc>)
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004de0:	f7fc ffd8 	bl	8001d94 <HAL_GetTick>
 8004de4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004de6:	e00a      	b.n	8004dfe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004de8:	f7fc ffd4 	bl	8001d94 <HAL_GetTick>
 8004dec:	4602      	mov	r2, r0
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d901      	bls.n	8004dfe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e04f      	b.n	8004e9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dfe:	4b2b      	ldr	r3, [pc, #172]	; (8004eac <HAL_RCC_ClockConfig+0x1bc>)
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	f003 020c 	and.w	r2, r3, #12
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d1eb      	bne.n	8004de8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e10:	4b25      	ldr	r3, [pc, #148]	; (8004ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 0307 	and.w	r3, r3, #7
 8004e18:	683a      	ldr	r2, [r7, #0]
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d20c      	bcs.n	8004e38 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e1e:	4b22      	ldr	r3, [pc, #136]	; (8004ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e20:	683a      	ldr	r2, [r7, #0]
 8004e22:	b2d2      	uxtb	r2, r2
 8004e24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e26:	4b20      	ldr	r3, [pc, #128]	; (8004ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 0307 	and.w	r3, r3, #7
 8004e2e:	683a      	ldr	r2, [r7, #0]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d001      	beq.n	8004e38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e032      	b.n	8004e9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 0304 	and.w	r3, r3, #4
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d008      	beq.n	8004e56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e44:	4b19      	ldr	r3, [pc, #100]	; (8004eac <HAL_RCC_ClockConfig+0x1bc>)
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	4916      	ldr	r1, [pc, #88]	; (8004eac <HAL_RCC_ClockConfig+0x1bc>)
 8004e52:	4313      	orrs	r3, r2
 8004e54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 0308 	and.w	r3, r3, #8
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d009      	beq.n	8004e76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e62:	4b12      	ldr	r3, [pc, #72]	; (8004eac <HAL_RCC_ClockConfig+0x1bc>)
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	691b      	ldr	r3, [r3, #16]
 8004e6e:	00db      	lsls	r3, r3, #3
 8004e70:	490e      	ldr	r1, [pc, #56]	; (8004eac <HAL_RCC_ClockConfig+0x1bc>)
 8004e72:	4313      	orrs	r3, r2
 8004e74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e76:	f000 f821 	bl	8004ebc <HAL_RCC_GetSysClockFreq>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	4b0b      	ldr	r3, [pc, #44]	; (8004eac <HAL_RCC_ClockConfig+0x1bc>)
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	091b      	lsrs	r3, r3, #4
 8004e82:	f003 030f 	and.w	r3, r3, #15
 8004e86:	490a      	ldr	r1, [pc, #40]	; (8004eb0 <HAL_RCC_ClockConfig+0x1c0>)
 8004e88:	5ccb      	ldrb	r3, [r1, r3]
 8004e8a:	fa22 f303 	lsr.w	r3, r2, r3
 8004e8e:	4a09      	ldr	r2, [pc, #36]	; (8004eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8004e90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e92:	4b09      	ldr	r3, [pc, #36]	; (8004eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4618      	mov	r0, r3
 8004e98:	f7fc ff38 	bl	8001d0c <HAL_InitTick>

  return HAL_OK;
 8004e9c:	2300      	movs	r3, #0
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3710      	adds	r7, #16
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	40023c00 	.word	0x40023c00
 8004eac:	40023800 	.word	0x40023800
 8004eb0:	0800d418 	.word	0x0800d418
 8004eb4:	20000000 	.word	0x20000000
 8004eb8:	20000004 	.word	0x20000004

08004ebc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ebc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ec0:	b090      	sub	sp, #64	; 0x40
 8004ec2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	637b      	str	r3, [r7, #52]	; 0x34
 8004ec8:	2300      	movs	r3, #0
 8004eca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ecc:	2300      	movs	r3, #0
 8004ece:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ed4:	4b59      	ldr	r3, [pc, #356]	; (800503c <HAL_RCC_GetSysClockFreq+0x180>)
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	f003 030c 	and.w	r3, r3, #12
 8004edc:	2b08      	cmp	r3, #8
 8004ede:	d00d      	beq.n	8004efc <HAL_RCC_GetSysClockFreq+0x40>
 8004ee0:	2b08      	cmp	r3, #8
 8004ee2:	f200 80a1 	bhi.w	8005028 <HAL_RCC_GetSysClockFreq+0x16c>
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d002      	beq.n	8004ef0 <HAL_RCC_GetSysClockFreq+0x34>
 8004eea:	2b04      	cmp	r3, #4
 8004eec:	d003      	beq.n	8004ef6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004eee:	e09b      	b.n	8005028 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ef0:	4b53      	ldr	r3, [pc, #332]	; (8005040 <HAL_RCC_GetSysClockFreq+0x184>)
 8004ef2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004ef4:	e09b      	b.n	800502e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ef6:	4b53      	ldr	r3, [pc, #332]	; (8005044 <HAL_RCC_GetSysClockFreq+0x188>)
 8004ef8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004efa:	e098      	b.n	800502e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004efc:	4b4f      	ldr	r3, [pc, #316]	; (800503c <HAL_RCC_GetSysClockFreq+0x180>)
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f04:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f06:	4b4d      	ldr	r3, [pc, #308]	; (800503c <HAL_RCC_GetSysClockFreq+0x180>)
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d028      	beq.n	8004f64 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f12:	4b4a      	ldr	r3, [pc, #296]	; (800503c <HAL_RCC_GetSysClockFreq+0x180>)
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	099b      	lsrs	r3, r3, #6
 8004f18:	2200      	movs	r2, #0
 8004f1a:	623b      	str	r3, [r7, #32]
 8004f1c:	627a      	str	r2, [r7, #36]	; 0x24
 8004f1e:	6a3b      	ldr	r3, [r7, #32]
 8004f20:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004f24:	2100      	movs	r1, #0
 8004f26:	4b47      	ldr	r3, [pc, #284]	; (8005044 <HAL_RCC_GetSysClockFreq+0x188>)
 8004f28:	fb03 f201 	mul.w	r2, r3, r1
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	fb00 f303 	mul.w	r3, r0, r3
 8004f32:	4413      	add	r3, r2
 8004f34:	4a43      	ldr	r2, [pc, #268]	; (8005044 <HAL_RCC_GetSysClockFreq+0x188>)
 8004f36:	fba0 1202 	umull	r1, r2, r0, r2
 8004f3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f3c:	460a      	mov	r2, r1
 8004f3e:	62ba      	str	r2, [r7, #40]	; 0x28
 8004f40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f42:	4413      	add	r3, r2
 8004f44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f48:	2200      	movs	r2, #0
 8004f4a:	61bb      	str	r3, [r7, #24]
 8004f4c:	61fa      	str	r2, [r7, #28]
 8004f4e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f52:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004f56:	f7fb fe7f 	bl	8000c58 <__aeabi_uldivmod>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	460b      	mov	r3, r1
 8004f5e:	4613      	mov	r3, r2
 8004f60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f62:	e053      	b.n	800500c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f64:	4b35      	ldr	r3, [pc, #212]	; (800503c <HAL_RCC_GetSysClockFreq+0x180>)
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	099b      	lsrs	r3, r3, #6
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	613b      	str	r3, [r7, #16]
 8004f6e:	617a      	str	r2, [r7, #20]
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004f76:	f04f 0b00 	mov.w	fp, #0
 8004f7a:	4652      	mov	r2, sl
 8004f7c:	465b      	mov	r3, fp
 8004f7e:	f04f 0000 	mov.w	r0, #0
 8004f82:	f04f 0100 	mov.w	r1, #0
 8004f86:	0159      	lsls	r1, r3, #5
 8004f88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f8c:	0150      	lsls	r0, r2, #5
 8004f8e:	4602      	mov	r2, r0
 8004f90:	460b      	mov	r3, r1
 8004f92:	ebb2 080a 	subs.w	r8, r2, sl
 8004f96:	eb63 090b 	sbc.w	r9, r3, fp
 8004f9a:	f04f 0200 	mov.w	r2, #0
 8004f9e:	f04f 0300 	mov.w	r3, #0
 8004fa2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004fa6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004faa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004fae:	ebb2 0408 	subs.w	r4, r2, r8
 8004fb2:	eb63 0509 	sbc.w	r5, r3, r9
 8004fb6:	f04f 0200 	mov.w	r2, #0
 8004fba:	f04f 0300 	mov.w	r3, #0
 8004fbe:	00eb      	lsls	r3, r5, #3
 8004fc0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004fc4:	00e2      	lsls	r2, r4, #3
 8004fc6:	4614      	mov	r4, r2
 8004fc8:	461d      	mov	r5, r3
 8004fca:	eb14 030a 	adds.w	r3, r4, sl
 8004fce:	603b      	str	r3, [r7, #0]
 8004fd0:	eb45 030b 	adc.w	r3, r5, fp
 8004fd4:	607b      	str	r3, [r7, #4]
 8004fd6:	f04f 0200 	mov.w	r2, #0
 8004fda:	f04f 0300 	mov.w	r3, #0
 8004fde:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004fe2:	4629      	mov	r1, r5
 8004fe4:	028b      	lsls	r3, r1, #10
 8004fe6:	4621      	mov	r1, r4
 8004fe8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004fec:	4621      	mov	r1, r4
 8004fee:	028a      	lsls	r2, r1, #10
 8004ff0:	4610      	mov	r0, r2
 8004ff2:	4619      	mov	r1, r3
 8004ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	60bb      	str	r3, [r7, #8]
 8004ffa:	60fa      	str	r2, [r7, #12]
 8004ffc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005000:	f7fb fe2a 	bl	8000c58 <__aeabi_uldivmod>
 8005004:	4602      	mov	r2, r0
 8005006:	460b      	mov	r3, r1
 8005008:	4613      	mov	r3, r2
 800500a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800500c:	4b0b      	ldr	r3, [pc, #44]	; (800503c <HAL_RCC_GetSysClockFreq+0x180>)
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	0c1b      	lsrs	r3, r3, #16
 8005012:	f003 0303 	and.w	r3, r3, #3
 8005016:	3301      	adds	r3, #1
 8005018:	005b      	lsls	r3, r3, #1
 800501a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800501c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800501e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005020:	fbb2 f3f3 	udiv	r3, r2, r3
 8005024:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005026:	e002      	b.n	800502e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005028:	4b05      	ldr	r3, [pc, #20]	; (8005040 <HAL_RCC_GetSysClockFreq+0x184>)
 800502a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800502c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800502e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005030:	4618      	mov	r0, r3
 8005032:	3740      	adds	r7, #64	; 0x40
 8005034:	46bd      	mov	sp, r7
 8005036:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800503a:	bf00      	nop
 800503c:	40023800 	.word	0x40023800
 8005040:	00f42400 	.word	0x00f42400
 8005044:	017d7840 	.word	0x017d7840

08005048 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005048:	b480      	push	{r7}
 800504a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800504c:	4b03      	ldr	r3, [pc, #12]	; (800505c <HAL_RCC_GetHCLKFreq+0x14>)
 800504e:	681b      	ldr	r3, [r3, #0]
}
 8005050:	4618      	mov	r0, r3
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr
 800505a:	bf00      	nop
 800505c:	20000000 	.word	0x20000000

08005060 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005064:	f7ff fff0 	bl	8005048 <HAL_RCC_GetHCLKFreq>
 8005068:	4602      	mov	r2, r0
 800506a:	4b05      	ldr	r3, [pc, #20]	; (8005080 <HAL_RCC_GetPCLK1Freq+0x20>)
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	0a9b      	lsrs	r3, r3, #10
 8005070:	f003 0307 	and.w	r3, r3, #7
 8005074:	4903      	ldr	r1, [pc, #12]	; (8005084 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005076:	5ccb      	ldrb	r3, [r1, r3]
 8005078:	fa22 f303 	lsr.w	r3, r2, r3
}
 800507c:	4618      	mov	r0, r3
 800507e:	bd80      	pop	{r7, pc}
 8005080:	40023800 	.word	0x40023800
 8005084:	0800d428 	.word	0x0800d428

08005088 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005088:	b084      	sub	sp, #16
 800508a:	b580      	push	{r7, lr}
 800508c:	b084      	sub	sp, #16
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]
 8005092:	f107 001c 	add.w	r0, r7, #28
 8005096:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800509a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800509c:	2b01      	cmp	r3, #1
 800509e:	d122      	bne.n	80050e6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80050b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80050c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d105      	bne.n	80050da <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f001 fbee 	bl	80068bc <USB_CoreReset>
 80050e0:	4603      	mov	r3, r0
 80050e2:	73fb      	strb	r3, [r7, #15]
 80050e4:	e01a      	b.n	800511c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f001 fbe2 	bl	80068bc <USB_CoreReset>
 80050f8:	4603      	mov	r3, r0
 80050fa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80050fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d106      	bne.n	8005110 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005106:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	639a      	str	r2, [r3, #56]	; 0x38
 800510e:	e005      	b.n	800511c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005114:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800511c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800511e:	2b01      	cmp	r3, #1
 8005120:	d10b      	bne.n	800513a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	f043 0206 	orr.w	r2, r3, #6
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f043 0220 	orr.w	r2, r3, #32
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800513a:	7bfb      	ldrb	r3, [r7, #15]
}
 800513c:	4618      	mov	r0, r3
 800513e:	3710      	adds	r7, #16
 8005140:	46bd      	mov	sp, r7
 8005142:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005146:	b004      	add	sp, #16
 8005148:	4770      	bx	lr
	...

0800514c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800514c:	b480      	push	{r7}
 800514e:	b087      	sub	sp, #28
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	4613      	mov	r3, r2
 8005158:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800515a:	79fb      	ldrb	r3, [r7, #7]
 800515c:	2b02      	cmp	r3, #2
 800515e:	d165      	bne.n	800522c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	4a41      	ldr	r2, [pc, #260]	; (8005268 <USB_SetTurnaroundTime+0x11c>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d906      	bls.n	8005176 <USB_SetTurnaroundTime+0x2a>
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	4a40      	ldr	r2, [pc, #256]	; (800526c <USB_SetTurnaroundTime+0x120>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d202      	bcs.n	8005176 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005170:	230f      	movs	r3, #15
 8005172:	617b      	str	r3, [r7, #20]
 8005174:	e062      	b.n	800523c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	4a3c      	ldr	r2, [pc, #240]	; (800526c <USB_SetTurnaroundTime+0x120>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d306      	bcc.n	800518c <USB_SetTurnaroundTime+0x40>
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	4a3b      	ldr	r2, [pc, #236]	; (8005270 <USB_SetTurnaroundTime+0x124>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d202      	bcs.n	800518c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005186:	230e      	movs	r3, #14
 8005188:	617b      	str	r3, [r7, #20]
 800518a:	e057      	b.n	800523c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	4a38      	ldr	r2, [pc, #224]	; (8005270 <USB_SetTurnaroundTime+0x124>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d306      	bcc.n	80051a2 <USB_SetTurnaroundTime+0x56>
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	4a37      	ldr	r2, [pc, #220]	; (8005274 <USB_SetTurnaroundTime+0x128>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d202      	bcs.n	80051a2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800519c:	230d      	movs	r3, #13
 800519e:	617b      	str	r3, [r7, #20]
 80051a0:	e04c      	b.n	800523c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	4a33      	ldr	r2, [pc, #204]	; (8005274 <USB_SetTurnaroundTime+0x128>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d306      	bcc.n	80051b8 <USB_SetTurnaroundTime+0x6c>
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	4a32      	ldr	r2, [pc, #200]	; (8005278 <USB_SetTurnaroundTime+0x12c>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d802      	bhi.n	80051b8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80051b2:	230c      	movs	r3, #12
 80051b4:	617b      	str	r3, [r7, #20]
 80051b6:	e041      	b.n	800523c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	4a2f      	ldr	r2, [pc, #188]	; (8005278 <USB_SetTurnaroundTime+0x12c>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d906      	bls.n	80051ce <USB_SetTurnaroundTime+0x82>
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	4a2e      	ldr	r2, [pc, #184]	; (800527c <USB_SetTurnaroundTime+0x130>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d802      	bhi.n	80051ce <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80051c8:	230b      	movs	r3, #11
 80051ca:	617b      	str	r3, [r7, #20]
 80051cc:	e036      	b.n	800523c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	4a2a      	ldr	r2, [pc, #168]	; (800527c <USB_SetTurnaroundTime+0x130>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d906      	bls.n	80051e4 <USB_SetTurnaroundTime+0x98>
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	4a29      	ldr	r2, [pc, #164]	; (8005280 <USB_SetTurnaroundTime+0x134>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d802      	bhi.n	80051e4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80051de:	230a      	movs	r3, #10
 80051e0:	617b      	str	r3, [r7, #20]
 80051e2:	e02b      	b.n	800523c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	4a26      	ldr	r2, [pc, #152]	; (8005280 <USB_SetTurnaroundTime+0x134>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d906      	bls.n	80051fa <USB_SetTurnaroundTime+0xae>
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	4a25      	ldr	r2, [pc, #148]	; (8005284 <USB_SetTurnaroundTime+0x138>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d202      	bcs.n	80051fa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80051f4:	2309      	movs	r3, #9
 80051f6:	617b      	str	r3, [r7, #20]
 80051f8:	e020      	b.n	800523c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	4a21      	ldr	r2, [pc, #132]	; (8005284 <USB_SetTurnaroundTime+0x138>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d306      	bcc.n	8005210 <USB_SetTurnaroundTime+0xc4>
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	4a20      	ldr	r2, [pc, #128]	; (8005288 <USB_SetTurnaroundTime+0x13c>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d802      	bhi.n	8005210 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800520a:	2308      	movs	r3, #8
 800520c:	617b      	str	r3, [r7, #20]
 800520e:	e015      	b.n	800523c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	4a1d      	ldr	r2, [pc, #116]	; (8005288 <USB_SetTurnaroundTime+0x13c>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d906      	bls.n	8005226 <USB_SetTurnaroundTime+0xda>
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	4a1c      	ldr	r2, [pc, #112]	; (800528c <USB_SetTurnaroundTime+0x140>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d202      	bcs.n	8005226 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005220:	2307      	movs	r3, #7
 8005222:	617b      	str	r3, [r7, #20]
 8005224:	e00a      	b.n	800523c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005226:	2306      	movs	r3, #6
 8005228:	617b      	str	r3, [r7, #20]
 800522a:	e007      	b.n	800523c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800522c:	79fb      	ldrb	r3, [r7, #7]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d102      	bne.n	8005238 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005232:	2309      	movs	r3, #9
 8005234:	617b      	str	r3, [r7, #20]
 8005236:	e001      	b.n	800523c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005238:	2309      	movs	r3, #9
 800523a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	68da      	ldr	r2, [r3, #12]
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	029b      	lsls	r3, r3, #10
 8005250:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005254:	431a      	orrs	r2, r3
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800525a:	2300      	movs	r3, #0
}
 800525c:	4618      	mov	r0, r3
 800525e:	371c      	adds	r7, #28
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr
 8005268:	00d8acbf 	.word	0x00d8acbf
 800526c:	00e4e1c0 	.word	0x00e4e1c0
 8005270:	00f42400 	.word	0x00f42400
 8005274:	01067380 	.word	0x01067380
 8005278:	011a499f 	.word	0x011a499f
 800527c:	01312cff 	.word	0x01312cff
 8005280:	014ca43f 	.word	0x014ca43f
 8005284:	016e3600 	.word	0x016e3600
 8005288:	01a6ab1f 	.word	0x01a6ab1f
 800528c:	01e84800 	.word	0x01e84800

08005290 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	f043 0201 	orr.w	r2, r3, #1
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	370c      	adds	r7, #12
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr

080052b2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80052b2:	b480      	push	{r7}
 80052b4:	b083      	sub	sp, #12
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	f023 0201 	bic.w	r2, r3, #1
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b084      	sub	sp, #16
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	460b      	mov	r3, r1
 80052de:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80052e0:	2300      	movs	r3, #0
 80052e2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80052f0:	78fb      	ldrb	r3, [r7, #3]
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d115      	bne.n	8005322 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005302:	2001      	movs	r0, #1
 8005304:	f7fc fd52 	bl	8001dac <HAL_Delay>
      ms++;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	3301      	adds	r3, #1
 800530c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f001 fa45 	bl	800679e <USB_GetMode>
 8005314:	4603      	mov	r3, r0
 8005316:	2b01      	cmp	r3, #1
 8005318:	d01e      	beq.n	8005358 <USB_SetCurrentMode+0x84>
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2b31      	cmp	r3, #49	; 0x31
 800531e:	d9f0      	bls.n	8005302 <USB_SetCurrentMode+0x2e>
 8005320:	e01a      	b.n	8005358 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005322:	78fb      	ldrb	r3, [r7, #3]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d115      	bne.n	8005354 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005334:	2001      	movs	r0, #1
 8005336:	f7fc fd39 	bl	8001dac <HAL_Delay>
      ms++;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	3301      	adds	r3, #1
 800533e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f001 fa2c 	bl	800679e <USB_GetMode>
 8005346:	4603      	mov	r3, r0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d005      	beq.n	8005358 <USB_SetCurrentMode+0x84>
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2b31      	cmp	r3, #49	; 0x31
 8005350:	d9f0      	bls.n	8005334 <USB_SetCurrentMode+0x60>
 8005352:	e001      	b.n	8005358 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e005      	b.n	8005364 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2b32      	cmp	r3, #50	; 0x32
 800535c:	d101      	bne.n	8005362 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e000      	b.n	8005364 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005362:	2300      	movs	r3, #0
}
 8005364:	4618      	mov	r0, r3
 8005366:	3710      	adds	r7, #16
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800536c:	b084      	sub	sp, #16
 800536e:	b580      	push	{r7, lr}
 8005370:	b086      	sub	sp, #24
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
 8005376:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800537a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800537e:	2300      	movs	r3, #0
 8005380:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005386:	2300      	movs	r3, #0
 8005388:	613b      	str	r3, [r7, #16]
 800538a:	e009      	b.n	80053a0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	3340      	adds	r3, #64	; 0x40
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	4413      	add	r3, r2
 8005396:	2200      	movs	r2, #0
 8005398:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	3301      	adds	r3, #1
 800539e:	613b      	str	r3, [r7, #16]
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	2b0e      	cmp	r3, #14
 80053a4:	d9f2      	bls.n	800538c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80053a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d11c      	bne.n	80053e6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053ba:	f043 0302 	orr.w	r3, r3, #2
 80053be:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053dc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	639a      	str	r2, [r3, #56]	; 0x38
 80053e4:	e00b      	b.n	80053fe <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ea:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005404:	461a      	mov	r2, r3
 8005406:	2300      	movs	r3, #0
 8005408:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005410:	4619      	mov	r1, r3
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005418:	461a      	mov	r2, r3
 800541a:	680b      	ldr	r3, [r1, #0]
 800541c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800541e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005420:	2b01      	cmp	r3, #1
 8005422:	d10c      	bne.n	800543e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005426:	2b00      	cmp	r3, #0
 8005428:	d104      	bne.n	8005434 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800542a:	2100      	movs	r1, #0
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 f965 	bl	80056fc <USB_SetDevSpeed>
 8005432:	e008      	b.n	8005446 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005434:	2101      	movs	r1, #1
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 f960 	bl	80056fc <USB_SetDevSpeed>
 800543c:	e003      	b.n	8005446 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800543e:	2103      	movs	r1, #3
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f000 f95b 	bl	80056fc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005446:	2110      	movs	r1, #16
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f000 f8f3 	bl	8005634 <USB_FlushTxFifo>
 800544e:	4603      	mov	r3, r0
 8005450:	2b00      	cmp	r3, #0
 8005452:	d001      	beq.n	8005458 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f000 f91f 	bl	800569c <USB_FlushRxFifo>
 800545e:	4603      	mov	r3, r0
 8005460:	2b00      	cmp	r3, #0
 8005462:	d001      	beq.n	8005468 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800546e:	461a      	mov	r2, r3
 8005470:	2300      	movs	r3, #0
 8005472:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800547a:	461a      	mov	r2, r3
 800547c:	2300      	movs	r3, #0
 800547e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005486:	461a      	mov	r2, r3
 8005488:	2300      	movs	r3, #0
 800548a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800548c:	2300      	movs	r3, #0
 800548e:	613b      	str	r3, [r7, #16]
 8005490:	e043      	b.n	800551a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	015a      	lsls	r2, r3, #5
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	4413      	add	r3, r2
 800549a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054a8:	d118      	bne.n	80054dc <USB_DevInit+0x170>
    {
      if (i == 0U)
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d10a      	bne.n	80054c6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	015a      	lsls	r2, r3, #5
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	4413      	add	r3, r2
 80054b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054bc:	461a      	mov	r2, r3
 80054be:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80054c2:	6013      	str	r3, [r2, #0]
 80054c4:	e013      	b.n	80054ee <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	015a      	lsls	r2, r3, #5
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	4413      	add	r3, r2
 80054ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054d2:	461a      	mov	r2, r3
 80054d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80054d8:	6013      	str	r3, [r2, #0]
 80054da:	e008      	b.n	80054ee <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	015a      	lsls	r2, r3, #5
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	4413      	add	r3, r2
 80054e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054e8:	461a      	mov	r2, r3
 80054ea:	2300      	movs	r3, #0
 80054ec:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	015a      	lsls	r2, r3, #5
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	4413      	add	r3, r2
 80054f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054fa:	461a      	mov	r2, r3
 80054fc:	2300      	movs	r3, #0
 80054fe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	015a      	lsls	r2, r3, #5
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	4413      	add	r3, r2
 8005508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800550c:	461a      	mov	r2, r3
 800550e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005512:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	3301      	adds	r3, #1
 8005518:	613b      	str	r3, [r7, #16]
 800551a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551c:	693a      	ldr	r2, [r7, #16]
 800551e:	429a      	cmp	r2, r3
 8005520:	d3b7      	bcc.n	8005492 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005522:	2300      	movs	r3, #0
 8005524:	613b      	str	r3, [r7, #16]
 8005526:	e043      	b.n	80055b0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	015a      	lsls	r2, r3, #5
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	4413      	add	r3, r2
 8005530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800553a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800553e:	d118      	bne.n	8005572 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d10a      	bne.n	800555c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	015a      	lsls	r2, r3, #5
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	4413      	add	r3, r2
 800554e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005552:	461a      	mov	r2, r3
 8005554:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005558:	6013      	str	r3, [r2, #0]
 800555a:	e013      	b.n	8005584 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	015a      	lsls	r2, r3, #5
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	4413      	add	r3, r2
 8005564:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005568:	461a      	mov	r2, r3
 800556a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800556e:	6013      	str	r3, [r2, #0]
 8005570:	e008      	b.n	8005584 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	015a      	lsls	r2, r3, #5
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	4413      	add	r3, r2
 800557a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800557e:	461a      	mov	r2, r3
 8005580:	2300      	movs	r3, #0
 8005582:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	015a      	lsls	r2, r3, #5
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	4413      	add	r3, r2
 800558c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005590:	461a      	mov	r2, r3
 8005592:	2300      	movs	r3, #0
 8005594:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	015a      	lsls	r2, r3, #5
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	4413      	add	r3, r2
 800559e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055a2:	461a      	mov	r2, r3
 80055a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80055a8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	3301      	adds	r3, #1
 80055ae:	613b      	str	r3, [r7, #16]
 80055b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b2:	693a      	ldr	r2, [r7, #16]
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d3b7      	bcc.n	8005528 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055be:	691b      	ldr	r3, [r3, #16]
 80055c0:	68fa      	ldr	r2, [r7, #12]
 80055c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055ca:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80055d8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80055da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d105      	bne.n	80055ec <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	699b      	ldr	r3, [r3, #24]
 80055e4:	f043 0210 	orr.w	r2, r3, #16
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	699a      	ldr	r2, [r3, #24]
 80055f0:	4b0f      	ldr	r3, [pc, #60]	; (8005630 <USB_DevInit+0x2c4>)
 80055f2:	4313      	orrs	r3, r2
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80055f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d005      	beq.n	800560a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	699b      	ldr	r3, [r3, #24]
 8005602:	f043 0208 	orr.w	r2, r3, #8
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800560a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800560c:	2b01      	cmp	r3, #1
 800560e:	d107      	bne.n	8005620 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	699b      	ldr	r3, [r3, #24]
 8005614:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005618:	f043 0304 	orr.w	r3, r3, #4
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005620:	7dfb      	ldrb	r3, [r7, #23]
}
 8005622:	4618      	mov	r0, r3
 8005624:	3718      	adds	r7, #24
 8005626:	46bd      	mov	sp, r7
 8005628:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800562c:	b004      	add	sp, #16
 800562e:	4770      	bx	lr
 8005630:	803c3800 	.word	0x803c3800

08005634 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005634:	b480      	push	{r7}
 8005636:	b085      	sub	sp, #20
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800563e:	2300      	movs	r3, #0
 8005640:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	3301      	adds	r3, #1
 8005646:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	4a13      	ldr	r2, [pc, #76]	; (8005698 <USB_FlushTxFifo+0x64>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d901      	bls.n	8005654 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005650:	2303      	movs	r3, #3
 8005652:	e01b      	b.n	800568c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	691b      	ldr	r3, [r3, #16]
 8005658:	2b00      	cmp	r3, #0
 800565a:	daf2      	bge.n	8005642 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800565c:	2300      	movs	r3, #0
 800565e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	019b      	lsls	r3, r3, #6
 8005664:	f043 0220 	orr.w	r2, r3, #32
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	3301      	adds	r3, #1
 8005670:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	4a08      	ldr	r2, [pc, #32]	; (8005698 <USB_FlushTxFifo+0x64>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d901      	bls.n	800567e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800567a:	2303      	movs	r3, #3
 800567c:	e006      	b.n	800568c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	f003 0320 	and.w	r3, r3, #32
 8005686:	2b20      	cmp	r3, #32
 8005688:	d0f0      	beq.n	800566c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800568a:	2300      	movs	r3, #0
}
 800568c:	4618      	mov	r0, r3
 800568e:	3714      	adds	r7, #20
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr
 8005698:	00030d40 	.word	0x00030d40

0800569c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800569c:	b480      	push	{r7}
 800569e:	b085      	sub	sp, #20
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80056a4:	2300      	movs	r3, #0
 80056a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	3301      	adds	r3, #1
 80056ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	4a11      	ldr	r2, [pc, #68]	; (80056f8 <USB_FlushRxFifo+0x5c>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d901      	bls.n	80056ba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80056b6:	2303      	movs	r3, #3
 80056b8:	e018      	b.n	80056ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	daf2      	bge.n	80056a8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80056c2:	2300      	movs	r3, #0
 80056c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2210      	movs	r2, #16
 80056ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	3301      	adds	r3, #1
 80056d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	4a08      	ldr	r2, [pc, #32]	; (80056f8 <USB_FlushRxFifo+0x5c>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d901      	bls.n	80056de <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e006      	b.n	80056ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	f003 0310 	and.w	r3, r3, #16
 80056e6:	2b10      	cmp	r3, #16
 80056e8:	d0f0      	beq.n	80056cc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80056ea:	2300      	movs	r3, #0
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3714      	adds	r7, #20
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr
 80056f8:	00030d40 	.word	0x00030d40

080056fc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b085      	sub	sp, #20
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	460b      	mov	r3, r1
 8005706:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	78fb      	ldrb	r3, [r7, #3]
 8005716:	68f9      	ldr	r1, [r7, #12]
 8005718:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800571c:	4313      	orrs	r3, r2
 800571e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005720:	2300      	movs	r3, #0
}
 8005722:	4618      	mov	r0, r3
 8005724:	3714      	adds	r7, #20
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr

0800572e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800572e:	b480      	push	{r7}
 8005730:	b087      	sub	sp, #28
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	f003 0306 	and.w	r3, r3, #6
 8005746:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d102      	bne.n	8005754 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800574e:	2300      	movs	r3, #0
 8005750:	75fb      	strb	r3, [r7, #23]
 8005752:	e00a      	b.n	800576a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2b02      	cmp	r3, #2
 8005758:	d002      	beq.n	8005760 <USB_GetDevSpeed+0x32>
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2b06      	cmp	r3, #6
 800575e:	d102      	bne.n	8005766 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005760:	2302      	movs	r3, #2
 8005762:	75fb      	strb	r3, [r7, #23]
 8005764:	e001      	b.n	800576a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005766:	230f      	movs	r3, #15
 8005768:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800576a:	7dfb      	ldrb	r3, [r7, #23]
}
 800576c:	4618      	mov	r0, r3
 800576e:	371c      	adds	r7, #28
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr

08005778 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005778:	b480      	push	{r7}
 800577a:	b085      	sub	sp, #20
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	781b      	ldrb	r3, [r3, #0]
 800578a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	785b      	ldrb	r3, [r3, #1]
 8005790:	2b01      	cmp	r3, #1
 8005792:	d13a      	bne.n	800580a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800579a:	69da      	ldr	r2, [r3, #28]
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	f003 030f 	and.w	r3, r3, #15
 80057a4:	2101      	movs	r1, #1
 80057a6:	fa01 f303 	lsl.w	r3, r1, r3
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	68f9      	ldr	r1, [r7, #12]
 80057ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057b2:	4313      	orrs	r3, r2
 80057b4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	015a      	lsls	r2, r3, #5
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	4413      	add	r3, r2
 80057be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d155      	bne.n	8005878 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	015a      	lsls	r2, r3, #5
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	4413      	add	r3, r2
 80057d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	791b      	ldrb	r3, [r3, #4]
 80057e6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80057e8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	059b      	lsls	r3, r3, #22
 80057ee:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80057f0:	4313      	orrs	r3, r2
 80057f2:	68ba      	ldr	r2, [r7, #8]
 80057f4:	0151      	lsls	r1, r2, #5
 80057f6:	68fa      	ldr	r2, [r7, #12]
 80057f8:	440a      	add	r2, r1
 80057fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005802:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005806:	6013      	str	r3, [r2, #0]
 8005808:	e036      	b.n	8005878 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005810:	69da      	ldr	r2, [r3, #28]
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	f003 030f 	and.w	r3, r3, #15
 800581a:	2101      	movs	r1, #1
 800581c:	fa01 f303 	lsl.w	r3, r1, r3
 8005820:	041b      	lsls	r3, r3, #16
 8005822:	68f9      	ldr	r1, [r7, #12]
 8005824:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005828:	4313      	orrs	r3, r2
 800582a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	015a      	lsls	r2, r3, #5
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	4413      	add	r3, r2
 8005834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800583e:	2b00      	cmp	r3, #0
 8005840:	d11a      	bne.n	8005878 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	015a      	lsls	r2, r3, #5
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	4413      	add	r3, r2
 800584a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	791b      	ldrb	r3, [r3, #4]
 800585c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800585e:	430b      	orrs	r3, r1
 8005860:	4313      	orrs	r3, r2
 8005862:	68ba      	ldr	r2, [r7, #8]
 8005864:	0151      	lsls	r1, r2, #5
 8005866:	68fa      	ldr	r2, [r7, #12]
 8005868:	440a      	add	r2, r1
 800586a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800586e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005872:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005876:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005878:	2300      	movs	r3, #0
}
 800587a:	4618      	mov	r0, r3
 800587c:	3714      	adds	r7, #20
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr
	...

08005888 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005888:	b480      	push	{r7}
 800588a:	b085      	sub	sp, #20
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	785b      	ldrb	r3, [r3, #1]
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d161      	bne.n	8005968 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	015a      	lsls	r2, r3, #5
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	4413      	add	r3, r2
 80058ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058ba:	d11f      	bne.n	80058fc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	015a      	lsls	r2, r3, #5
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	4413      	add	r3, r2
 80058c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	68ba      	ldr	r2, [r7, #8]
 80058cc:	0151      	lsls	r1, r2, #5
 80058ce:	68fa      	ldr	r2, [r7, #12]
 80058d0:	440a      	add	r2, r1
 80058d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80058da:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	015a      	lsls	r2, r3, #5
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	4413      	add	r3, r2
 80058e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	68ba      	ldr	r2, [r7, #8]
 80058ec:	0151      	lsls	r1, r2, #5
 80058ee:	68fa      	ldr	r2, [r7, #12]
 80058f0:	440a      	add	r2, r1
 80058f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058fa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005902:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	f003 030f 	and.w	r3, r3, #15
 800590c:	2101      	movs	r1, #1
 800590e:	fa01 f303 	lsl.w	r3, r1, r3
 8005912:	b29b      	uxth	r3, r3
 8005914:	43db      	mvns	r3, r3
 8005916:	68f9      	ldr	r1, [r7, #12]
 8005918:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800591c:	4013      	ands	r3, r2
 800591e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005926:	69da      	ldr	r2, [r3, #28]
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	f003 030f 	and.w	r3, r3, #15
 8005930:	2101      	movs	r1, #1
 8005932:	fa01 f303 	lsl.w	r3, r1, r3
 8005936:	b29b      	uxth	r3, r3
 8005938:	43db      	mvns	r3, r3
 800593a:	68f9      	ldr	r1, [r7, #12]
 800593c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005940:	4013      	ands	r3, r2
 8005942:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	015a      	lsls	r2, r3, #5
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	4413      	add	r3, r2
 800594c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	0159      	lsls	r1, r3, #5
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	440b      	add	r3, r1
 800595a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800595e:	4619      	mov	r1, r3
 8005960:	4b35      	ldr	r3, [pc, #212]	; (8005a38 <USB_DeactivateEndpoint+0x1b0>)
 8005962:	4013      	ands	r3, r2
 8005964:	600b      	str	r3, [r1, #0]
 8005966:	e060      	b.n	8005a2a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	015a      	lsls	r2, r3, #5
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	4413      	add	r3, r2
 8005970:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800597a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800597e:	d11f      	bne.n	80059c0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	015a      	lsls	r2, r3, #5
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	4413      	add	r3, r2
 8005988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	68ba      	ldr	r2, [r7, #8]
 8005990:	0151      	lsls	r1, r2, #5
 8005992:	68fa      	ldr	r2, [r7, #12]
 8005994:	440a      	add	r2, r1
 8005996:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800599a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800599e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	015a      	lsls	r2, r3, #5
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	4413      	add	r3, r2
 80059a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	68ba      	ldr	r2, [r7, #8]
 80059b0:	0151      	lsls	r1, r2, #5
 80059b2:	68fa      	ldr	r2, [r7, #12]
 80059b4:	440a      	add	r2, r1
 80059b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80059be:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	f003 030f 	and.w	r3, r3, #15
 80059d0:	2101      	movs	r1, #1
 80059d2:	fa01 f303 	lsl.w	r3, r1, r3
 80059d6:	041b      	lsls	r3, r3, #16
 80059d8:	43db      	mvns	r3, r3
 80059da:	68f9      	ldr	r1, [r7, #12]
 80059dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059e0:	4013      	ands	r3, r2
 80059e2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059ea:	69da      	ldr	r2, [r3, #28]
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	f003 030f 	and.w	r3, r3, #15
 80059f4:	2101      	movs	r1, #1
 80059f6:	fa01 f303 	lsl.w	r3, r1, r3
 80059fa:	041b      	lsls	r3, r3, #16
 80059fc:	43db      	mvns	r3, r3
 80059fe:	68f9      	ldr	r1, [r7, #12]
 8005a00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a04:	4013      	ands	r3, r2
 8005a06:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	015a      	lsls	r2, r3, #5
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	4413      	add	r3, r2
 8005a10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	0159      	lsls	r1, r3, #5
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	440b      	add	r3, r1
 8005a1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a22:	4619      	mov	r1, r3
 8005a24:	4b05      	ldr	r3, [pc, #20]	; (8005a3c <USB_DeactivateEndpoint+0x1b4>)
 8005a26:	4013      	ands	r3, r2
 8005a28:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005a2a:	2300      	movs	r3, #0
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3714      	adds	r7, #20
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr
 8005a38:	ec337800 	.word	0xec337800
 8005a3c:	eff37800 	.word	0xeff37800

08005a40 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b08a      	sub	sp, #40	; 0x28
 8005a44:	af02      	add	r7, sp, #8
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	4613      	mov	r3, r2
 8005a4c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	785b      	ldrb	r3, [r3, #1]
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	f040 815c 	bne.w	8005d1a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	699b      	ldr	r3, [r3, #24]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d132      	bne.n	8005ad0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005a6a:	69bb      	ldr	r3, [r7, #24]
 8005a6c:	015a      	lsls	r2, r3, #5
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	4413      	add	r3, r2
 8005a72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	69ba      	ldr	r2, [r7, #24]
 8005a7a:	0151      	lsls	r1, r2, #5
 8005a7c:	69fa      	ldr	r2, [r7, #28]
 8005a7e:	440a      	add	r2, r1
 8005a80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a84:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a88:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a8c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	015a      	lsls	r2, r3, #5
 8005a92:	69fb      	ldr	r3, [r7, #28]
 8005a94:	4413      	add	r3, r2
 8005a96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a9a:	691b      	ldr	r3, [r3, #16]
 8005a9c:	69ba      	ldr	r2, [r7, #24]
 8005a9e:	0151      	lsls	r1, r2, #5
 8005aa0:	69fa      	ldr	r2, [r7, #28]
 8005aa2:	440a      	add	r2, r1
 8005aa4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aa8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005aac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005aae:	69bb      	ldr	r3, [r7, #24]
 8005ab0:	015a      	lsls	r2, r3, #5
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	4413      	add	r3, r2
 8005ab6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aba:	691b      	ldr	r3, [r3, #16]
 8005abc:	69ba      	ldr	r2, [r7, #24]
 8005abe:	0151      	lsls	r1, r2, #5
 8005ac0:	69fa      	ldr	r2, [r7, #28]
 8005ac2:	440a      	add	r2, r1
 8005ac4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ac8:	0cdb      	lsrs	r3, r3, #19
 8005aca:	04db      	lsls	r3, r3, #19
 8005acc:	6113      	str	r3, [r2, #16]
 8005ace:	e074      	b.n	8005bba <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005ad0:	69bb      	ldr	r3, [r7, #24]
 8005ad2:	015a      	lsls	r2, r3, #5
 8005ad4:	69fb      	ldr	r3, [r7, #28]
 8005ad6:	4413      	add	r3, r2
 8005ad8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	69ba      	ldr	r2, [r7, #24]
 8005ae0:	0151      	lsls	r1, r2, #5
 8005ae2:	69fa      	ldr	r2, [r7, #28]
 8005ae4:	440a      	add	r2, r1
 8005ae6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aea:	0cdb      	lsrs	r3, r3, #19
 8005aec:	04db      	lsls	r3, r3, #19
 8005aee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	015a      	lsls	r2, r3, #5
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	4413      	add	r3, r2
 8005af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	69ba      	ldr	r2, [r7, #24]
 8005b00:	0151      	lsls	r1, r2, #5
 8005b02:	69fa      	ldr	r2, [r7, #28]
 8005b04:	440a      	add	r2, r1
 8005b06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b0a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b0e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b12:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005b14:	69bb      	ldr	r3, [r7, #24]
 8005b16:	015a      	lsls	r2, r3, #5
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	4413      	add	r3, r2
 8005b1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b20:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	6999      	ldr	r1, [r3, #24]
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	68db      	ldr	r3, [r3, #12]
 8005b2a:	440b      	add	r3, r1
 8005b2c:	1e59      	subs	r1, r3, #1
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	68db      	ldr	r3, [r3, #12]
 8005b32:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b36:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005b38:	4b9d      	ldr	r3, [pc, #628]	; (8005db0 <USB_EPStartXfer+0x370>)
 8005b3a:	400b      	ands	r3, r1
 8005b3c:	69b9      	ldr	r1, [r7, #24]
 8005b3e:	0148      	lsls	r0, r1, #5
 8005b40:	69f9      	ldr	r1, [r7, #28]
 8005b42:	4401      	add	r1, r0
 8005b44:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005b4c:	69bb      	ldr	r3, [r7, #24]
 8005b4e:	015a      	lsls	r2, r3, #5
 8005b50:	69fb      	ldr	r3, [r7, #28]
 8005b52:	4413      	add	r3, r2
 8005b54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b58:	691a      	ldr	r2, [r3, #16]
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	699b      	ldr	r3, [r3, #24]
 8005b5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b62:	69b9      	ldr	r1, [r7, #24]
 8005b64:	0148      	lsls	r0, r1, #5
 8005b66:	69f9      	ldr	r1, [r7, #28]
 8005b68:	4401      	add	r1, r0
 8005b6a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	791b      	ldrb	r3, [r3, #4]
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d11f      	bne.n	8005bba <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005b7a:	69bb      	ldr	r3, [r7, #24]
 8005b7c:	015a      	lsls	r2, r3, #5
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	4413      	add	r3, r2
 8005b82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b86:	691b      	ldr	r3, [r3, #16]
 8005b88:	69ba      	ldr	r2, [r7, #24]
 8005b8a:	0151      	lsls	r1, r2, #5
 8005b8c:	69fa      	ldr	r2, [r7, #28]
 8005b8e:	440a      	add	r2, r1
 8005b90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b94:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005b98:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	015a      	lsls	r2, r3, #5
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	4413      	add	r3, r2
 8005ba2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ba6:	691b      	ldr	r3, [r3, #16]
 8005ba8:	69ba      	ldr	r2, [r7, #24]
 8005baa:	0151      	lsls	r1, r2, #5
 8005bac:	69fa      	ldr	r2, [r7, #28]
 8005bae:	440a      	add	r2, r1
 8005bb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bb4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005bb8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005bba:	79fb      	ldrb	r3, [r7, #7]
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d14b      	bne.n	8005c58 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	695b      	ldr	r3, [r3, #20]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d009      	beq.n	8005bdc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005bc8:	69bb      	ldr	r3, [r7, #24]
 8005bca:	015a      	lsls	r2, r3, #5
 8005bcc:	69fb      	ldr	r3, [r7, #28]
 8005bce:	4413      	add	r3, r2
 8005bd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	695b      	ldr	r3, [r3, #20]
 8005bda:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	791b      	ldrb	r3, [r3, #4]
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d128      	bne.n	8005c36 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d110      	bne.n	8005c16 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	015a      	lsls	r2, r3, #5
 8005bf8:	69fb      	ldr	r3, [r7, #28]
 8005bfa:	4413      	add	r3, r2
 8005bfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	69ba      	ldr	r2, [r7, #24]
 8005c04:	0151      	lsls	r1, r2, #5
 8005c06:	69fa      	ldr	r2, [r7, #28]
 8005c08:	440a      	add	r2, r1
 8005c0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c12:	6013      	str	r3, [r2, #0]
 8005c14:	e00f      	b.n	8005c36 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005c16:	69bb      	ldr	r3, [r7, #24]
 8005c18:	015a      	lsls	r2, r3, #5
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	4413      	add	r3, r2
 8005c1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	69ba      	ldr	r2, [r7, #24]
 8005c26:	0151      	lsls	r1, r2, #5
 8005c28:	69fa      	ldr	r2, [r7, #28]
 8005c2a:	440a      	add	r2, r1
 8005c2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c34:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c36:	69bb      	ldr	r3, [r7, #24]
 8005c38:	015a      	lsls	r2, r3, #5
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	69ba      	ldr	r2, [r7, #24]
 8005c46:	0151      	lsls	r1, r2, #5
 8005c48:	69fa      	ldr	r2, [r7, #28]
 8005c4a:	440a      	add	r2, r1
 8005c4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c50:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c54:	6013      	str	r3, [r2, #0]
 8005c56:	e133      	b.n	8005ec0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c58:	69bb      	ldr	r3, [r7, #24]
 8005c5a:	015a      	lsls	r2, r3, #5
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	4413      	add	r3, r2
 8005c60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	69ba      	ldr	r2, [r7, #24]
 8005c68:	0151      	lsls	r1, r2, #5
 8005c6a:	69fa      	ldr	r2, [r7, #28]
 8005c6c:	440a      	add	r2, r1
 8005c6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c72:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c76:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	791b      	ldrb	r3, [r3, #4]
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d015      	beq.n	8005cac <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	699b      	ldr	r3, [r3, #24]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	f000 811b 	beq.w	8005ec0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	f003 030f 	and.w	r3, r3, #15
 8005c9a:	2101      	movs	r1, #1
 8005c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8005ca0:	69f9      	ldr	r1, [r7, #28]
 8005ca2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	634b      	str	r3, [r1, #52]	; 0x34
 8005caa:	e109      	b.n	8005ec0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005cac:	69fb      	ldr	r3, [r7, #28]
 8005cae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d110      	bne.n	8005cde <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005cbc:	69bb      	ldr	r3, [r7, #24]
 8005cbe:	015a      	lsls	r2, r3, #5
 8005cc0:	69fb      	ldr	r3, [r7, #28]
 8005cc2:	4413      	add	r3, r2
 8005cc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	69ba      	ldr	r2, [r7, #24]
 8005ccc:	0151      	lsls	r1, r2, #5
 8005cce:	69fa      	ldr	r2, [r7, #28]
 8005cd0:	440a      	add	r2, r1
 8005cd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cd6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005cda:	6013      	str	r3, [r2, #0]
 8005cdc:	e00f      	b.n	8005cfe <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005cde:	69bb      	ldr	r3, [r7, #24]
 8005ce0:	015a      	lsls	r2, r3, #5
 8005ce2:	69fb      	ldr	r3, [r7, #28]
 8005ce4:	4413      	add	r3, r2
 8005ce6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	69ba      	ldr	r2, [r7, #24]
 8005cee:	0151      	lsls	r1, r2, #5
 8005cf0:	69fa      	ldr	r2, [r7, #28]
 8005cf2:	440a      	add	r2, r1
 8005cf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cfc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	6919      	ldr	r1, [r3, #16]
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	781a      	ldrb	r2, [r3, #0]
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	699b      	ldr	r3, [r3, #24]
 8005d0a:	b298      	uxth	r0, r3
 8005d0c:	79fb      	ldrb	r3, [r7, #7]
 8005d0e:	9300      	str	r3, [sp, #0]
 8005d10:	4603      	mov	r3, r0
 8005d12:	68f8      	ldr	r0, [r7, #12]
 8005d14:	f000 fade 	bl	80062d4 <USB_WritePacket>
 8005d18:	e0d2      	b.n	8005ec0 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005d1a:	69bb      	ldr	r3, [r7, #24]
 8005d1c:	015a      	lsls	r2, r3, #5
 8005d1e:	69fb      	ldr	r3, [r7, #28]
 8005d20:	4413      	add	r3, r2
 8005d22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d26:	691b      	ldr	r3, [r3, #16]
 8005d28:	69ba      	ldr	r2, [r7, #24]
 8005d2a:	0151      	lsls	r1, r2, #5
 8005d2c:	69fa      	ldr	r2, [r7, #28]
 8005d2e:	440a      	add	r2, r1
 8005d30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d34:	0cdb      	lsrs	r3, r3, #19
 8005d36:	04db      	lsls	r3, r3, #19
 8005d38:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	015a      	lsls	r2, r3, #5
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	4413      	add	r3, r2
 8005d42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	69ba      	ldr	r2, [r7, #24]
 8005d4a:	0151      	lsls	r1, r2, #5
 8005d4c:	69fa      	ldr	r2, [r7, #28]
 8005d4e:	440a      	add	r2, r1
 8005d50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d54:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d58:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d5c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	699b      	ldr	r3, [r3, #24]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d126      	bne.n	8005db4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005d66:	69bb      	ldr	r3, [r7, #24]
 8005d68:	015a      	lsls	r2, r3, #5
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	4413      	add	r3, r2
 8005d6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d72:	691a      	ldr	r2, [r3, #16]
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	68db      	ldr	r3, [r3, #12]
 8005d78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d7c:	69b9      	ldr	r1, [r7, #24]
 8005d7e:	0148      	lsls	r0, r1, #5
 8005d80:	69f9      	ldr	r1, [r7, #28]
 8005d82:	4401      	add	r1, r0
 8005d84:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005d8c:	69bb      	ldr	r3, [r7, #24]
 8005d8e:	015a      	lsls	r2, r3, #5
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	4413      	add	r3, r2
 8005d94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d98:	691b      	ldr	r3, [r3, #16]
 8005d9a:	69ba      	ldr	r2, [r7, #24]
 8005d9c:	0151      	lsls	r1, r2, #5
 8005d9e:	69fa      	ldr	r2, [r7, #28]
 8005da0:	440a      	add	r2, r1
 8005da2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005da6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005daa:	6113      	str	r3, [r2, #16]
 8005dac:	e03a      	b.n	8005e24 <USB_EPStartXfer+0x3e4>
 8005dae:	bf00      	nop
 8005db0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	699a      	ldr	r2, [r3, #24]
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	4413      	add	r3, r2
 8005dbe:	1e5a      	subs	r2, r3, #1
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dc8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	8afa      	ldrh	r2, [r7, #22]
 8005dd0:	fb03 f202 	mul.w	r2, r3, r2
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005dd8:	69bb      	ldr	r3, [r7, #24]
 8005dda:	015a      	lsls	r2, r3, #5
 8005ddc:	69fb      	ldr	r3, [r7, #28]
 8005dde:	4413      	add	r3, r2
 8005de0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005de4:	691a      	ldr	r2, [r3, #16]
 8005de6:	8afb      	ldrh	r3, [r7, #22]
 8005de8:	04d9      	lsls	r1, r3, #19
 8005dea:	4b38      	ldr	r3, [pc, #224]	; (8005ecc <USB_EPStartXfer+0x48c>)
 8005dec:	400b      	ands	r3, r1
 8005dee:	69b9      	ldr	r1, [r7, #24]
 8005df0:	0148      	lsls	r0, r1, #5
 8005df2:	69f9      	ldr	r1, [r7, #28]
 8005df4:	4401      	add	r1, r0
 8005df6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005dfe:	69bb      	ldr	r3, [r7, #24]
 8005e00:	015a      	lsls	r2, r3, #5
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	4413      	add	r3, r2
 8005e06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e0a:	691a      	ldr	r2, [r3, #16]
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	69db      	ldr	r3, [r3, #28]
 8005e10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e14:	69b9      	ldr	r1, [r7, #24]
 8005e16:	0148      	lsls	r0, r1, #5
 8005e18:	69f9      	ldr	r1, [r7, #28]
 8005e1a:	4401      	add	r1, r0
 8005e1c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005e20:	4313      	orrs	r3, r2
 8005e22:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005e24:	79fb      	ldrb	r3, [r7, #7]
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d10d      	bne.n	8005e46 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	691b      	ldr	r3, [r3, #16]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d009      	beq.n	8005e46 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	6919      	ldr	r1, [r3, #16]
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	015a      	lsls	r2, r3, #5
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e42:	460a      	mov	r2, r1
 8005e44:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	791b      	ldrb	r3, [r3, #4]
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d128      	bne.n	8005ea0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005e4e:	69fb      	ldr	r3, [r7, #28]
 8005e50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d110      	bne.n	8005e80 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005e5e:	69bb      	ldr	r3, [r7, #24]
 8005e60:	015a      	lsls	r2, r3, #5
 8005e62:	69fb      	ldr	r3, [r7, #28]
 8005e64:	4413      	add	r3, r2
 8005e66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	69ba      	ldr	r2, [r7, #24]
 8005e6e:	0151      	lsls	r1, r2, #5
 8005e70:	69fa      	ldr	r2, [r7, #28]
 8005e72:	440a      	add	r2, r1
 8005e74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e78:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e7c:	6013      	str	r3, [r2, #0]
 8005e7e:	e00f      	b.n	8005ea0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005e80:	69bb      	ldr	r3, [r7, #24]
 8005e82:	015a      	lsls	r2, r3, #5
 8005e84:	69fb      	ldr	r3, [r7, #28]
 8005e86:	4413      	add	r3, r2
 8005e88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	69ba      	ldr	r2, [r7, #24]
 8005e90:	0151      	lsls	r1, r2, #5
 8005e92:	69fa      	ldr	r2, [r7, #28]
 8005e94:	440a      	add	r2, r1
 8005e96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e9e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005ea0:	69bb      	ldr	r3, [r7, #24]
 8005ea2:	015a      	lsls	r2, r3, #5
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	4413      	add	r3, r2
 8005ea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	69ba      	ldr	r2, [r7, #24]
 8005eb0:	0151      	lsls	r1, r2, #5
 8005eb2:	69fa      	ldr	r2, [r7, #28]
 8005eb4:	440a      	add	r2, r1
 8005eb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005eba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ebe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005ec0:	2300      	movs	r3, #0
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3720      	adds	r7, #32
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
 8005eca:	bf00      	nop
 8005ecc:	1ff80000 	.word	0x1ff80000

08005ed0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b087      	sub	sp, #28
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	60f8      	str	r0, [r7, #12]
 8005ed8:	60b9      	str	r1, [r7, #8]
 8005eda:	4613      	mov	r3, r2
 8005edc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	781b      	ldrb	r3, [r3, #0]
 8005ee6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	785b      	ldrb	r3, [r3, #1]
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	f040 80ce 	bne.w	800608e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	699b      	ldr	r3, [r3, #24]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d132      	bne.n	8005f60 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	015a      	lsls	r2, r3, #5
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	4413      	add	r3, r2
 8005f02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f06:	691b      	ldr	r3, [r3, #16]
 8005f08:	693a      	ldr	r2, [r7, #16]
 8005f0a:	0151      	lsls	r1, r2, #5
 8005f0c:	697a      	ldr	r2, [r7, #20]
 8005f0e:	440a      	add	r2, r1
 8005f10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f14:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f18:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f1c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	015a      	lsls	r2, r3, #5
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	4413      	add	r3, r2
 8005f26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f2a:	691b      	ldr	r3, [r3, #16]
 8005f2c:	693a      	ldr	r2, [r7, #16]
 8005f2e:	0151      	lsls	r1, r2, #5
 8005f30:	697a      	ldr	r2, [r7, #20]
 8005f32:	440a      	add	r2, r1
 8005f34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f38:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f3c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	015a      	lsls	r2, r3, #5
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	4413      	add	r3, r2
 8005f46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f4a:	691b      	ldr	r3, [r3, #16]
 8005f4c:	693a      	ldr	r2, [r7, #16]
 8005f4e:	0151      	lsls	r1, r2, #5
 8005f50:	697a      	ldr	r2, [r7, #20]
 8005f52:	440a      	add	r2, r1
 8005f54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f58:	0cdb      	lsrs	r3, r3, #19
 8005f5a:	04db      	lsls	r3, r3, #19
 8005f5c:	6113      	str	r3, [r2, #16]
 8005f5e:	e04e      	b.n	8005ffe <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	015a      	lsls	r2, r3, #5
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	4413      	add	r3, r2
 8005f68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f6c:	691b      	ldr	r3, [r3, #16]
 8005f6e:	693a      	ldr	r2, [r7, #16]
 8005f70:	0151      	lsls	r1, r2, #5
 8005f72:	697a      	ldr	r2, [r7, #20]
 8005f74:	440a      	add	r2, r1
 8005f76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f7a:	0cdb      	lsrs	r3, r3, #19
 8005f7c:	04db      	lsls	r3, r3, #19
 8005f7e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	015a      	lsls	r2, r3, #5
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	4413      	add	r3, r2
 8005f88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	693a      	ldr	r2, [r7, #16]
 8005f90:	0151      	lsls	r1, r2, #5
 8005f92:	697a      	ldr	r2, [r7, #20]
 8005f94:	440a      	add	r2, r1
 8005f96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f9a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f9e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005fa2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	699a      	ldr	r2, [r3, #24]
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	68db      	ldr	r3, [r3, #12]
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d903      	bls.n	8005fb8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	68da      	ldr	r2, [r3, #12]
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	015a      	lsls	r2, r3, #5
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	4413      	add	r3, r2
 8005fc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	693a      	ldr	r2, [r7, #16]
 8005fc8:	0151      	lsls	r1, r2, #5
 8005fca:	697a      	ldr	r2, [r7, #20]
 8005fcc:	440a      	add	r2, r1
 8005fce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fd2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005fd6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	015a      	lsls	r2, r3, #5
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	4413      	add	r3, r2
 8005fe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fe4:	691a      	ldr	r2, [r3, #16]
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	699b      	ldr	r3, [r3, #24]
 8005fea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fee:	6939      	ldr	r1, [r7, #16]
 8005ff0:	0148      	lsls	r0, r1, #5
 8005ff2:	6979      	ldr	r1, [r7, #20]
 8005ff4:	4401      	add	r1, r0
 8005ff6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005ffe:	79fb      	ldrb	r3, [r7, #7]
 8006000:	2b01      	cmp	r3, #1
 8006002:	d11e      	bne.n	8006042 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	695b      	ldr	r3, [r3, #20]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d009      	beq.n	8006020 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	015a      	lsls	r2, r3, #5
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	4413      	add	r3, r2
 8006014:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006018:	461a      	mov	r2, r3
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	695b      	ldr	r3, [r3, #20]
 800601e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	015a      	lsls	r2, r3, #5
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	4413      	add	r3, r2
 8006028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	693a      	ldr	r2, [r7, #16]
 8006030:	0151      	lsls	r1, r2, #5
 8006032:	697a      	ldr	r2, [r7, #20]
 8006034:	440a      	add	r2, r1
 8006036:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800603a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800603e:	6013      	str	r3, [r2, #0]
 8006040:	e097      	b.n	8006172 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	015a      	lsls	r2, r3, #5
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	4413      	add	r3, r2
 800604a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	693a      	ldr	r2, [r7, #16]
 8006052:	0151      	lsls	r1, r2, #5
 8006054:	697a      	ldr	r2, [r7, #20]
 8006056:	440a      	add	r2, r1
 8006058:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800605c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006060:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	699b      	ldr	r3, [r3, #24]
 8006066:	2b00      	cmp	r3, #0
 8006068:	f000 8083 	beq.w	8006172 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006072:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	f003 030f 	and.w	r3, r3, #15
 800607c:	2101      	movs	r1, #1
 800607e:	fa01 f303 	lsl.w	r3, r1, r3
 8006082:	6979      	ldr	r1, [r7, #20]
 8006084:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006088:	4313      	orrs	r3, r2
 800608a:	634b      	str	r3, [r1, #52]	; 0x34
 800608c:	e071      	b.n	8006172 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	015a      	lsls	r2, r3, #5
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	4413      	add	r3, r2
 8006096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800609a:	691b      	ldr	r3, [r3, #16]
 800609c:	693a      	ldr	r2, [r7, #16]
 800609e:	0151      	lsls	r1, r2, #5
 80060a0:	697a      	ldr	r2, [r7, #20]
 80060a2:	440a      	add	r2, r1
 80060a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060a8:	0cdb      	lsrs	r3, r3, #19
 80060aa:	04db      	lsls	r3, r3, #19
 80060ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	015a      	lsls	r2, r3, #5
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	4413      	add	r3, r2
 80060b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ba:	691b      	ldr	r3, [r3, #16]
 80060bc:	693a      	ldr	r2, [r7, #16]
 80060be:	0151      	lsls	r1, r2, #5
 80060c0:	697a      	ldr	r2, [r7, #20]
 80060c2:	440a      	add	r2, r1
 80060c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060c8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80060cc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80060d0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	699b      	ldr	r3, [r3, #24]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d003      	beq.n	80060e2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	68da      	ldr	r2, [r3, #12]
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	68da      	ldr	r2, [r3, #12]
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	015a      	lsls	r2, r3, #5
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	4413      	add	r3, r2
 80060f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060f6:	691b      	ldr	r3, [r3, #16]
 80060f8:	693a      	ldr	r2, [r7, #16]
 80060fa:	0151      	lsls	r1, r2, #5
 80060fc:	697a      	ldr	r2, [r7, #20]
 80060fe:	440a      	add	r2, r1
 8006100:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006104:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006108:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	015a      	lsls	r2, r3, #5
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	4413      	add	r3, r2
 8006112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006116:	691a      	ldr	r2, [r3, #16]
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	69db      	ldr	r3, [r3, #28]
 800611c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006120:	6939      	ldr	r1, [r7, #16]
 8006122:	0148      	lsls	r0, r1, #5
 8006124:	6979      	ldr	r1, [r7, #20]
 8006126:	4401      	add	r1, r0
 8006128:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800612c:	4313      	orrs	r3, r2
 800612e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006130:	79fb      	ldrb	r3, [r7, #7]
 8006132:	2b01      	cmp	r3, #1
 8006134:	d10d      	bne.n	8006152 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	691b      	ldr	r3, [r3, #16]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d009      	beq.n	8006152 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	6919      	ldr	r1, [r3, #16]
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	015a      	lsls	r2, r3, #5
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	4413      	add	r3, r2
 800614a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800614e:	460a      	mov	r2, r1
 8006150:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	015a      	lsls	r2, r3, #5
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	4413      	add	r3, r2
 800615a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	693a      	ldr	r2, [r7, #16]
 8006162:	0151      	lsls	r1, r2, #5
 8006164:	697a      	ldr	r2, [r7, #20]
 8006166:	440a      	add	r2, r1
 8006168:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800616c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006170:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006172:	2300      	movs	r3, #0
}
 8006174:	4618      	mov	r0, r3
 8006176:	371c      	adds	r7, #28
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr

08006180 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006180:	b480      	push	{r7}
 8006182:	b087      	sub	sp, #28
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800618a:	2300      	movs	r3, #0
 800618c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800618e:	2300      	movs	r3, #0
 8006190:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	785b      	ldrb	r3, [r3, #1]
 800619a:	2b01      	cmp	r3, #1
 800619c:	d14a      	bne.n	8006234 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	781b      	ldrb	r3, [r3, #0]
 80061a2:	015a      	lsls	r2, r3, #5
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	4413      	add	r3, r2
 80061a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061b6:	f040 8086 	bne.w	80062c6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	015a      	lsls	r2, r3, #5
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	4413      	add	r3, r2
 80061c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	683a      	ldr	r2, [r7, #0]
 80061cc:	7812      	ldrb	r2, [r2, #0]
 80061ce:	0151      	lsls	r1, r2, #5
 80061d0:	693a      	ldr	r2, [r7, #16]
 80061d2:	440a      	add	r2, r1
 80061d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061d8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80061dc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	781b      	ldrb	r3, [r3, #0]
 80061e2:	015a      	lsls	r2, r3, #5
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	4413      	add	r3, r2
 80061e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	683a      	ldr	r2, [r7, #0]
 80061f0:	7812      	ldrb	r2, [r2, #0]
 80061f2:	0151      	lsls	r1, r2, #5
 80061f4:	693a      	ldr	r2, [r7, #16]
 80061f6:	440a      	add	r2, r1
 80061f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006200:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	3301      	adds	r3, #1
 8006206:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f242 7210 	movw	r2, #10000	; 0x2710
 800620e:	4293      	cmp	r3, r2
 8006210:	d902      	bls.n	8006218 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	75fb      	strb	r3, [r7, #23]
          break;
 8006216:	e056      	b.n	80062c6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	015a      	lsls	r2, r3, #5
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	4413      	add	r3, r2
 8006222:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800622c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006230:	d0e7      	beq.n	8006202 <USB_EPStopXfer+0x82>
 8006232:	e048      	b.n	80062c6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	781b      	ldrb	r3, [r3, #0]
 8006238:	015a      	lsls	r2, r3, #5
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	4413      	add	r3, r2
 800623e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006248:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800624c:	d13b      	bne.n	80062c6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	781b      	ldrb	r3, [r3, #0]
 8006252:	015a      	lsls	r2, r3, #5
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	4413      	add	r3, r2
 8006258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	683a      	ldr	r2, [r7, #0]
 8006260:	7812      	ldrb	r2, [r2, #0]
 8006262:	0151      	lsls	r1, r2, #5
 8006264:	693a      	ldr	r2, [r7, #16]
 8006266:	440a      	add	r2, r1
 8006268:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800626c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006270:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	015a      	lsls	r2, r3, #5
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	4413      	add	r3, r2
 800627c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	683a      	ldr	r2, [r7, #0]
 8006284:	7812      	ldrb	r2, [r2, #0]
 8006286:	0151      	lsls	r1, r2, #5
 8006288:	693a      	ldr	r2, [r7, #16]
 800628a:	440a      	add	r2, r1
 800628c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006290:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006294:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	3301      	adds	r3, #1
 800629a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f242 7210 	movw	r2, #10000	; 0x2710
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d902      	bls.n	80062ac <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	75fb      	strb	r3, [r7, #23]
          break;
 80062aa:	e00c      	b.n	80062c6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	781b      	ldrb	r3, [r3, #0]
 80062b0:	015a      	lsls	r2, r3, #5
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	4413      	add	r3, r2
 80062b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062c4:	d0e7      	beq.n	8006296 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80062c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	371c      	adds	r7, #28
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr

080062d4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b089      	sub	sp, #36	; 0x24
 80062d8:	af00      	add	r7, sp, #0
 80062da:	60f8      	str	r0, [r7, #12]
 80062dc:	60b9      	str	r1, [r7, #8]
 80062de:	4611      	mov	r1, r2
 80062e0:	461a      	mov	r2, r3
 80062e2:	460b      	mov	r3, r1
 80062e4:	71fb      	strb	r3, [r7, #7]
 80062e6:	4613      	mov	r3, r2
 80062e8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80062f2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d123      	bne.n	8006342 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80062fa:	88bb      	ldrh	r3, [r7, #4]
 80062fc:	3303      	adds	r3, #3
 80062fe:	089b      	lsrs	r3, r3, #2
 8006300:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006302:	2300      	movs	r3, #0
 8006304:	61bb      	str	r3, [r7, #24]
 8006306:	e018      	b.n	800633a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006308:	79fb      	ldrb	r3, [r7, #7]
 800630a:	031a      	lsls	r2, r3, #12
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	4413      	add	r3, r2
 8006310:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006314:	461a      	mov	r2, r3
 8006316:	69fb      	ldr	r3, [r7, #28]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800631c:	69fb      	ldr	r3, [r7, #28]
 800631e:	3301      	adds	r3, #1
 8006320:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006322:	69fb      	ldr	r3, [r7, #28]
 8006324:	3301      	adds	r3, #1
 8006326:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006328:	69fb      	ldr	r3, [r7, #28]
 800632a:	3301      	adds	r3, #1
 800632c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800632e:	69fb      	ldr	r3, [r7, #28]
 8006330:	3301      	adds	r3, #1
 8006332:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006334:	69bb      	ldr	r3, [r7, #24]
 8006336:	3301      	adds	r3, #1
 8006338:	61bb      	str	r3, [r7, #24]
 800633a:	69ba      	ldr	r2, [r7, #24]
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	429a      	cmp	r2, r3
 8006340:	d3e2      	bcc.n	8006308 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006342:	2300      	movs	r3, #0
}
 8006344:	4618      	mov	r0, r3
 8006346:	3724      	adds	r7, #36	; 0x24
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr

08006350 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006350:	b480      	push	{r7}
 8006352:	b08b      	sub	sp, #44	; 0x2c
 8006354:	af00      	add	r7, sp, #0
 8006356:	60f8      	str	r0, [r7, #12]
 8006358:	60b9      	str	r1, [r7, #8]
 800635a:	4613      	mov	r3, r2
 800635c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006366:	88fb      	ldrh	r3, [r7, #6]
 8006368:	089b      	lsrs	r3, r3, #2
 800636a:	b29b      	uxth	r3, r3
 800636c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800636e:	88fb      	ldrh	r3, [r7, #6]
 8006370:	f003 0303 	and.w	r3, r3, #3
 8006374:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006376:	2300      	movs	r3, #0
 8006378:	623b      	str	r3, [r7, #32]
 800637a:	e014      	b.n	80063a6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800637c:	69bb      	ldr	r3, [r7, #24]
 800637e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006386:	601a      	str	r2, [r3, #0]
    pDest++;
 8006388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638a:	3301      	adds	r3, #1
 800638c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800638e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006390:	3301      	adds	r3, #1
 8006392:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006396:	3301      	adds	r3, #1
 8006398:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800639a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639c:	3301      	adds	r3, #1
 800639e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80063a0:	6a3b      	ldr	r3, [r7, #32]
 80063a2:	3301      	adds	r3, #1
 80063a4:	623b      	str	r3, [r7, #32]
 80063a6:	6a3a      	ldr	r2, [r7, #32]
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d3e6      	bcc.n	800637c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80063ae:	8bfb      	ldrh	r3, [r7, #30]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d01e      	beq.n	80063f2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80063b4:	2300      	movs	r3, #0
 80063b6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80063b8:	69bb      	ldr	r3, [r7, #24]
 80063ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063be:	461a      	mov	r2, r3
 80063c0:	f107 0310 	add.w	r3, r7, #16
 80063c4:	6812      	ldr	r2, [r2, #0]
 80063c6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80063c8:	693a      	ldr	r2, [r7, #16]
 80063ca:	6a3b      	ldr	r3, [r7, #32]
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	00db      	lsls	r3, r3, #3
 80063d0:	fa22 f303 	lsr.w	r3, r2, r3
 80063d4:	b2da      	uxtb	r2, r3
 80063d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d8:	701a      	strb	r2, [r3, #0]
      i++;
 80063da:	6a3b      	ldr	r3, [r7, #32]
 80063dc:	3301      	adds	r3, #1
 80063de:	623b      	str	r3, [r7, #32]
      pDest++;
 80063e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e2:	3301      	adds	r3, #1
 80063e4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80063e6:	8bfb      	ldrh	r3, [r7, #30]
 80063e8:	3b01      	subs	r3, #1
 80063ea:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80063ec:	8bfb      	ldrh	r3, [r7, #30]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d1ea      	bne.n	80063c8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80063f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	372c      	adds	r7, #44	; 0x2c
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr

08006400 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006400:	b480      	push	{r7}
 8006402:	b085      	sub	sp, #20
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
 8006408:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	781b      	ldrb	r3, [r3, #0]
 8006412:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	785b      	ldrb	r3, [r3, #1]
 8006418:	2b01      	cmp	r3, #1
 800641a:	d12c      	bne.n	8006476 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	015a      	lsls	r2, r3, #5
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	4413      	add	r3, r2
 8006424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	2b00      	cmp	r3, #0
 800642c:	db12      	blt.n	8006454 <USB_EPSetStall+0x54>
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d00f      	beq.n	8006454 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	015a      	lsls	r2, r3, #5
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	4413      	add	r3, r2
 800643c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	68ba      	ldr	r2, [r7, #8]
 8006444:	0151      	lsls	r1, r2, #5
 8006446:	68fa      	ldr	r2, [r7, #12]
 8006448:	440a      	add	r2, r1
 800644a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800644e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006452:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	015a      	lsls	r2, r3, #5
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	4413      	add	r3, r2
 800645c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	68ba      	ldr	r2, [r7, #8]
 8006464:	0151      	lsls	r1, r2, #5
 8006466:	68fa      	ldr	r2, [r7, #12]
 8006468:	440a      	add	r2, r1
 800646a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800646e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006472:	6013      	str	r3, [r2, #0]
 8006474:	e02b      	b.n	80064ce <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	015a      	lsls	r2, r3, #5
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	4413      	add	r3, r2
 800647e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	2b00      	cmp	r3, #0
 8006486:	db12      	blt.n	80064ae <USB_EPSetStall+0xae>
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d00f      	beq.n	80064ae <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	015a      	lsls	r2, r3, #5
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	4413      	add	r3, r2
 8006496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	68ba      	ldr	r2, [r7, #8]
 800649e:	0151      	lsls	r1, r2, #5
 80064a0:	68fa      	ldr	r2, [r7, #12]
 80064a2:	440a      	add	r2, r1
 80064a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064a8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80064ac:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	015a      	lsls	r2, r3, #5
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	4413      	add	r3, r2
 80064b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	68ba      	ldr	r2, [r7, #8]
 80064be:	0151      	lsls	r1, r2, #5
 80064c0:	68fa      	ldr	r2, [r7, #12]
 80064c2:	440a      	add	r2, r1
 80064c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80064cc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80064ce:	2300      	movs	r3, #0
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3714      	adds	r7, #20
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr

080064dc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80064dc:	b480      	push	{r7}
 80064de:	b085      	sub	sp, #20
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	785b      	ldrb	r3, [r3, #1]
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d128      	bne.n	800654a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	015a      	lsls	r2, r3, #5
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	4413      	add	r3, r2
 8006500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	68ba      	ldr	r2, [r7, #8]
 8006508:	0151      	lsls	r1, r2, #5
 800650a:	68fa      	ldr	r2, [r7, #12]
 800650c:	440a      	add	r2, r1
 800650e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006512:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006516:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	791b      	ldrb	r3, [r3, #4]
 800651c:	2b03      	cmp	r3, #3
 800651e:	d003      	beq.n	8006528 <USB_EPClearStall+0x4c>
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	791b      	ldrb	r3, [r3, #4]
 8006524:	2b02      	cmp	r3, #2
 8006526:	d138      	bne.n	800659a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	015a      	lsls	r2, r3, #5
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	4413      	add	r3, r2
 8006530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	68ba      	ldr	r2, [r7, #8]
 8006538:	0151      	lsls	r1, r2, #5
 800653a:	68fa      	ldr	r2, [r7, #12]
 800653c:	440a      	add	r2, r1
 800653e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006542:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006546:	6013      	str	r3, [r2, #0]
 8006548:	e027      	b.n	800659a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	015a      	lsls	r2, r3, #5
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	4413      	add	r3, r2
 8006552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	68ba      	ldr	r2, [r7, #8]
 800655a:	0151      	lsls	r1, r2, #5
 800655c:	68fa      	ldr	r2, [r7, #12]
 800655e:	440a      	add	r2, r1
 8006560:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006564:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006568:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	791b      	ldrb	r3, [r3, #4]
 800656e:	2b03      	cmp	r3, #3
 8006570:	d003      	beq.n	800657a <USB_EPClearStall+0x9e>
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	791b      	ldrb	r3, [r3, #4]
 8006576:	2b02      	cmp	r3, #2
 8006578:	d10f      	bne.n	800659a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	015a      	lsls	r2, r3, #5
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	4413      	add	r3, r2
 8006582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	68ba      	ldr	r2, [r7, #8]
 800658a:	0151      	lsls	r1, r2, #5
 800658c:	68fa      	ldr	r2, [r7, #12]
 800658e:	440a      	add	r2, r1
 8006590:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006594:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006598:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800659a:	2300      	movs	r3, #0
}
 800659c:	4618      	mov	r0, r3
 800659e:	3714      	adds	r7, #20
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr

080065a8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b085      	sub	sp, #20
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	460b      	mov	r3, r1
 80065b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	68fa      	ldr	r2, [r7, #12]
 80065c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065c6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80065ca:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065d2:	681a      	ldr	r2, [r3, #0]
 80065d4:	78fb      	ldrb	r3, [r7, #3]
 80065d6:	011b      	lsls	r3, r3, #4
 80065d8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80065dc:	68f9      	ldr	r1, [r7, #12]
 80065de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065e2:	4313      	orrs	r3, r2
 80065e4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80065e6:	2300      	movs	r3, #0
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	3714      	adds	r7, #20
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr

080065f4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b085      	sub	sp, #20
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	68fa      	ldr	r2, [r7, #12]
 800660a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800660e:	f023 0303 	bic.w	r3, r3, #3
 8006612:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	68fa      	ldr	r2, [r7, #12]
 800661e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006622:	f023 0302 	bic.w	r3, r3, #2
 8006626:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006628:	2300      	movs	r3, #0
}
 800662a:	4618      	mov	r0, r3
 800662c:	3714      	adds	r7, #20
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr

08006636 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006636:	b480      	push	{r7}
 8006638:	b085      	sub	sp, #20
 800663a:	af00      	add	r7, sp, #0
 800663c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	68fa      	ldr	r2, [r7, #12]
 800664c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006650:	f023 0303 	bic.w	r3, r3, #3
 8006654:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	68fa      	ldr	r2, [r7, #12]
 8006660:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006664:	f043 0302 	orr.w	r3, r3, #2
 8006668:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800666a:	2300      	movs	r3, #0
}
 800666c:	4618      	mov	r0, r3
 800666e:	3714      	adds	r7, #20
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr

08006678 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006678:	b480      	push	{r7}
 800667a:	b085      	sub	sp, #20
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	695b      	ldr	r3, [r3, #20]
 8006684:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	699b      	ldr	r3, [r3, #24]
 800668a:	68fa      	ldr	r2, [r7, #12]
 800668c:	4013      	ands	r3, r2
 800668e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006690:	68fb      	ldr	r3, [r7, #12]
}
 8006692:	4618      	mov	r0, r3
 8006694:	3714      	adds	r7, #20
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr

0800669e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800669e:	b480      	push	{r7}
 80066a0:	b085      	sub	sp, #20
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066b0:	699b      	ldr	r3, [r3, #24]
 80066b2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066ba:	69db      	ldr	r3, [r3, #28]
 80066bc:	68ba      	ldr	r2, [r7, #8]
 80066be:	4013      	ands	r3, r2
 80066c0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	0c1b      	lsrs	r3, r3, #16
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3714      	adds	r7, #20
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr

080066d2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80066d2:	b480      	push	{r7}
 80066d4:	b085      	sub	sp, #20
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066e4:	699b      	ldr	r3, [r3, #24]
 80066e6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066ee:	69db      	ldr	r3, [r3, #28]
 80066f0:	68ba      	ldr	r2, [r7, #8]
 80066f2:	4013      	ands	r3, r2
 80066f4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	b29b      	uxth	r3, r3
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3714      	adds	r7, #20
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr

08006706 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006706:	b480      	push	{r7}
 8006708:	b085      	sub	sp, #20
 800670a:	af00      	add	r7, sp, #0
 800670c:	6078      	str	r0, [r7, #4]
 800670e:	460b      	mov	r3, r1
 8006710:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006716:	78fb      	ldrb	r3, [r7, #3]
 8006718:	015a      	lsls	r2, r3, #5
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	4413      	add	r3, r2
 800671e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800672c:	695b      	ldr	r3, [r3, #20]
 800672e:	68ba      	ldr	r2, [r7, #8]
 8006730:	4013      	ands	r3, r2
 8006732:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006734:	68bb      	ldr	r3, [r7, #8]
}
 8006736:	4618      	mov	r0, r3
 8006738:	3714      	adds	r7, #20
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr

08006742 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006742:	b480      	push	{r7}
 8006744:	b087      	sub	sp, #28
 8006746:	af00      	add	r7, sp, #0
 8006748:	6078      	str	r0, [r7, #4]
 800674a:	460b      	mov	r3, r1
 800674c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006758:	691b      	ldr	r3, [r3, #16]
 800675a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006764:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006766:	78fb      	ldrb	r3, [r7, #3]
 8006768:	f003 030f 	and.w	r3, r3, #15
 800676c:	68fa      	ldr	r2, [r7, #12]
 800676e:	fa22 f303 	lsr.w	r3, r2, r3
 8006772:	01db      	lsls	r3, r3, #7
 8006774:	b2db      	uxtb	r3, r3
 8006776:	693a      	ldr	r2, [r7, #16]
 8006778:	4313      	orrs	r3, r2
 800677a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800677c:	78fb      	ldrb	r3, [r7, #3]
 800677e:	015a      	lsls	r2, r3, #5
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	4413      	add	r3, r2
 8006784:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	693a      	ldr	r2, [r7, #16]
 800678c:	4013      	ands	r3, r2
 800678e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006790:	68bb      	ldr	r3, [r7, #8]
}
 8006792:	4618      	mov	r0, r3
 8006794:	371c      	adds	r7, #28
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr

0800679e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800679e:	b480      	push	{r7}
 80067a0:	b083      	sub	sp, #12
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	695b      	ldr	r3, [r3, #20]
 80067aa:	f003 0301 	and.w	r3, r3, #1
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	370c      	adds	r7, #12
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr

080067ba <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80067ba:	b480      	push	{r7}
 80067bc:	b085      	sub	sp, #20
 80067be:	af00      	add	r7, sp, #0
 80067c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	68fa      	ldr	r2, [r7, #12]
 80067d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067d4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80067d8:	f023 0307 	bic.w	r3, r3, #7
 80067dc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	68fa      	ldr	r2, [r7, #12]
 80067e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067f0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80067f2:	2300      	movs	r3, #0
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3714      	adds	r7, #20
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr

08006800 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006800:	b480      	push	{r7}
 8006802:	b087      	sub	sp, #28
 8006804:	af00      	add	r7, sp, #0
 8006806:	60f8      	str	r0, [r7, #12]
 8006808:	460b      	mov	r3, r1
 800680a:	607a      	str	r2, [r7, #4]
 800680c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	333c      	adds	r3, #60	; 0x3c
 8006816:	3304      	adds	r3, #4
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	4a26      	ldr	r2, [pc, #152]	; (80068b8 <USB_EP0_OutStart+0xb8>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d90a      	bls.n	800683a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006830:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006834:	d101      	bne.n	800683a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006836:	2300      	movs	r3, #0
 8006838:	e037      	b.n	80068aa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006840:	461a      	mov	r2, r3
 8006842:	2300      	movs	r3, #0
 8006844:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800684c:	691b      	ldr	r3, [r3, #16]
 800684e:	697a      	ldr	r2, [r7, #20]
 8006850:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006854:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006858:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006860:	691b      	ldr	r3, [r3, #16]
 8006862:	697a      	ldr	r2, [r7, #20]
 8006864:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006868:	f043 0318 	orr.w	r3, r3, #24
 800686c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006874:	691b      	ldr	r3, [r3, #16]
 8006876:	697a      	ldr	r2, [r7, #20]
 8006878:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800687c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006880:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006882:	7afb      	ldrb	r3, [r7, #11]
 8006884:	2b01      	cmp	r3, #1
 8006886:	d10f      	bne.n	80068a8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800688e:	461a      	mov	r2, r3
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	697a      	ldr	r2, [r7, #20]
 800689e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068a2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80068a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80068a8:	2300      	movs	r3, #0
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	371c      	adds	r7, #28
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr
 80068b6:	bf00      	nop
 80068b8:	4f54300a 	.word	0x4f54300a

080068bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80068bc:	b480      	push	{r7}
 80068be:	b085      	sub	sp, #20
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80068c4:	2300      	movs	r3, #0
 80068c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	3301      	adds	r3, #1
 80068cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	4a13      	ldr	r2, [pc, #76]	; (8006920 <USB_CoreReset+0x64>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d901      	bls.n	80068da <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80068d6:	2303      	movs	r3, #3
 80068d8:	e01b      	b.n	8006912 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	daf2      	bge.n	80068c8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80068e2:	2300      	movs	r3, #0
 80068e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	691b      	ldr	r3, [r3, #16]
 80068ea:	f043 0201 	orr.w	r2, r3, #1
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	3301      	adds	r3, #1
 80068f6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	4a09      	ldr	r2, [pc, #36]	; (8006920 <USB_CoreReset+0x64>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d901      	bls.n	8006904 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006900:	2303      	movs	r3, #3
 8006902:	e006      	b.n	8006912 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	691b      	ldr	r3, [r3, #16]
 8006908:	f003 0301 	and.w	r3, r3, #1
 800690c:	2b01      	cmp	r3, #1
 800690e:	d0f0      	beq.n	80068f2 <USB_CoreReset+0x36>

  return HAL_OK;
 8006910:	2300      	movs	r3, #0
}
 8006912:	4618      	mov	r0, r3
 8006914:	3714      	adds	r7, #20
 8006916:	46bd      	mov	sp, r7
 8006918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691c:	4770      	bx	lr
 800691e:	bf00      	nop
 8006920:	00030d40 	.word	0x00030d40

08006924 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b084      	sub	sp, #16
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	460b      	mov	r3, r1
 800692e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006930:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006934:	f002 fc8a 	bl	800924c <USBD_static_malloc>
 8006938:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d109      	bne.n	8006954 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	32b0      	adds	r2, #176	; 0xb0
 800694a:	2100      	movs	r1, #0
 800694c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006950:	2302      	movs	r3, #2
 8006952:	e0d4      	b.n	8006afe <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006954:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006958:	2100      	movs	r1, #0
 800695a:	68f8      	ldr	r0, [r7, #12]
 800695c:	f002 fce4 	bl	8009328 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	32b0      	adds	r2, #176	; 0xb0
 800696a:	68f9      	ldr	r1, [r7, #12]
 800696c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	32b0      	adds	r2, #176	; 0xb0
 800697a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	7c1b      	ldrb	r3, [r3, #16]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d138      	bne.n	80069fe <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800698c:	4b5e      	ldr	r3, [pc, #376]	; (8006b08 <USBD_CDC_Init+0x1e4>)
 800698e:	7819      	ldrb	r1, [r3, #0]
 8006990:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006994:	2202      	movs	r2, #2
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f002 fb35 	bl	8009006 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800699c:	4b5a      	ldr	r3, [pc, #360]	; (8006b08 <USBD_CDC_Init+0x1e4>)
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	f003 020f 	and.w	r2, r3, #15
 80069a4:	6879      	ldr	r1, [r7, #4]
 80069a6:	4613      	mov	r3, r2
 80069a8:	009b      	lsls	r3, r3, #2
 80069aa:	4413      	add	r3, r2
 80069ac:	009b      	lsls	r3, r3, #2
 80069ae:	440b      	add	r3, r1
 80069b0:	3324      	adds	r3, #36	; 0x24
 80069b2:	2201      	movs	r2, #1
 80069b4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80069b6:	4b55      	ldr	r3, [pc, #340]	; (8006b0c <USBD_CDC_Init+0x1e8>)
 80069b8:	7819      	ldrb	r1, [r3, #0]
 80069ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069be:	2202      	movs	r2, #2
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f002 fb20 	bl	8009006 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80069c6:	4b51      	ldr	r3, [pc, #324]	; (8006b0c <USBD_CDC_Init+0x1e8>)
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	f003 020f 	and.w	r2, r3, #15
 80069ce:	6879      	ldr	r1, [r7, #4]
 80069d0:	4613      	mov	r3, r2
 80069d2:	009b      	lsls	r3, r3, #2
 80069d4:	4413      	add	r3, r2
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	440b      	add	r3, r1
 80069da:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80069de:	2201      	movs	r2, #1
 80069e0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80069e2:	4b4b      	ldr	r3, [pc, #300]	; (8006b10 <USBD_CDC_Init+0x1ec>)
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	f003 020f 	and.w	r2, r3, #15
 80069ea:	6879      	ldr	r1, [r7, #4]
 80069ec:	4613      	mov	r3, r2
 80069ee:	009b      	lsls	r3, r3, #2
 80069f0:	4413      	add	r3, r2
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	440b      	add	r3, r1
 80069f6:	3326      	adds	r3, #38	; 0x26
 80069f8:	2210      	movs	r2, #16
 80069fa:	801a      	strh	r2, [r3, #0]
 80069fc:	e035      	b.n	8006a6a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80069fe:	4b42      	ldr	r3, [pc, #264]	; (8006b08 <USBD_CDC_Init+0x1e4>)
 8006a00:	7819      	ldrb	r1, [r3, #0]
 8006a02:	2340      	movs	r3, #64	; 0x40
 8006a04:	2202      	movs	r2, #2
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f002 fafd 	bl	8009006 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006a0c:	4b3e      	ldr	r3, [pc, #248]	; (8006b08 <USBD_CDC_Init+0x1e4>)
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	f003 020f 	and.w	r2, r3, #15
 8006a14:	6879      	ldr	r1, [r7, #4]
 8006a16:	4613      	mov	r3, r2
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	4413      	add	r3, r2
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	440b      	add	r3, r1
 8006a20:	3324      	adds	r3, #36	; 0x24
 8006a22:	2201      	movs	r2, #1
 8006a24:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006a26:	4b39      	ldr	r3, [pc, #228]	; (8006b0c <USBD_CDC_Init+0x1e8>)
 8006a28:	7819      	ldrb	r1, [r3, #0]
 8006a2a:	2340      	movs	r3, #64	; 0x40
 8006a2c:	2202      	movs	r2, #2
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f002 fae9 	bl	8009006 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006a34:	4b35      	ldr	r3, [pc, #212]	; (8006b0c <USBD_CDC_Init+0x1e8>)
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	f003 020f 	and.w	r2, r3, #15
 8006a3c:	6879      	ldr	r1, [r7, #4]
 8006a3e:	4613      	mov	r3, r2
 8006a40:	009b      	lsls	r3, r3, #2
 8006a42:	4413      	add	r3, r2
 8006a44:	009b      	lsls	r3, r3, #2
 8006a46:	440b      	add	r3, r1
 8006a48:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006a50:	4b2f      	ldr	r3, [pc, #188]	; (8006b10 <USBD_CDC_Init+0x1ec>)
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	f003 020f 	and.w	r2, r3, #15
 8006a58:	6879      	ldr	r1, [r7, #4]
 8006a5a:	4613      	mov	r3, r2
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	4413      	add	r3, r2
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	440b      	add	r3, r1
 8006a64:	3326      	adds	r3, #38	; 0x26
 8006a66:	2210      	movs	r2, #16
 8006a68:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006a6a:	4b29      	ldr	r3, [pc, #164]	; (8006b10 <USBD_CDC_Init+0x1ec>)
 8006a6c:	7819      	ldrb	r1, [r3, #0]
 8006a6e:	2308      	movs	r3, #8
 8006a70:	2203      	movs	r2, #3
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f002 fac7 	bl	8009006 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006a78:	4b25      	ldr	r3, [pc, #148]	; (8006b10 <USBD_CDC_Init+0x1ec>)
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	f003 020f 	and.w	r2, r3, #15
 8006a80:	6879      	ldr	r1, [r7, #4]
 8006a82:	4613      	mov	r3, r2
 8006a84:	009b      	lsls	r3, r3, #2
 8006a86:	4413      	add	r3, r2
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	440b      	add	r3, r1
 8006a8c:	3324      	adds	r3, #36	; 0x24
 8006a8e:	2201      	movs	r2, #1
 8006a90:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2200      	movs	r2, #0
 8006a96:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006aa0:	687a      	ldr	r2, [r7, #4]
 8006aa2:	33b0      	adds	r3, #176	; 0xb0
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	4413      	add	r3, r2
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d101      	bne.n	8006acc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006ac8:	2302      	movs	r3, #2
 8006aca:	e018      	b.n	8006afe <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	7c1b      	ldrb	r3, [r3, #16]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d10a      	bne.n	8006aea <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006ad4:	4b0d      	ldr	r3, [pc, #52]	; (8006b0c <USBD_CDC_Init+0x1e8>)
 8006ad6:	7819      	ldrb	r1, [r3, #0]
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006ade:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f002 fb7e 	bl	80091e4 <USBD_LL_PrepareReceive>
 8006ae8:	e008      	b.n	8006afc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006aea:	4b08      	ldr	r3, [pc, #32]	; (8006b0c <USBD_CDC_Init+0x1e8>)
 8006aec:	7819      	ldrb	r1, [r3, #0]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006af4:	2340      	movs	r3, #64	; 0x40
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f002 fb74 	bl	80091e4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006afc:	2300      	movs	r3, #0
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3710      	adds	r7, #16
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop
 8006b08:	20000093 	.word	0x20000093
 8006b0c:	20000094 	.word	0x20000094
 8006b10:	20000095 	.word	0x20000095

08006b14 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b082      	sub	sp, #8
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	460b      	mov	r3, r1
 8006b1e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006b20:	4b3a      	ldr	r3, [pc, #232]	; (8006c0c <USBD_CDC_DeInit+0xf8>)
 8006b22:	781b      	ldrb	r3, [r3, #0]
 8006b24:	4619      	mov	r1, r3
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f002 fa93 	bl	8009052 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006b2c:	4b37      	ldr	r3, [pc, #220]	; (8006c0c <USBD_CDC_DeInit+0xf8>)
 8006b2e:	781b      	ldrb	r3, [r3, #0]
 8006b30:	f003 020f 	and.w	r2, r3, #15
 8006b34:	6879      	ldr	r1, [r7, #4]
 8006b36:	4613      	mov	r3, r2
 8006b38:	009b      	lsls	r3, r3, #2
 8006b3a:	4413      	add	r3, r2
 8006b3c:	009b      	lsls	r3, r3, #2
 8006b3e:	440b      	add	r3, r1
 8006b40:	3324      	adds	r3, #36	; 0x24
 8006b42:	2200      	movs	r2, #0
 8006b44:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006b46:	4b32      	ldr	r3, [pc, #200]	; (8006c10 <USBD_CDC_DeInit+0xfc>)
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	4619      	mov	r1, r3
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f002 fa80 	bl	8009052 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006b52:	4b2f      	ldr	r3, [pc, #188]	; (8006c10 <USBD_CDC_DeInit+0xfc>)
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	f003 020f 	and.w	r2, r3, #15
 8006b5a:	6879      	ldr	r1, [r7, #4]
 8006b5c:	4613      	mov	r3, r2
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	4413      	add	r3, r2
 8006b62:	009b      	lsls	r3, r3, #2
 8006b64:	440b      	add	r3, r1
 8006b66:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006b6e:	4b29      	ldr	r3, [pc, #164]	; (8006c14 <USBD_CDC_DeInit+0x100>)
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	4619      	mov	r1, r3
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f002 fa6c 	bl	8009052 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006b7a:	4b26      	ldr	r3, [pc, #152]	; (8006c14 <USBD_CDC_DeInit+0x100>)
 8006b7c:	781b      	ldrb	r3, [r3, #0]
 8006b7e:	f003 020f 	and.w	r2, r3, #15
 8006b82:	6879      	ldr	r1, [r7, #4]
 8006b84:	4613      	mov	r3, r2
 8006b86:	009b      	lsls	r3, r3, #2
 8006b88:	4413      	add	r3, r2
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	440b      	add	r3, r1
 8006b8e:	3324      	adds	r3, #36	; 0x24
 8006b90:	2200      	movs	r2, #0
 8006b92:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006b94:	4b1f      	ldr	r3, [pc, #124]	; (8006c14 <USBD_CDC_DeInit+0x100>)
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	f003 020f 	and.w	r2, r3, #15
 8006b9c:	6879      	ldr	r1, [r7, #4]
 8006b9e:	4613      	mov	r3, r2
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	4413      	add	r3, r2
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	440b      	add	r3, r1
 8006ba8:	3326      	adds	r3, #38	; 0x26
 8006baa:	2200      	movs	r2, #0
 8006bac:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	32b0      	adds	r2, #176	; 0xb0
 8006bb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d01f      	beq.n	8006c00 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006bc6:	687a      	ldr	r2, [r7, #4]
 8006bc8:	33b0      	adds	r3, #176	; 0xb0
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	4413      	add	r3, r2
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	32b0      	adds	r2, #176	; 0xb0
 8006bde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006be2:	4618      	mov	r0, r3
 8006be4:	f002 fb40 	bl	8009268 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	32b0      	adds	r2, #176	; 0xb0
 8006bf2:	2100      	movs	r1, #0
 8006bf4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006c00:	2300      	movs	r3, #0
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3708      	adds	r7, #8
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}
 8006c0a:	bf00      	nop
 8006c0c:	20000093 	.word	0x20000093
 8006c10:	20000094 	.word	0x20000094
 8006c14:	20000095 	.word	0x20000095

08006c18 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b086      	sub	sp, #24
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	32b0      	adds	r2, #176	; 0xb0
 8006c2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c30:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006c32:	2300      	movs	r3, #0
 8006c34:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006c36:	2300      	movs	r3, #0
 8006c38:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d101      	bne.n	8006c48 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006c44:	2303      	movs	r3, #3
 8006c46:	e0bf      	b.n	8006dc8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	781b      	ldrb	r3, [r3, #0]
 8006c4c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d050      	beq.n	8006cf6 <USBD_CDC_Setup+0xde>
 8006c54:	2b20      	cmp	r3, #32
 8006c56:	f040 80af 	bne.w	8006db8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	88db      	ldrh	r3, [r3, #6]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d03a      	beq.n	8006cd8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	b25b      	sxtb	r3, r3
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	da1b      	bge.n	8006ca4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	33b0      	adds	r3, #176	; 0xb0
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	4413      	add	r3, r2
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	683a      	ldr	r2, [r7, #0]
 8006c80:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006c82:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006c84:	683a      	ldr	r2, [r7, #0]
 8006c86:	88d2      	ldrh	r2, [r2, #6]
 8006c88:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	88db      	ldrh	r3, [r3, #6]
 8006c8e:	2b07      	cmp	r3, #7
 8006c90:	bf28      	it	cs
 8006c92:	2307      	movcs	r3, #7
 8006c94:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	89fa      	ldrh	r2, [r7, #14]
 8006c9a:	4619      	mov	r1, r3
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f001 fd89 	bl	80087b4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006ca2:	e090      	b.n	8006dc6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	785a      	ldrb	r2, [r3, #1]
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	88db      	ldrh	r3, [r3, #6]
 8006cb2:	2b3f      	cmp	r3, #63	; 0x3f
 8006cb4:	d803      	bhi.n	8006cbe <USBD_CDC_Setup+0xa6>
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	88db      	ldrh	r3, [r3, #6]
 8006cba:	b2da      	uxtb	r2, r3
 8006cbc:	e000      	b.n	8006cc0 <USBD_CDC_Setup+0xa8>
 8006cbe:	2240      	movs	r2, #64	; 0x40
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006cc6:	6939      	ldr	r1, [r7, #16]
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006cce:	461a      	mov	r2, r3
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f001 fd9b 	bl	800880c <USBD_CtlPrepareRx>
      break;
 8006cd6:	e076      	b.n	8006dc6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006cde:	687a      	ldr	r2, [r7, #4]
 8006ce0:	33b0      	adds	r3, #176	; 0xb0
 8006ce2:	009b      	lsls	r3, r3, #2
 8006ce4:	4413      	add	r3, r2
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	683a      	ldr	r2, [r7, #0]
 8006cec:	7850      	ldrb	r0, [r2, #1]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	6839      	ldr	r1, [r7, #0]
 8006cf2:	4798      	blx	r3
      break;
 8006cf4:	e067      	b.n	8006dc6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	785b      	ldrb	r3, [r3, #1]
 8006cfa:	2b0b      	cmp	r3, #11
 8006cfc:	d851      	bhi.n	8006da2 <USBD_CDC_Setup+0x18a>
 8006cfe:	a201      	add	r2, pc, #4	; (adr r2, 8006d04 <USBD_CDC_Setup+0xec>)
 8006d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d04:	08006d35 	.word	0x08006d35
 8006d08:	08006db1 	.word	0x08006db1
 8006d0c:	08006da3 	.word	0x08006da3
 8006d10:	08006da3 	.word	0x08006da3
 8006d14:	08006da3 	.word	0x08006da3
 8006d18:	08006da3 	.word	0x08006da3
 8006d1c:	08006da3 	.word	0x08006da3
 8006d20:	08006da3 	.word	0x08006da3
 8006d24:	08006da3 	.word	0x08006da3
 8006d28:	08006da3 	.word	0x08006da3
 8006d2c:	08006d5f 	.word	0x08006d5f
 8006d30:	08006d89 	.word	0x08006d89
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d3a:	b2db      	uxtb	r3, r3
 8006d3c:	2b03      	cmp	r3, #3
 8006d3e:	d107      	bne.n	8006d50 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006d40:	f107 030a 	add.w	r3, r7, #10
 8006d44:	2202      	movs	r2, #2
 8006d46:	4619      	mov	r1, r3
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f001 fd33 	bl	80087b4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006d4e:	e032      	b.n	8006db6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006d50:	6839      	ldr	r1, [r7, #0]
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f001 fcbd 	bl	80086d2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006d58:	2303      	movs	r3, #3
 8006d5a:	75fb      	strb	r3, [r7, #23]
          break;
 8006d5c:	e02b      	b.n	8006db6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d64:	b2db      	uxtb	r3, r3
 8006d66:	2b03      	cmp	r3, #3
 8006d68:	d107      	bne.n	8006d7a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006d6a:	f107 030d 	add.w	r3, r7, #13
 8006d6e:	2201      	movs	r2, #1
 8006d70:	4619      	mov	r1, r3
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f001 fd1e 	bl	80087b4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006d78:	e01d      	b.n	8006db6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006d7a:	6839      	ldr	r1, [r7, #0]
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f001 fca8 	bl	80086d2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006d82:	2303      	movs	r3, #3
 8006d84:	75fb      	strb	r3, [r7, #23]
          break;
 8006d86:	e016      	b.n	8006db6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d8e:	b2db      	uxtb	r3, r3
 8006d90:	2b03      	cmp	r3, #3
 8006d92:	d00f      	beq.n	8006db4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006d94:	6839      	ldr	r1, [r7, #0]
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f001 fc9b 	bl	80086d2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006d9c:	2303      	movs	r3, #3
 8006d9e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006da0:	e008      	b.n	8006db4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006da2:	6839      	ldr	r1, [r7, #0]
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f001 fc94 	bl	80086d2 <USBD_CtlError>
          ret = USBD_FAIL;
 8006daa:	2303      	movs	r3, #3
 8006dac:	75fb      	strb	r3, [r7, #23]
          break;
 8006dae:	e002      	b.n	8006db6 <USBD_CDC_Setup+0x19e>
          break;
 8006db0:	bf00      	nop
 8006db2:	e008      	b.n	8006dc6 <USBD_CDC_Setup+0x1ae>
          break;
 8006db4:	bf00      	nop
      }
      break;
 8006db6:	e006      	b.n	8006dc6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006db8:	6839      	ldr	r1, [r7, #0]
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f001 fc89 	bl	80086d2 <USBD_CtlError>
      ret = USBD_FAIL;
 8006dc0:	2303      	movs	r3, #3
 8006dc2:	75fb      	strb	r3, [r7, #23]
      break;
 8006dc4:	bf00      	nop
  }

  return (uint8_t)ret;
 8006dc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3718      	adds	r7, #24
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b084      	sub	sp, #16
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	460b      	mov	r3, r1
 8006dda:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006de2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	32b0      	adds	r2, #176	; 0xb0
 8006dee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d101      	bne.n	8006dfa <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006df6:	2303      	movs	r3, #3
 8006df8:	e065      	b.n	8006ec6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	32b0      	adds	r2, #176	; 0xb0
 8006e04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e08:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006e0a:	78fb      	ldrb	r3, [r7, #3]
 8006e0c:	f003 020f 	and.w	r2, r3, #15
 8006e10:	6879      	ldr	r1, [r7, #4]
 8006e12:	4613      	mov	r3, r2
 8006e14:	009b      	lsls	r3, r3, #2
 8006e16:	4413      	add	r3, r2
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	440b      	add	r3, r1
 8006e1c:	3318      	adds	r3, #24
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d02f      	beq.n	8006e84 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006e24:	78fb      	ldrb	r3, [r7, #3]
 8006e26:	f003 020f 	and.w	r2, r3, #15
 8006e2a:	6879      	ldr	r1, [r7, #4]
 8006e2c:	4613      	mov	r3, r2
 8006e2e:	009b      	lsls	r3, r3, #2
 8006e30:	4413      	add	r3, r2
 8006e32:	009b      	lsls	r3, r3, #2
 8006e34:	440b      	add	r3, r1
 8006e36:	3318      	adds	r3, #24
 8006e38:	681a      	ldr	r2, [r3, #0]
 8006e3a:	78fb      	ldrb	r3, [r7, #3]
 8006e3c:	f003 010f 	and.w	r1, r3, #15
 8006e40:	68f8      	ldr	r0, [r7, #12]
 8006e42:	460b      	mov	r3, r1
 8006e44:	00db      	lsls	r3, r3, #3
 8006e46:	440b      	add	r3, r1
 8006e48:	009b      	lsls	r3, r3, #2
 8006e4a:	4403      	add	r3, r0
 8006e4c:	3348      	adds	r3, #72	; 0x48
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	fbb2 f1f3 	udiv	r1, r2, r3
 8006e54:	fb01 f303 	mul.w	r3, r1, r3
 8006e58:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d112      	bne.n	8006e84 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006e5e:	78fb      	ldrb	r3, [r7, #3]
 8006e60:	f003 020f 	and.w	r2, r3, #15
 8006e64:	6879      	ldr	r1, [r7, #4]
 8006e66:	4613      	mov	r3, r2
 8006e68:	009b      	lsls	r3, r3, #2
 8006e6a:	4413      	add	r3, r2
 8006e6c:	009b      	lsls	r3, r3, #2
 8006e6e:	440b      	add	r3, r1
 8006e70:	3318      	adds	r3, #24
 8006e72:	2200      	movs	r2, #0
 8006e74:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006e76:	78f9      	ldrb	r1, [r7, #3]
 8006e78:	2300      	movs	r3, #0
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f002 f990 	bl	80091a2 <USBD_LL_Transmit>
 8006e82:	e01f      	b.n	8006ec4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	2200      	movs	r2, #0
 8006e88:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	33b0      	adds	r3, #176	; 0xb0
 8006e96:	009b      	lsls	r3, r3, #2
 8006e98:	4413      	add	r3, r2
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	691b      	ldr	r3, [r3, #16]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d010      	beq.n	8006ec4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	33b0      	adds	r3, #176	; 0xb0
 8006eac:	009b      	lsls	r3, r3, #2
 8006eae:	4413      	add	r3, r2
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	691b      	ldr	r3, [r3, #16]
 8006eb4:	68ba      	ldr	r2, [r7, #8]
 8006eb6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006eba:	68ba      	ldr	r2, [r7, #8]
 8006ebc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006ec0:	78fa      	ldrb	r2, [r7, #3]
 8006ec2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006ec4:	2300      	movs	r3, #0
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3710      	adds	r7, #16
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}

08006ece <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ece:	b580      	push	{r7, lr}
 8006ed0:	b084      	sub	sp, #16
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	6078      	str	r0, [r7, #4]
 8006ed6:	460b      	mov	r3, r1
 8006ed8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	32b0      	adds	r2, #176	; 0xb0
 8006ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ee8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	32b0      	adds	r2, #176	; 0xb0
 8006ef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d101      	bne.n	8006f00 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006efc:	2303      	movs	r3, #3
 8006efe:	e01a      	b.n	8006f36 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006f00:	78fb      	ldrb	r3, [r7, #3]
 8006f02:	4619      	mov	r1, r3
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f002 f98e 	bl	8009226 <USBD_LL_GetRxDataSize>
 8006f0a:	4602      	mov	r2, r0
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006f18:	687a      	ldr	r2, [r7, #4]
 8006f1a:	33b0      	adds	r3, #176	; 0xb0
 8006f1c:	009b      	lsls	r3, r3, #2
 8006f1e:	4413      	add	r3, r2
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	68db      	ldr	r3, [r3, #12]
 8006f24:	68fa      	ldr	r2, [r7, #12]
 8006f26:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006f2a:	68fa      	ldr	r2, [r7, #12]
 8006f2c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006f30:	4611      	mov	r1, r2
 8006f32:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006f34:	2300      	movs	r3, #0
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3710      	adds	r7, #16
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}

08006f3e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006f3e:	b580      	push	{r7, lr}
 8006f40:	b084      	sub	sp, #16
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	32b0      	adds	r2, #176	; 0xb0
 8006f50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f54:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d101      	bne.n	8006f60 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006f5c:	2303      	movs	r3, #3
 8006f5e:	e025      	b.n	8006fac <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006f66:	687a      	ldr	r2, [r7, #4]
 8006f68:	33b0      	adds	r3, #176	; 0xb0
 8006f6a:	009b      	lsls	r3, r3, #2
 8006f6c:	4413      	add	r3, r2
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d01a      	beq.n	8006faa <USBD_CDC_EP0_RxReady+0x6c>
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006f7a:	2bff      	cmp	r3, #255	; 0xff
 8006f7c:	d015      	beq.n	8006faa <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006f84:	687a      	ldr	r2, [r7, #4]
 8006f86:	33b0      	adds	r3, #176	; 0xb0
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	4413      	add	r3, r2
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	689b      	ldr	r3, [r3, #8]
 8006f90:	68fa      	ldr	r2, [r7, #12]
 8006f92:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006f96:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006f98:	68fa      	ldr	r2, [r7, #12]
 8006f9a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006f9e:	b292      	uxth	r2, r2
 8006fa0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	22ff      	movs	r2, #255	; 0xff
 8006fa6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006faa:	2300      	movs	r3, #0
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3710      	adds	r7, #16
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}

08006fb4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b086      	sub	sp, #24
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006fbc:	2182      	movs	r1, #130	; 0x82
 8006fbe:	4818      	ldr	r0, [pc, #96]	; (8007020 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006fc0:	f000 fd4f 	bl	8007a62 <USBD_GetEpDesc>
 8006fc4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006fc6:	2101      	movs	r1, #1
 8006fc8:	4815      	ldr	r0, [pc, #84]	; (8007020 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006fca:	f000 fd4a 	bl	8007a62 <USBD_GetEpDesc>
 8006fce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006fd0:	2181      	movs	r1, #129	; 0x81
 8006fd2:	4813      	ldr	r0, [pc, #76]	; (8007020 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006fd4:	f000 fd45 	bl	8007a62 <USBD_GetEpDesc>
 8006fd8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d002      	beq.n	8006fe6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	2210      	movs	r2, #16
 8006fe4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d006      	beq.n	8006ffa <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ff4:	711a      	strb	r2, [r3, #4]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d006      	beq.n	800700e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2200      	movs	r2, #0
 8007004:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007008:	711a      	strb	r2, [r3, #4]
 800700a:	2200      	movs	r2, #0
 800700c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2243      	movs	r2, #67	; 0x43
 8007012:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007014:	4b02      	ldr	r3, [pc, #8]	; (8007020 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007016:	4618      	mov	r0, r3
 8007018:	3718      	adds	r7, #24
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
 800701e:	bf00      	nop
 8007020:	20000050 	.word	0x20000050

08007024 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b086      	sub	sp, #24
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800702c:	2182      	movs	r1, #130	; 0x82
 800702e:	4818      	ldr	r0, [pc, #96]	; (8007090 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007030:	f000 fd17 	bl	8007a62 <USBD_GetEpDesc>
 8007034:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007036:	2101      	movs	r1, #1
 8007038:	4815      	ldr	r0, [pc, #84]	; (8007090 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800703a:	f000 fd12 	bl	8007a62 <USBD_GetEpDesc>
 800703e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007040:	2181      	movs	r1, #129	; 0x81
 8007042:	4813      	ldr	r0, [pc, #76]	; (8007090 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007044:	f000 fd0d 	bl	8007a62 <USBD_GetEpDesc>
 8007048:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d002      	beq.n	8007056 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	2210      	movs	r2, #16
 8007054:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d006      	beq.n	800706a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	2200      	movs	r2, #0
 8007060:	711a      	strb	r2, [r3, #4]
 8007062:	2200      	movs	r2, #0
 8007064:	f042 0202 	orr.w	r2, r2, #2
 8007068:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d006      	beq.n	800707e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2200      	movs	r2, #0
 8007074:	711a      	strb	r2, [r3, #4]
 8007076:	2200      	movs	r2, #0
 8007078:	f042 0202 	orr.w	r2, r2, #2
 800707c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2243      	movs	r2, #67	; 0x43
 8007082:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007084:	4b02      	ldr	r3, [pc, #8]	; (8007090 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007086:	4618      	mov	r0, r3
 8007088:	3718      	adds	r7, #24
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}
 800708e:	bf00      	nop
 8007090:	20000050 	.word	0x20000050

08007094 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b086      	sub	sp, #24
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800709c:	2182      	movs	r1, #130	; 0x82
 800709e:	4818      	ldr	r0, [pc, #96]	; (8007100 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80070a0:	f000 fcdf 	bl	8007a62 <USBD_GetEpDesc>
 80070a4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80070a6:	2101      	movs	r1, #1
 80070a8:	4815      	ldr	r0, [pc, #84]	; (8007100 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80070aa:	f000 fcda 	bl	8007a62 <USBD_GetEpDesc>
 80070ae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80070b0:	2181      	movs	r1, #129	; 0x81
 80070b2:	4813      	ldr	r0, [pc, #76]	; (8007100 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80070b4:	f000 fcd5 	bl	8007a62 <USBD_GetEpDesc>
 80070b8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d002      	beq.n	80070c6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	2210      	movs	r2, #16
 80070c4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d006      	beq.n	80070da <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	2200      	movs	r2, #0
 80070d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80070d4:	711a      	strb	r2, [r3, #4]
 80070d6:	2200      	movs	r2, #0
 80070d8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d006      	beq.n	80070ee <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2200      	movs	r2, #0
 80070e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80070e8:	711a      	strb	r2, [r3, #4]
 80070ea:	2200      	movs	r2, #0
 80070ec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2243      	movs	r2, #67	; 0x43
 80070f2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80070f4:	4b02      	ldr	r3, [pc, #8]	; (8007100 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3718      	adds	r7, #24
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}
 80070fe:	bf00      	nop
 8007100:	20000050 	.word	0x20000050

08007104 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007104:	b480      	push	{r7}
 8007106:	b083      	sub	sp, #12
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	220a      	movs	r2, #10
 8007110:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007112:	4b03      	ldr	r3, [pc, #12]	; (8007120 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007114:	4618      	mov	r0, r3
 8007116:	370c      	adds	r7, #12
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr
 8007120:	2000000c 	.word	0x2000000c

08007124 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007124:	b480      	push	{r7}
 8007126:	b083      	sub	sp, #12
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d101      	bne.n	8007138 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007134:	2303      	movs	r3, #3
 8007136:	e009      	b.n	800714c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800713e:	687a      	ldr	r2, [r7, #4]
 8007140:	33b0      	adds	r3, #176	; 0xb0
 8007142:	009b      	lsls	r3, r3, #2
 8007144:	4413      	add	r3, r2
 8007146:	683a      	ldr	r2, [r7, #0]
 8007148:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800714a:	2300      	movs	r3, #0
}
 800714c:	4618      	mov	r0, r3
 800714e:	370c      	adds	r7, #12
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr

08007158 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007158:	b480      	push	{r7}
 800715a:	b087      	sub	sp, #28
 800715c:	af00      	add	r7, sp, #0
 800715e:	60f8      	str	r0, [r7, #12]
 8007160:	60b9      	str	r1, [r7, #8]
 8007162:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	32b0      	adds	r2, #176	; 0xb0
 800716e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007172:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d101      	bne.n	800717e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800717a:	2303      	movs	r3, #3
 800717c:	e008      	b.n	8007190 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	68ba      	ldr	r2, [r7, #8]
 8007182:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800718e:	2300      	movs	r3, #0
}
 8007190:	4618      	mov	r0, r3
 8007192:	371c      	adds	r7, #28
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr

0800719c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800719c:	b480      	push	{r7}
 800719e:	b085      	sub	sp, #20
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	32b0      	adds	r2, #176	; 0xb0
 80071b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071b4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d101      	bne.n	80071c0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80071bc:	2303      	movs	r3, #3
 80071be:	e004      	b.n	80071ca <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	683a      	ldr	r2, [r7, #0]
 80071c4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80071c8:	2300      	movs	r3, #0
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3714      	adds	r7, #20
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr
	...

080071d8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b084      	sub	sp, #16
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	32b0      	adds	r2, #176	; 0xb0
 80071ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071ee:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80071f0:	2301      	movs	r3, #1
 80071f2:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	32b0      	adds	r2, #176	; 0xb0
 80071fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d101      	bne.n	800720a <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007206:	2303      	movs	r3, #3
 8007208:	e025      	b.n	8007256 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007210:	2b00      	cmp	r3, #0
 8007212:	d11f      	bne.n	8007254 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	2201      	movs	r2, #1
 8007218:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800721c:	4b10      	ldr	r3, [pc, #64]	; (8007260 <USBD_CDC_TransmitPacket+0x88>)
 800721e:	781b      	ldrb	r3, [r3, #0]
 8007220:	f003 020f 	and.w	r2, r3, #15
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	4613      	mov	r3, r2
 800722e:	009b      	lsls	r3, r3, #2
 8007230:	4413      	add	r3, r2
 8007232:	009b      	lsls	r3, r3, #2
 8007234:	4403      	add	r3, r0
 8007236:	3318      	adds	r3, #24
 8007238:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800723a:	4b09      	ldr	r3, [pc, #36]	; (8007260 <USBD_CDC_TransmitPacket+0x88>)
 800723c:	7819      	ldrb	r1, [r3, #0]
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f001 ffa9 	bl	80091a2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007250:	2300      	movs	r3, #0
 8007252:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007254:	7bfb      	ldrb	r3, [r7, #15]
}
 8007256:	4618      	mov	r0, r3
 8007258:	3710      	adds	r7, #16
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}
 800725e:	bf00      	nop
 8007260:	20000093 	.word	0x20000093

08007264 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b084      	sub	sp, #16
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	32b0      	adds	r2, #176	; 0xb0
 8007276:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800727a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	32b0      	adds	r2, #176	; 0xb0
 8007286:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d101      	bne.n	8007292 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800728e:	2303      	movs	r3, #3
 8007290:	e018      	b.n	80072c4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	7c1b      	ldrb	r3, [r3, #16]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d10a      	bne.n	80072b0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800729a:	4b0c      	ldr	r3, [pc, #48]	; (80072cc <USBD_CDC_ReceivePacket+0x68>)
 800729c:	7819      	ldrb	r1, [r3, #0]
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80072a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f001 ff9b 	bl	80091e4 <USBD_LL_PrepareReceive>
 80072ae:	e008      	b.n	80072c2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80072b0:	4b06      	ldr	r3, [pc, #24]	; (80072cc <USBD_CDC_ReceivePacket+0x68>)
 80072b2:	7819      	ldrb	r1, [r3, #0]
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80072ba:	2340      	movs	r3, #64	; 0x40
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f001 ff91 	bl	80091e4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80072c2:	2300      	movs	r3, #0
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3710      	adds	r7, #16
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}
 80072cc:	20000094 	.word	0x20000094

080072d0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b086      	sub	sp, #24
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	60f8      	str	r0, [r7, #12]
 80072d8:	60b9      	str	r1, [r7, #8]
 80072da:	4613      	mov	r3, r2
 80072dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d101      	bne.n	80072e8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80072e4:	2303      	movs	r3, #3
 80072e6:	e01f      	b.n	8007328 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2200      	movs	r2, #0
 80072ec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2200      	movs	r2, #0
 80072f4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2200      	movs	r2, #0
 80072fc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d003      	beq.n	800730e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	68ba      	ldr	r2, [r7, #8]
 800730a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2201      	movs	r2, #1
 8007312:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	79fa      	ldrb	r2, [r7, #7]
 800731a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800731c:	68f8      	ldr	r0, [r7, #12]
 800731e:	f001 fe0b 	bl	8008f38 <USBD_LL_Init>
 8007322:	4603      	mov	r3, r0
 8007324:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007326:	7dfb      	ldrb	r3, [r7, #23]
}
 8007328:	4618      	mov	r0, r3
 800732a:	3718      	adds	r7, #24
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b084      	sub	sp, #16
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800733a:	2300      	movs	r3, #0
 800733c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d101      	bne.n	8007348 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007344:	2303      	movs	r3, #3
 8007346:	e025      	b.n	8007394 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	683a      	ldr	r2, [r7, #0]
 800734c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	32ae      	adds	r2, #174	; 0xae
 800735a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800735e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007360:	2b00      	cmp	r3, #0
 8007362:	d00f      	beq.n	8007384 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	32ae      	adds	r2, #174	; 0xae
 800736e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007374:	f107 020e 	add.w	r2, r7, #14
 8007378:	4610      	mov	r0, r2
 800737a:	4798      	blx	r3
 800737c:	4602      	mov	r2, r0
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800738a:	1c5a      	adds	r2, r3, #1
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007392:	2300      	movs	r3, #0
}
 8007394:	4618      	mov	r0, r3
 8007396:	3710      	adds	r7, #16
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}

0800739c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b082      	sub	sp, #8
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f001 fe13 	bl	8008fd0 <USBD_LL_Start>
 80073aa:	4603      	mov	r3, r0
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3708      	adds	r7, #8
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}

080073b4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b083      	sub	sp, #12
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80073bc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80073be:	4618      	mov	r0, r3
 80073c0:	370c      	adds	r7, #12
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr

080073ca <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80073ca:	b580      	push	{r7, lr}
 80073cc:	b084      	sub	sp, #16
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	6078      	str	r0, [r7, #4]
 80073d2:	460b      	mov	r3, r1
 80073d4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80073d6:	2300      	movs	r3, #0
 80073d8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d009      	beq.n	80073f8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	78fa      	ldrb	r2, [r7, #3]
 80073ee:	4611      	mov	r1, r2
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	4798      	blx	r3
 80073f4:	4603      	mov	r3, r0
 80073f6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80073f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3710      	adds	r7, #16
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}

08007402 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007402:	b580      	push	{r7, lr}
 8007404:	b084      	sub	sp, #16
 8007406:	af00      	add	r7, sp, #0
 8007408:	6078      	str	r0, [r7, #4]
 800740a:	460b      	mov	r3, r1
 800740c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800740e:	2300      	movs	r3, #0
 8007410:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	78fa      	ldrb	r2, [r7, #3]
 800741c:	4611      	mov	r1, r2
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	4798      	blx	r3
 8007422:	4603      	mov	r3, r0
 8007424:	2b00      	cmp	r3, #0
 8007426:	d001      	beq.n	800742c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007428:	2303      	movs	r3, #3
 800742a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800742c:	7bfb      	ldrb	r3, [r7, #15]
}
 800742e:	4618      	mov	r0, r3
 8007430:	3710      	adds	r7, #16
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}

08007436 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007436:	b580      	push	{r7, lr}
 8007438:	b084      	sub	sp, #16
 800743a:	af00      	add	r7, sp, #0
 800743c:	6078      	str	r0, [r7, #4]
 800743e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007446:	6839      	ldr	r1, [r7, #0]
 8007448:	4618      	mov	r0, r3
 800744a:	f001 f908 	bl	800865e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2201      	movs	r2, #1
 8007452:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800745c:	461a      	mov	r2, r3
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800746a:	f003 031f 	and.w	r3, r3, #31
 800746e:	2b02      	cmp	r3, #2
 8007470:	d01a      	beq.n	80074a8 <USBD_LL_SetupStage+0x72>
 8007472:	2b02      	cmp	r3, #2
 8007474:	d822      	bhi.n	80074bc <USBD_LL_SetupStage+0x86>
 8007476:	2b00      	cmp	r3, #0
 8007478:	d002      	beq.n	8007480 <USBD_LL_SetupStage+0x4a>
 800747a:	2b01      	cmp	r3, #1
 800747c:	d00a      	beq.n	8007494 <USBD_LL_SetupStage+0x5e>
 800747e:	e01d      	b.n	80074bc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007486:	4619      	mov	r1, r3
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f000 fb5f 	bl	8007b4c <USBD_StdDevReq>
 800748e:	4603      	mov	r3, r0
 8007490:	73fb      	strb	r3, [r7, #15]
      break;
 8007492:	e020      	b.n	80074d6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800749a:	4619      	mov	r1, r3
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f000 fbc7 	bl	8007c30 <USBD_StdItfReq>
 80074a2:	4603      	mov	r3, r0
 80074a4:	73fb      	strb	r3, [r7, #15]
      break;
 80074a6:	e016      	b.n	80074d6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80074ae:	4619      	mov	r1, r3
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f000 fc29 	bl	8007d08 <USBD_StdEPReq>
 80074b6:	4603      	mov	r3, r0
 80074b8:	73fb      	strb	r3, [r7, #15]
      break;
 80074ba:	e00c      	b.n	80074d6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80074c2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80074c6:	b2db      	uxtb	r3, r3
 80074c8:	4619      	mov	r1, r3
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f001 fde0 	bl	8009090 <USBD_LL_StallEP>
 80074d0:	4603      	mov	r3, r0
 80074d2:	73fb      	strb	r3, [r7, #15]
      break;
 80074d4:	bf00      	nop
  }

  return ret;
 80074d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3710      	adds	r7, #16
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}

080074e0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b086      	sub	sp, #24
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	60f8      	str	r0, [r7, #12]
 80074e8:	460b      	mov	r3, r1
 80074ea:	607a      	str	r2, [r7, #4]
 80074ec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80074ee:	2300      	movs	r3, #0
 80074f0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80074f2:	7afb      	ldrb	r3, [r7, #11]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d16e      	bne.n	80075d6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80074fe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007506:	2b03      	cmp	r3, #3
 8007508:	f040 8098 	bne.w	800763c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	689a      	ldr	r2, [r3, #8]
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	68db      	ldr	r3, [r3, #12]
 8007514:	429a      	cmp	r2, r3
 8007516:	d913      	bls.n	8007540 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	689a      	ldr	r2, [r3, #8]
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	68db      	ldr	r3, [r3, #12]
 8007520:	1ad2      	subs	r2, r2, r3
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	68da      	ldr	r2, [r3, #12]
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	689b      	ldr	r3, [r3, #8]
 800752e:	4293      	cmp	r3, r2
 8007530:	bf28      	it	cs
 8007532:	4613      	movcs	r3, r2
 8007534:	461a      	mov	r2, r3
 8007536:	6879      	ldr	r1, [r7, #4]
 8007538:	68f8      	ldr	r0, [r7, #12]
 800753a:	f001 f984 	bl	8008846 <USBD_CtlContinueRx>
 800753e:	e07d      	b.n	800763c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007546:	f003 031f 	and.w	r3, r3, #31
 800754a:	2b02      	cmp	r3, #2
 800754c:	d014      	beq.n	8007578 <USBD_LL_DataOutStage+0x98>
 800754e:	2b02      	cmp	r3, #2
 8007550:	d81d      	bhi.n	800758e <USBD_LL_DataOutStage+0xae>
 8007552:	2b00      	cmp	r3, #0
 8007554:	d002      	beq.n	800755c <USBD_LL_DataOutStage+0x7c>
 8007556:	2b01      	cmp	r3, #1
 8007558:	d003      	beq.n	8007562 <USBD_LL_DataOutStage+0x82>
 800755a:	e018      	b.n	800758e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800755c:	2300      	movs	r3, #0
 800755e:	75bb      	strb	r3, [r7, #22]
            break;
 8007560:	e018      	b.n	8007594 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007568:	b2db      	uxtb	r3, r3
 800756a:	4619      	mov	r1, r3
 800756c:	68f8      	ldr	r0, [r7, #12]
 800756e:	f000 fa5e 	bl	8007a2e <USBD_CoreFindIF>
 8007572:	4603      	mov	r3, r0
 8007574:	75bb      	strb	r3, [r7, #22]
            break;
 8007576:	e00d      	b.n	8007594 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800757e:	b2db      	uxtb	r3, r3
 8007580:	4619      	mov	r1, r3
 8007582:	68f8      	ldr	r0, [r7, #12]
 8007584:	f000 fa60 	bl	8007a48 <USBD_CoreFindEP>
 8007588:	4603      	mov	r3, r0
 800758a:	75bb      	strb	r3, [r7, #22]
            break;
 800758c:	e002      	b.n	8007594 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800758e:	2300      	movs	r3, #0
 8007590:	75bb      	strb	r3, [r7, #22]
            break;
 8007592:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007594:	7dbb      	ldrb	r3, [r7, #22]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d119      	bne.n	80075ce <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075a0:	b2db      	uxtb	r3, r3
 80075a2:	2b03      	cmp	r3, #3
 80075a4:	d113      	bne.n	80075ce <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80075a6:	7dba      	ldrb	r2, [r7, #22]
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	32ae      	adds	r2, #174	; 0xae
 80075ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075b0:	691b      	ldr	r3, [r3, #16]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d00b      	beq.n	80075ce <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80075b6:	7dba      	ldrb	r2, [r7, #22]
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80075be:	7dba      	ldrb	r2, [r7, #22]
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	32ae      	adds	r2, #174	; 0xae
 80075c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075c8:	691b      	ldr	r3, [r3, #16]
 80075ca:	68f8      	ldr	r0, [r7, #12]
 80075cc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80075ce:	68f8      	ldr	r0, [r7, #12]
 80075d0:	f001 f94a 	bl	8008868 <USBD_CtlSendStatus>
 80075d4:	e032      	b.n	800763c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80075d6:	7afb      	ldrb	r3, [r7, #11]
 80075d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075dc:	b2db      	uxtb	r3, r3
 80075de:	4619      	mov	r1, r3
 80075e0:	68f8      	ldr	r0, [r7, #12]
 80075e2:	f000 fa31 	bl	8007a48 <USBD_CoreFindEP>
 80075e6:	4603      	mov	r3, r0
 80075e8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80075ea:	7dbb      	ldrb	r3, [r7, #22]
 80075ec:	2bff      	cmp	r3, #255	; 0xff
 80075ee:	d025      	beq.n	800763c <USBD_LL_DataOutStage+0x15c>
 80075f0:	7dbb      	ldrb	r3, [r7, #22]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d122      	bne.n	800763c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	2b03      	cmp	r3, #3
 8007600:	d117      	bne.n	8007632 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007602:	7dba      	ldrb	r2, [r7, #22]
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	32ae      	adds	r2, #174	; 0xae
 8007608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800760c:	699b      	ldr	r3, [r3, #24]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d00f      	beq.n	8007632 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007612:	7dba      	ldrb	r2, [r7, #22]
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800761a:	7dba      	ldrb	r2, [r7, #22]
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	32ae      	adds	r2, #174	; 0xae
 8007620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007624:	699b      	ldr	r3, [r3, #24]
 8007626:	7afa      	ldrb	r2, [r7, #11]
 8007628:	4611      	mov	r1, r2
 800762a:	68f8      	ldr	r0, [r7, #12]
 800762c:	4798      	blx	r3
 800762e:	4603      	mov	r3, r0
 8007630:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007632:	7dfb      	ldrb	r3, [r7, #23]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d001      	beq.n	800763c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007638:	7dfb      	ldrb	r3, [r7, #23]
 800763a:	e000      	b.n	800763e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800763c:	2300      	movs	r3, #0
}
 800763e:	4618      	mov	r0, r3
 8007640:	3718      	adds	r7, #24
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}

08007646 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007646:	b580      	push	{r7, lr}
 8007648:	b086      	sub	sp, #24
 800764a:	af00      	add	r7, sp, #0
 800764c:	60f8      	str	r0, [r7, #12]
 800764e:	460b      	mov	r3, r1
 8007650:	607a      	str	r2, [r7, #4]
 8007652:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007654:	7afb      	ldrb	r3, [r7, #11]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d16f      	bne.n	800773a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	3314      	adds	r3, #20
 800765e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007666:	2b02      	cmp	r3, #2
 8007668:	d15a      	bne.n	8007720 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	689a      	ldr	r2, [r3, #8]
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	68db      	ldr	r3, [r3, #12]
 8007672:	429a      	cmp	r2, r3
 8007674:	d914      	bls.n	80076a0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	689a      	ldr	r2, [r3, #8]
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	68db      	ldr	r3, [r3, #12]
 800767e:	1ad2      	subs	r2, r2, r3
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	689b      	ldr	r3, [r3, #8]
 8007688:	461a      	mov	r2, r3
 800768a:	6879      	ldr	r1, [r7, #4]
 800768c:	68f8      	ldr	r0, [r7, #12]
 800768e:	f001 f8ac 	bl	80087ea <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007692:	2300      	movs	r3, #0
 8007694:	2200      	movs	r2, #0
 8007696:	2100      	movs	r1, #0
 8007698:	68f8      	ldr	r0, [r7, #12]
 800769a:	f001 fda3 	bl	80091e4 <USBD_LL_PrepareReceive>
 800769e:	e03f      	b.n	8007720 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	68da      	ldr	r2, [r3, #12]
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	689b      	ldr	r3, [r3, #8]
 80076a8:	429a      	cmp	r2, r3
 80076aa:	d11c      	bne.n	80076e6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	685a      	ldr	r2, [r3, #4]
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d316      	bcc.n	80076e6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	685a      	ldr	r2, [r3, #4]
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d20f      	bcs.n	80076e6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80076c6:	2200      	movs	r2, #0
 80076c8:	2100      	movs	r1, #0
 80076ca:	68f8      	ldr	r0, [r7, #12]
 80076cc:	f001 f88d 	bl	80087ea <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2200      	movs	r2, #0
 80076d4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80076d8:	2300      	movs	r3, #0
 80076da:	2200      	movs	r2, #0
 80076dc:	2100      	movs	r1, #0
 80076de:	68f8      	ldr	r0, [r7, #12]
 80076e0:	f001 fd80 	bl	80091e4 <USBD_LL_PrepareReceive>
 80076e4:	e01c      	b.n	8007720 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076ec:	b2db      	uxtb	r3, r3
 80076ee:	2b03      	cmp	r3, #3
 80076f0:	d10f      	bne.n	8007712 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076f8:	68db      	ldr	r3, [r3, #12]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d009      	beq.n	8007712 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2200      	movs	r2, #0
 8007702:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800770c:	68db      	ldr	r3, [r3, #12]
 800770e:	68f8      	ldr	r0, [r7, #12]
 8007710:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007712:	2180      	movs	r1, #128	; 0x80
 8007714:	68f8      	ldr	r0, [r7, #12]
 8007716:	f001 fcbb 	bl	8009090 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800771a:	68f8      	ldr	r0, [r7, #12]
 800771c:	f001 f8b7 	bl	800888e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007726:	2b00      	cmp	r3, #0
 8007728:	d03a      	beq.n	80077a0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800772a:	68f8      	ldr	r0, [r7, #12]
 800772c:	f7ff fe42 	bl	80073b4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2200      	movs	r2, #0
 8007734:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007738:	e032      	b.n	80077a0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800773a:	7afb      	ldrb	r3, [r7, #11]
 800773c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007740:	b2db      	uxtb	r3, r3
 8007742:	4619      	mov	r1, r3
 8007744:	68f8      	ldr	r0, [r7, #12]
 8007746:	f000 f97f 	bl	8007a48 <USBD_CoreFindEP>
 800774a:	4603      	mov	r3, r0
 800774c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800774e:	7dfb      	ldrb	r3, [r7, #23]
 8007750:	2bff      	cmp	r3, #255	; 0xff
 8007752:	d025      	beq.n	80077a0 <USBD_LL_DataInStage+0x15a>
 8007754:	7dfb      	ldrb	r3, [r7, #23]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d122      	bne.n	80077a0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007760:	b2db      	uxtb	r3, r3
 8007762:	2b03      	cmp	r3, #3
 8007764:	d11c      	bne.n	80077a0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007766:	7dfa      	ldrb	r2, [r7, #23]
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	32ae      	adds	r2, #174	; 0xae
 800776c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007770:	695b      	ldr	r3, [r3, #20]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d014      	beq.n	80077a0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007776:	7dfa      	ldrb	r2, [r7, #23]
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800777e:	7dfa      	ldrb	r2, [r7, #23]
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	32ae      	adds	r2, #174	; 0xae
 8007784:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007788:	695b      	ldr	r3, [r3, #20]
 800778a:	7afa      	ldrb	r2, [r7, #11]
 800778c:	4611      	mov	r1, r2
 800778e:	68f8      	ldr	r0, [r7, #12]
 8007790:	4798      	blx	r3
 8007792:	4603      	mov	r3, r0
 8007794:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007796:	7dbb      	ldrb	r3, [r7, #22]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d001      	beq.n	80077a0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800779c:	7dbb      	ldrb	r3, [r7, #22]
 800779e:	e000      	b.n	80077a2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80077a0:	2300      	movs	r3, #0
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3718      	adds	r7, #24
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}

080077aa <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80077aa:	b580      	push	{r7, lr}
 80077ac:	b084      	sub	sp, #16
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80077b2:	2300      	movs	r3, #0
 80077b4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2201      	movs	r2, #1
 80077ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2200      	movs	r2, #0
 80077c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2200      	movs	r2, #0
 80077ca:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2200      	movs	r2, #0
 80077d0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2200      	movs	r2, #0
 80077d8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d014      	beq.n	8007810 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d00e      	beq.n	8007810 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077f8:	685b      	ldr	r3, [r3, #4]
 80077fa:	687a      	ldr	r2, [r7, #4]
 80077fc:	6852      	ldr	r2, [r2, #4]
 80077fe:	b2d2      	uxtb	r2, r2
 8007800:	4611      	mov	r1, r2
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	4798      	blx	r3
 8007806:	4603      	mov	r3, r0
 8007808:	2b00      	cmp	r3, #0
 800780a:	d001      	beq.n	8007810 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800780c:	2303      	movs	r3, #3
 800780e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007810:	2340      	movs	r3, #64	; 0x40
 8007812:	2200      	movs	r2, #0
 8007814:	2100      	movs	r1, #0
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f001 fbf5 	bl	8009006 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2201      	movs	r2, #1
 8007820:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2240      	movs	r2, #64	; 0x40
 8007828:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800782c:	2340      	movs	r3, #64	; 0x40
 800782e:	2200      	movs	r2, #0
 8007830:	2180      	movs	r1, #128	; 0x80
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f001 fbe7 	bl	8009006 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2201      	movs	r2, #1
 800783c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2240      	movs	r2, #64	; 0x40
 8007842:	621a      	str	r2, [r3, #32]

  return ret;
 8007844:	7bfb      	ldrb	r3, [r7, #15]
}
 8007846:	4618      	mov	r0, r3
 8007848:	3710      	adds	r7, #16
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}

0800784e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800784e:	b480      	push	{r7}
 8007850:	b083      	sub	sp, #12
 8007852:	af00      	add	r7, sp, #0
 8007854:	6078      	str	r0, [r7, #4]
 8007856:	460b      	mov	r3, r1
 8007858:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	78fa      	ldrb	r2, [r7, #3]
 800785e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007860:	2300      	movs	r3, #0
}
 8007862:	4618      	mov	r0, r3
 8007864:	370c      	adds	r7, #12
 8007866:	46bd      	mov	sp, r7
 8007868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786c:	4770      	bx	lr

0800786e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800786e:	b480      	push	{r7}
 8007870:	b083      	sub	sp, #12
 8007872:	af00      	add	r7, sp, #0
 8007874:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800787c:	b2da      	uxtb	r2, r3
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2204      	movs	r2, #4
 8007888:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800788c:	2300      	movs	r3, #0
}
 800788e:	4618      	mov	r0, r3
 8007890:	370c      	adds	r7, #12
 8007892:	46bd      	mov	sp, r7
 8007894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007898:	4770      	bx	lr

0800789a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800789a:	b480      	push	{r7}
 800789c:	b083      	sub	sp, #12
 800789e:	af00      	add	r7, sp, #0
 80078a0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078a8:	b2db      	uxtb	r3, r3
 80078aa:	2b04      	cmp	r3, #4
 80078ac:	d106      	bne.n	80078bc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80078b4:	b2da      	uxtb	r2, r3
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80078bc:	2300      	movs	r3, #0
}
 80078be:	4618      	mov	r0, r3
 80078c0:	370c      	adds	r7, #12
 80078c2:	46bd      	mov	sp, r7
 80078c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c8:	4770      	bx	lr

080078ca <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80078ca:	b580      	push	{r7, lr}
 80078cc:	b082      	sub	sp, #8
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078d8:	b2db      	uxtb	r3, r3
 80078da:	2b03      	cmp	r3, #3
 80078dc:	d110      	bne.n	8007900 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d00b      	beq.n	8007900 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078ee:	69db      	ldr	r3, [r3, #28]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d005      	beq.n	8007900 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078fa:	69db      	ldr	r3, [r3, #28]
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007900:	2300      	movs	r3, #0
}
 8007902:	4618      	mov	r0, r3
 8007904:	3708      	adds	r7, #8
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}

0800790a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800790a:	b580      	push	{r7, lr}
 800790c:	b082      	sub	sp, #8
 800790e:	af00      	add	r7, sp, #0
 8007910:	6078      	str	r0, [r7, #4]
 8007912:	460b      	mov	r3, r1
 8007914:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	32ae      	adds	r2, #174	; 0xae
 8007920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d101      	bne.n	800792c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007928:	2303      	movs	r3, #3
 800792a:	e01c      	b.n	8007966 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007932:	b2db      	uxtb	r3, r3
 8007934:	2b03      	cmp	r3, #3
 8007936:	d115      	bne.n	8007964 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	32ae      	adds	r2, #174	; 0xae
 8007942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007946:	6a1b      	ldr	r3, [r3, #32]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d00b      	beq.n	8007964 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	32ae      	adds	r2, #174	; 0xae
 8007956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800795a:	6a1b      	ldr	r3, [r3, #32]
 800795c:	78fa      	ldrb	r2, [r7, #3]
 800795e:	4611      	mov	r1, r2
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007964:	2300      	movs	r3, #0
}
 8007966:	4618      	mov	r0, r3
 8007968:	3708      	adds	r7, #8
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}

0800796e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800796e:	b580      	push	{r7, lr}
 8007970:	b082      	sub	sp, #8
 8007972:	af00      	add	r7, sp, #0
 8007974:	6078      	str	r0, [r7, #4]
 8007976:	460b      	mov	r3, r1
 8007978:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	32ae      	adds	r2, #174	; 0xae
 8007984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d101      	bne.n	8007990 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800798c:	2303      	movs	r3, #3
 800798e:	e01c      	b.n	80079ca <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007996:	b2db      	uxtb	r3, r3
 8007998:	2b03      	cmp	r3, #3
 800799a:	d115      	bne.n	80079c8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	32ae      	adds	r2, #174	; 0xae
 80079a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d00b      	beq.n	80079c8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	32ae      	adds	r2, #174	; 0xae
 80079ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c0:	78fa      	ldrb	r2, [r7, #3]
 80079c2:	4611      	mov	r1, r2
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80079c8:	2300      	movs	r3, #0
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3708      	adds	r7, #8
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}

080079d2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80079d2:	b480      	push	{r7}
 80079d4:	b083      	sub	sp, #12
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80079da:	2300      	movs	r3, #0
}
 80079dc:	4618      	mov	r0, r3
 80079de:	370c      	adds	r7, #12
 80079e0:	46bd      	mov	sp, r7
 80079e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e6:	4770      	bx	lr

080079e8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b084      	sub	sp, #16
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80079f0:	2300      	movs	r3, #0
 80079f2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2201      	movs	r2, #1
 80079f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d00e      	beq.n	8007a24 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	687a      	ldr	r2, [r7, #4]
 8007a10:	6852      	ldr	r2, [r2, #4]
 8007a12:	b2d2      	uxtb	r2, r2
 8007a14:	4611      	mov	r1, r2
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	4798      	blx	r3
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d001      	beq.n	8007a24 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007a20:	2303      	movs	r3, #3
 8007a22:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	3710      	adds	r7, #16
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}

08007a2e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007a2e:	b480      	push	{r7}
 8007a30:	b083      	sub	sp, #12
 8007a32:	af00      	add	r7, sp, #0
 8007a34:	6078      	str	r0, [r7, #4]
 8007a36:	460b      	mov	r3, r1
 8007a38:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007a3a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	370c      	adds	r7, #12
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr

08007a48 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b083      	sub	sp, #12
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
 8007a50:	460b      	mov	r3, r1
 8007a52:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007a54:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	370c      	adds	r7, #12
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a60:	4770      	bx	lr

08007a62 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007a62:	b580      	push	{r7, lr}
 8007a64:	b086      	sub	sp, #24
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	6078      	str	r0, [r7, #4]
 8007a6a:	460b      	mov	r3, r1
 8007a6c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007a76:	2300      	movs	r3, #0
 8007a78:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	885b      	ldrh	r3, [r3, #2]
 8007a7e:	b29a      	uxth	r2, r3
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	781b      	ldrb	r3, [r3, #0]
 8007a84:	b29b      	uxth	r3, r3
 8007a86:	429a      	cmp	r2, r3
 8007a88:	d920      	bls.n	8007acc <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	781b      	ldrb	r3, [r3, #0]
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007a92:	e013      	b.n	8007abc <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007a94:	f107 030a 	add.w	r3, r7, #10
 8007a98:	4619      	mov	r1, r3
 8007a9a:	6978      	ldr	r0, [r7, #20]
 8007a9c:	f000 f81b 	bl	8007ad6 <USBD_GetNextDesc>
 8007aa0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	785b      	ldrb	r3, [r3, #1]
 8007aa6:	2b05      	cmp	r3, #5
 8007aa8:	d108      	bne.n	8007abc <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	789b      	ldrb	r3, [r3, #2]
 8007ab2:	78fa      	ldrb	r2, [r7, #3]
 8007ab4:	429a      	cmp	r2, r3
 8007ab6:	d008      	beq.n	8007aca <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	885b      	ldrh	r3, [r3, #2]
 8007ac0:	b29a      	uxth	r2, r3
 8007ac2:	897b      	ldrh	r3, [r7, #10]
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d8e5      	bhi.n	8007a94 <USBD_GetEpDesc+0x32>
 8007ac8:	e000      	b.n	8007acc <USBD_GetEpDesc+0x6a>
          break;
 8007aca:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007acc:	693b      	ldr	r3, [r7, #16]
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3718      	adds	r7, #24
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}

08007ad6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007ad6:	b480      	push	{r7}
 8007ad8:	b085      	sub	sp, #20
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	6078      	str	r0, [r7, #4]
 8007ade:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	881a      	ldrh	r2, [r3, #0]
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	781b      	ldrb	r3, [r3, #0]
 8007aec:	b29b      	uxth	r3, r3
 8007aee:	4413      	add	r3, r2
 8007af0:	b29a      	uxth	r2, r3
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	781b      	ldrb	r3, [r3, #0]
 8007afa:	461a      	mov	r2, r3
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	4413      	add	r3, r2
 8007b00:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007b02:	68fb      	ldr	r3, [r7, #12]
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3714      	adds	r7, #20
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr

08007b10 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b087      	sub	sp, #28
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	781b      	ldrb	r3, [r3, #0]
 8007b20:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	3301      	adds	r3, #1
 8007b26:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	781b      	ldrb	r3, [r3, #0]
 8007b2c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007b2e:	8a3b      	ldrh	r3, [r7, #16]
 8007b30:	021b      	lsls	r3, r3, #8
 8007b32:	b21a      	sxth	r2, r3
 8007b34:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	b21b      	sxth	r3, r3
 8007b3c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007b3e:	89fb      	ldrh	r3, [r7, #14]
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	371c      	adds	r7, #28
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr

08007b4c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b084      	sub	sp, #16
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b56:	2300      	movs	r3, #0
 8007b58:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	781b      	ldrb	r3, [r3, #0]
 8007b5e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007b62:	2b40      	cmp	r3, #64	; 0x40
 8007b64:	d005      	beq.n	8007b72 <USBD_StdDevReq+0x26>
 8007b66:	2b40      	cmp	r3, #64	; 0x40
 8007b68:	d857      	bhi.n	8007c1a <USBD_StdDevReq+0xce>
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d00f      	beq.n	8007b8e <USBD_StdDevReq+0x42>
 8007b6e:	2b20      	cmp	r3, #32
 8007b70:	d153      	bne.n	8007c1a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	32ae      	adds	r2, #174	; 0xae
 8007b7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b80:	689b      	ldr	r3, [r3, #8]
 8007b82:	6839      	ldr	r1, [r7, #0]
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	4798      	blx	r3
 8007b88:	4603      	mov	r3, r0
 8007b8a:	73fb      	strb	r3, [r7, #15]
      break;
 8007b8c:	e04a      	b.n	8007c24 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	785b      	ldrb	r3, [r3, #1]
 8007b92:	2b09      	cmp	r3, #9
 8007b94:	d83b      	bhi.n	8007c0e <USBD_StdDevReq+0xc2>
 8007b96:	a201      	add	r2, pc, #4	; (adr r2, 8007b9c <USBD_StdDevReq+0x50>)
 8007b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b9c:	08007bf1 	.word	0x08007bf1
 8007ba0:	08007c05 	.word	0x08007c05
 8007ba4:	08007c0f 	.word	0x08007c0f
 8007ba8:	08007bfb 	.word	0x08007bfb
 8007bac:	08007c0f 	.word	0x08007c0f
 8007bb0:	08007bcf 	.word	0x08007bcf
 8007bb4:	08007bc5 	.word	0x08007bc5
 8007bb8:	08007c0f 	.word	0x08007c0f
 8007bbc:	08007be7 	.word	0x08007be7
 8007bc0:	08007bd9 	.word	0x08007bd9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007bc4:	6839      	ldr	r1, [r7, #0]
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 fa3c 	bl	8008044 <USBD_GetDescriptor>
          break;
 8007bcc:	e024      	b.n	8007c18 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007bce:	6839      	ldr	r1, [r7, #0]
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f000 fba1 	bl	8008318 <USBD_SetAddress>
          break;
 8007bd6:	e01f      	b.n	8007c18 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007bd8:	6839      	ldr	r1, [r7, #0]
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f000 fbe0 	bl	80083a0 <USBD_SetConfig>
 8007be0:	4603      	mov	r3, r0
 8007be2:	73fb      	strb	r3, [r7, #15]
          break;
 8007be4:	e018      	b.n	8007c18 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007be6:	6839      	ldr	r1, [r7, #0]
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f000 fc83 	bl	80084f4 <USBD_GetConfig>
          break;
 8007bee:	e013      	b.n	8007c18 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007bf0:	6839      	ldr	r1, [r7, #0]
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f000 fcb4 	bl	8008560 <USBD_GetStatus>
          break;
 8007bf8:	e00e      	b.n	8007c18 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007bfa:	6839      	ldr	r1, [r7, #0]
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f000 fce3 	bl	80085c8 <USBD_SetFeature>
          break;
 8007c02:	e009      	b.n	8007c18 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007c04:	6839      	ldr	r1, [r7, #0]
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 fd07 	bl	800861a <USBD_ClrFeature>
          break;
 8007c0c:	e004      	b.n	8007c18 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007c0e:	6839      	ldr	r1, [r7, #0]
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f000 fd5e 	bl	80086d2 <USBD_CtlError>
          break;
 8007c16:	bf00      	nop
      }
      break;
 8007c18:	e004      	b.n	8007c24 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007c1a:	6839      	ldr	r1, [r7, #0]
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f000 fd58 	bl	80086d2 <USBD_CtlError>
      break;
 8007c22:	bf00      	nop
  }

  return ret;
 8007c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3710      	adds	r7, #16
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}
 8007c2e:	bf00      	nop

08007c30 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b084      	sub	sp, #16
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
 8007c38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	781b      	ldrb	r3, [r3, #0]
 8007c42:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007c46:	2b40      	cmp	r3, #64	; 0x40
 8007c48:	d005      	beq.n	8007c56 <USBD_StdItfReq+0x26>
 8007c4a:	2b40      	cmp	r3, #64	; 0x40
 8007c4c:	d852      	bhi.n	8007cf4 <USBD_StdItfReq+0xc4>
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d001      	beq.n	8007c56 <USBD_StdItfReq+0x26>
 8007c52:	2b20      	cmp	r3, #32
 8007c54:	d14e      	bne.n	8007cf4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c5c:	b2db      	uxtb	r3, r3
 8007c5e:	3b01      	subs	r3, #1
 8007c60:	2b02      	cmp	r3, #2
 8007c62:	d840      	bhi.n	8007ce6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	889b      	ldrh	r3, [r3, #4]
 8007c68:	b2db      	uxtb	r3, r3
 8007c6a:	2b01      	cmp	r3, #1
 8007c6c:	d836      	bhi.n	8007cdc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	889b      	ldrh	r3, [r3, #4]
 8007c72:	b2db      	uxtb	r3, r3
 8007c74:	4619      	mov	r1, r3
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f7ff fed9 	bl	8007a2e <USBD_CoreFindIF>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007c80:	7bbb      	ldrb	r3, [r7, #14]
 8007c82:	2bff      	cmp	r3, #255	; 0xff
 8007c84:	d01d      	beq.n	8007cc2 <USBD_StdItfReq+0x92>
 8007c86:	7bbb      	ldrb	r3, [r7, #14]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d11a      	bne.n	8007cc2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007c8c:	7bba      	ldrb	r2, [r7, #14]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	32ae      	adds	r2, #174	; 0xae
 8007c92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c96:	689b      	ldr	r3, [r3, #8]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d00f      	beq.n	8007cbc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007c9c:	7bba      	ldrb	r2, [r7, #14]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007ca4:	7bba      	ldrb	r2, [r7, #14]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	32ae      	adds	r2, #174	; 0xae
 8007caa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cae:	689b      	ldr	r3, [r3, #8]
 8007cb0:	6839      	ldr	r1, [r7, #0]
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	4798      	blx	r3
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007cba:	e004      	b.n	8007cc6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007cbc:	2303      	movs	r3, #3
 8007cbe:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007cc0:	e001      	b.n	8007cc6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007cc2:	2303      	movs	r3, #3
 8007cc4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	88db      	ldrh	r3, [r3, #6]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d110      	bne.n	8007cf0 <USBD_StdItfReq+0xc0>
 8007cce:	7bfb      	ldrb	r3, [r7, #15]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d10d      	bne.n	8007cf0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f000 fdc7 	bl	8008868 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007cda:	e009      	b.n	8007cf0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007cdc:	6839      	ldr	r1, [r7, #0]
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f000 fcf7 	bl	80086d2 <USBD_CtlError>
          break;
 8007ce4:	e004      	b.n	8007cf0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007ce6:	6839      	ldr	r1, [r7, #0]
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f000 fcf2 	bl	80086d2 <USBD_CtlError>
          break;
 8007cee:	e000      	b.n	8007cf2 <USBD_StdItfReq+0xc2>
          break;
 8007cf0:	bf00      	nop
      }
      break;
 8007cf2:	e004      	b.n	8007cfe <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007cf4:	6839      	ldr	r1, [r7, #0]
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 fceb 	bl	80086d2 <USBD_CtlError>
      break;
 8007cfc:	bf00      	nop
  }

  return ret;
 8007cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3710      	adds	r7, #16
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b084      	sub	sp, #16
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007d12:	2300      	movs	r3, #0
 8007d14:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	889b      	ldrh	r3, [r3, #4]
 8007d1a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	781b      	ldrb	r3, [r3, #0]
 8007d20:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d24:	2b40      	cmp	r3, #64	; 0x40
 8007d26:	d007      	beq.n	8007d38 <USBD_StdEPReq+0x30>
 8007d28:	2b40      	cmp	r3, #64	; 0x40
 8007d2a:	f200 817f 	bhi.w	800802c <USBD_StdEPReq+0x324>
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d02a      	beq.n	8007d88 <USBD_StdEPReq+0x80>
 8007d32:	2b20      	cmp	r3, #32
 8007d34:	f040 817a 	bne.w	800802c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007d38:	7bbb      	ldrb	r3, [r7, #14]
 8007d3a:	4619      	mov	r1, r3
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f7ff fe83 	bl	8007a48 <USBD_CoreFindEP>
 8007d42:	4603      	mov	r3, r0
 8007d44:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007d46:	7b7b      	ldrb	r3, [r7, #13]
 8007d48:	2bff      	cmp	r3, #255	; 0xff
 8007d4a:	f000 8174 	beq.w	8008036 <USBD_StdEPReq+0x32e>
 8007d4e:	7b7b      	ldrb	r3, [r7, #13]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	f040 8170 	bne.w	8008036 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007d56:	7b7a      	ldrb	r2, [r7, #13]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007d5e:	7b7a      	ldrb	r2, [r7, #13]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	32ae      	adds	r2, #174	; 0xae
 8007d64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d68:	689b      	ldr	r3, [r3, #8]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	f000 8163 	beq.w	8008036 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007d70:	7b7a      	ldrb	r2, [r7, #13]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	32ae      	adds	r2, #174	; 0xae
 8007d76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d7a:	689b      	ldr	r3, [r3, #8]
 8007d7c:	6839      	ldr	r1, [r7, #0]
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	4798      	blx	r3
 8007d82:	4603      	mov	r3, r0
 8007d84:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007d86:	e156      	b.n	8008036 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	785b      	ldrb	r3, [r3, #1]
 8007d8c:	2b03      	cmp	r3, #3
 8007d8e:	d008      	beq.n	8007da2 <USBD_StdEPReq+0x9a>
 8007d90:	2b03      	cmp	r3, #3
 8007d92:	f300 8145 	bgt.w	8008020 <USBD_StdEPReq+0x318>
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	f000 809b 	beq.w	8007ed2 <USBD_StdEPReq+0x1ca>
 8007d9c:	2b01      	cmp	r3, #1
 8007d9e:	d03c      	beq.n	8007e1a <USBD_StdEPReq+0x112>
 8007da0:	e13e      	b.n	8008020 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007da8:	b2db      	uxtb	r3, r3
 8007daa:	2b02      	cmp	r3, #2
 8007dac:	d002      	beq.n	8007db4 <USBD_StdEPReq+0xac>
 8007dae:	2b03      	cmp	r3, #3
 8007db0:	d016      	beq.n	8007de0 <USBD_StdEPReq+0xd8>
 8007db2:	e02c      	b.n	8007e0e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007db4:	7bbb      	ldrb	r3, [r7, #14]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d00d      	beq.n	8007dd6 <USBD_StdEPReq+0xce>
 8007dba:	7bbb      	ldrb	r3, [r7, #14]
 8007dbc:	2b80      	cmp	r3, #128	; 0x80
 8007dbe:	d00a      	beq.n	8007dd6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007dc0:	7bbb      	ldrb	r3, [r7, #14]
 8007dc2:	4619      	mov	r1, r3
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f001 f963 	bl	8009090 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007dca:	2180      	movs	r1, #128	; 0x80
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f001 f95f 	bl	8009090 <USBD_LL_StallEP>
 8007dd2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007dd4:	e020      	b.n	8007e18 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007dd6:	6839      	ldr	r1, [r7, #0]
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f000 fc7a 	bl	80086d2 <USBD_CtlError>
              break;
 8007dde:	e01b      	b.n	8007e18 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	885b      	ldrh	r3, [r3, #2]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d10e      	bne.n	8007e06 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007de8:	7bbb      	ldrb	r3, [r7, #14]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d00b      	beq.n	8007e06 <USBD_StdEPReq+0xfe>
 8007dee:	7bbb      	ldrb	r3, [r7, #14]
 8007df0:	2b80      	cmp	r3, #128	; 0x80
 8007df2:	d008      	beq.n	8007e06 <USBD_StdEPReq+0xfe>
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	88db      	ldrh	r3, [r3, #6]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d104      	bne.n	8007e06 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007dfc:	7bbb      	ldrb	r3, [r7, #14]
 8007dfe:	4619      	mov	r1, r3
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f001 f945 	bl	8009090 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f000 fd2e 	bl	8008868 <USBD_CtlSendStatus>

              break;
 8007e0c:	e004      	b.n	8007e18 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007e0e:	6839      	ldr	r1, [r7, #0]
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f000 fc5e 	bl	80086d2 <USBD_CtlError>
              break;
 8007e16:	bf00      	nop
          }
          break;
 8007e18:	e107      	b.n	800802a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e20:	b2db      	uxtb	r3, r3
 8007e22:	2b02      	cmp	r3, #2
 8007e24:	d002      	beq.n	8007e2c <USBD_StdEPReq+0x124>
 8007e26:	2b03      	cmp	r3, #3
 8007e28:	d016      	beq.n	8007e58 <USBD_StdEPReq+0x150>
 8007e2a:	e04b      	b.n	8007ec4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e2c:	7bbb      	ldrb	r3, [r7, #14]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d00d      	beq.n	8007e4e <USBD_StdEPReq+0x146>
 8007e32:	7bbb      	ldrb	r3, [r7, #14]
 8007e34:	2b80      	cmp	r3, #128	; 0x80
 8007e36:	d00a      	beq.n	8007e4e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007e38:	7bbb      	ldrb	r3, [r7, #14]
 8007e3a:	4619      	mov	r1, r3
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f001 f927 	bl	8009090 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e42:	2180      	movs	r1, #128	; 0x80
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f001 f923 	bl	8009090 <USBD_LL_StallEP>
 8007e4a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007e4c:	e040      	b.n	8007ed0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007e4e:	6839      	ldr	r1, [r7, #0]
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f000 fc3e 	bl	80086d2 <USBD_CtlError>
              break;
 8007e56:	e03b      	b.n	8007ed0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	885b      	ldrh	r3, [r3, #2]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d136      	bne.n	8007ece <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007e60:	7bbb      	ldrb	r3, [r7, #14]
 8007e62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d004      	beq.n	8007e74 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007e6a:	7bbb      	ldrb	r3, [r7, #14]
 8007e6c:	4619      	mov	r1, r3
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f001 f92d 	bl	80090ce <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f000 fcf7 	bl	8008868 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007e7a:	7bbb      	ldrb	r3, [r7, #14]
 8007e7c:	4619      	mov	r1, r3
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f7ff fde2 	bl	8007a48 <USBD_CoreFindEP>
 8007e84:	4603      	mov	r3, r0
 8007e86:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007e88:	7b7b      	ldrb	r3, [r7, #13]
 8007e8a:	2bff      	cmp	r3, #255	; 0xff
 8007e8c:	d01f      	beq.n	8007ece <USBD_StdEPReq+0x1c6>
 8007e8e:	7b7b      	ldrb	r3, [r7, #13]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d11c      	bne.n	8007ece <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007e94:	7b7a      	ldrb	r2, [r7, #13]
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007e9c:	7b7a      	ldrb	r2, [r7, #13]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	32ae      	adds	r2, #174	; 0xae
 8007ea2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ea6:	689b      	ldr	r3, [r3, #8]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d010      	beq.n	8007ece <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007eac:	7b7a      	ldrb	r2, [r7, #13]
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	32ae      	adds	r2, #174	; 0xae
 8007eb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eb6:	689b      	ldr	r3, [r3, #8]
 8007eb8:	6839      	ldr	r1, [r7, #0]
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	4798      	blx	r3
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007ec2:	e004      	b.n	8007ece <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007ec4:	6839      	ldr	r1, [r7, #0]
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f000 fc03 	bl	80086d2 <USBD_CtlError>
              break;
 8007ecc:	e000      	b.n	8007ed0 <USBD_StdEPReq+0x1c8>
              break;
 8007ece:	bf00      	nop
          }
          break;
 8007ed0:	e0ab      	b.n	800802a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ed8:	b2db      	uxtb	r3, r3
 8007eda:	2b02      	cmp	r3, #2
 8007edc:	d002      	beq.n	8007ee4 <USBD_StdEPReq+0x1dc>
 8007ede:	2b03      	cmp	r3, #3
 8007ee0:	d032      	beq.n	8007f48 <USBD_StdEPReq+0x240>
 8007ee2:	e097      	b.n	8008014 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ee4:	7bbb      	ldrb	r3, [r7, #14]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d007      	beq.n	8007efa <USBD_StdEPReq+0x1f2>
 8007eea:	7bbb      	ldrb	r3, [r7, #14]
 8007eec:	2b80      	cmp	r3, #128	; 0x80
 8007eee:	d004      	beq.n	8007efa <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007ef0:	6839      	ldr	r1, [r7, #0]
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f000 fbed 	bl	80086d2 <USBD_CtlError>
                break;
 8007ef8:	e091      	b.n	800801e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007efa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	da0b      	bge.n	8007f1a <USBD_StdEPReq+0x212>
 8007f02:	7bbb      	ldrb	r3, [r7, #14]
 8007f04:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f08:	4613      	mov	r3, r2
 8007f0a:	009b      	lsls	r3, r3, #2
 8007f0c:	4413      	add	r3, r2
 8007f0e:	009b      	lsls	r3, r3, #2
 8007f10:	3310      	adds	r3, #16
 8007f12:	687a      	ldr	r2, [r7, #4]
 8007f14:	4413      	add	r3, r2
 8007f16:	3304      	adds	r3, #4
 8007f18:	e00b      	b.n	8007f32 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007f1a:	7bbb      	ldrb	r3, [r7, #14]
 8007f1c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f20:	4613      	mov	r3, r2
 8007f22:	009b      	lsls	r3, r3, #2
 8007f24:	4413      	add	r3, r2
 8007f26:	009b      	lsls	r3, r3, #2
 8007f28:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007f2c:	687a      	ldr	r2, [r7, #4]
 8007f2e:	4413      	add	r3, r2
 8007f30:	3304      	adds	r3, #4
 8007f32:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	2200      	movs	r2, #0
 8007f38:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	2202      	movs	r2, #2
 8007f3e:	4619      	mov	r1, r3
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f000 fc37 	bl	80087b4 <USBD_CtlSendData>
              break;
 8007f46:	e06a      	b.n	800801e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007f48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	da11      	bge.n	8007f74 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007f50:	7bbb      	ldrb	r3, [r7, #14]
 8007f52:	f003 020f 	and.w	r2, r3, #15
 8007f56:	6879      	ldr	r1, [r7, #4]
 8007f58:	4613      	mov	r3, r2
 8007f5a:	009b      	lsls	r3, r3, #2
 8007f5c:	4413      	add	r3, r2
 8007f5e:	009b      	lsls	r3, r3, #2
 8007f60:	440b      	add	r3, r1
 8007f62:	3324      	adds	r3, #36	; 0x24
 8007f64:	881b      	ldrh	r3, [r3, #0]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d117      	bne.n	8007f9a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007f6a:	6839      	ldr	r1, [r7, #0]
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f000 fbb0 	bl	80086d2 <USBD_CtlError>
                  break;
 8007f72:	e054      	b.n	800801e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007f74:	7bbb      	ldrb	r3, [r7, #14]
 8007f76:	f003 020f 	and.w	r2, r3, #15
 8007f7a:	6879      	ldr	r1, [r7, #4]
 8007f7c:	4613      	mov	r3, r2
 8007f7e:	009b      	lsls	r3, r3, #2
 8007f80:	4413      	add	r3, r2
 8007f82:	009b      	lsls	r3, r3, #2
 8007f84:	440b      	add	r3, r1
 8007f86:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007f8a:	881b      	ldrh	r3, [r3, #0]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d104      	bne.n	8007f9a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007f90:	6839      	ldr	r1, [r7, #0]
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f000 fb9d 	bl	80086d2 <USBD_CtlError>
                  break;
 8007f98:	e041      	b.n	800801e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f9a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	da0b      	bge.n	8007fba <USBD_StdEPReq+0x2b2>
 8007fa2:	7bbb      	ldrb	r3, [r7, #14]
 8007fa4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007fa8:	4613      	mov	r3, r2
 8007faa:	009b      	lsls	r3, r3, #2
 8007fac:	4413      	add	r3, r2
 8007fae:	009b      	lsls	r3, r3, #2
 8007fb0:	3310      	adds	r3, #16
 8007fb2:	687a      	ldr	r2, [r7, #4]
 8007fb4:	4413      	add	r3, r2
 8007fb6:	3304      	adds	r3, #4
 8007fb8:	e00b      	b.n	8007fd2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007fba:	7bbb      	ldrb	r3, [r7, #14]
 8007fbc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007fc0:	4613      	mov	r3, r2
 8007fc2:	009b      	lsls	r3, r3, #2
 8007fc4:	4413      	add	r3, r2
 8007fc6:	009b      	lsls	r3, r3, #2
 8007fc8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007fcc:	687a      	ldr	r2, [r7, #4]
 8007fce:	4413      	add	r3, r2
 8007fd0:	3304      	adds	r3, #4
 8007fd2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007fd4:	7bbb      	ldrb	r3, [r7, #14]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d002      	beq.n	8007fe0 <USBD_StdEPReq+0x2d8>
 8007fda:	7bbb      	ldrb	r3, [r7, #14]
 8007fdc:	2b80      	cmp	r3, #128	; 0x80
 8007fde:	d103      	bne.n	8007fe8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	601a      	str	r2, [r3, #0]
 8007fe6:	e00e      	b.n	8008006 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007fe8:	7bbb      	ldrb	r3, [r7, #14]
 8007fea:	4619      	mov	r1, r3
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f001 f88d 	bl	800910c <USBD_LL_IsStallEP>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d003      	beq.n	8008000 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	601a      	str	r2, [r3, #0]
 8007ffe:	e002      	b.n	8008006 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	2200      	movs	r2, #0
 8008004:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	2202      	movs	r2, #2
 800800a:	4619      	mov	r1, r3
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f000 fbd1 	bl	80087b4 <USBD_CtlSendData>
              break;
 8008012:	e004      	b.n	800801e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008014:	6839      	ldr	r1, [r7, #0]
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f000 fb5b 	bl	80086d2 <USBD_CtlError>
              break;
 800801c:	bf00      	nop
          }
          break;
 800801e:	e004      	b.n	800802a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008020:	6839      	ldr	r1, [r7, #0]
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 fb55 	bl	80086d2 <USBD_CtlError>
          break;
 8008028:	bf00      	nop
      }
      break;
 800802a:	e005      	b.n	8008038 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800802c:	6839      	ldr	r1, [r7, #0]
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f000 fb4f 	bl	80086d2 <USBD_CtlError>
      break;
 8008034:	e000      	b.n	8008038 <USBD_StdEPReq+0x330>
      break;
 8008036:	bf00      	nop
  }

  return ret;
 8008038:	7bfb      	ldrb	r3, [r7, #15]
}
 800803a:	4618      	mov	r0, r3
 800803c:	3710      	adds	r7, #16
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}
	...

08008044 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b084      	sub	sp, #16
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800804e:	2300      	movs	r3, #0
 8008050:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008052:	2300      	movs	r3, #0
 8008054:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008056:	2300      	movs	r3, #0
 8008058:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	885b      	ldrh	r3, [r3, #2]
 800805e:	0a1b      	lsrs	r3, r3, #8
 8008060:	b29b      	uxth	r3, r3
 8008062:	3b01      	subs	r3, #1
 8008064:	2b06      	cmp	r3, #6
 8008066:	f200 8128 	bhi.w	80082ba <USBD_GetDescriptor+0x276>
 800806a:	a201      	add	r2, pc, #4	; (adr r2, 8008070 <USBD_GetDescriptor+0x2c>)
 800806c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008070:	0800808d 	.word	0x0800808d
 8008074:	080080a5 	.word	0x080080a5
 8008078:	080080e5 	.word	0x080080e5
 800807c:	080082bb 	.word	0x080082bb
 8008080:	080082bb 	.word	0x080082bb
 8008084:	0800825b 	.word	0x0800825b
 8008088:	08008287 	.word	0x08008287
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	687a      	ldr	r2, [r7, #4]
 8008096:	7c12      	ldrb	r2, [r2, #16]
 8008098:	f107 0108 	add.w	r1, r7, #8
 800809c:	4610      	mov	r0, r2
 800809e:	4798      	blx	r3
 80080a0:	60f8      	str	r0, [r7, #12]
      break;
 80080a2:	e112      	b.n	80082ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	7c1b      	ldrb	r3, [r3, #16]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d10d      	bne.n	80080c8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080b4:	f107 0208 	add.w	r2, r7, #8
 80080b8:	4610      	mov	r0, r2
 80080ba:	4798      	blx	r3
 80080bc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	3301      	adds	r3, #1
 80080c2:	2202      	movs	r2, #2
 80080c4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80080c6:	e100      	b.n	80082ca <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080d0:	f107 0208 	add.w	r2, r7, #8
 80080d4:	4610      	mov	r0, r2
 80080d6:	4798      	blx	r3
 80080d8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	3301      	adds	r3, #1
 80080de:	2202      	movs	r2, #2
 80080e0:	701a      	strb	r2, [r3, #0]
      break;
 80080e2:	e0f2      	b.n	80082ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	885b      	ldrh	r3, [r3, #2]
 80080e8:	b2db      	uxtb	r3, r3
 80080ea:	2b05      	cmp	r3, #5
 80080ec:	f200 80ac 	bhi.w	8008248 <USBD_GetDescriptor+0x204>
 80080f0:	a201      	add	r2, pc, #4	; (adr r2, 80080f8 <USBD_GetDescriptor+0xb4>)
 80080f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080f6:	bf00      	nop
 80080f8:	08008111 	.word	0x08008111
 80080fc:	08008145 	.word	0x08008145
 8008100:	08008179 	.word	0x08008179
 8008104:	080081ad 	.word	0x080081ad
 8008108:	080081e1 	.word	0x080081e1
 800810c:	08008215 	.word	0x08008215
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008116:	685b      	ldr	r3, [r3, #4]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d00b      	beq.n	8008134 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008122:	685b      	ldr	r3, [r3, #4]
 8008124:	687a      	ldr	r2, [r7, #4]
 8008126:	7c12      	ldrb	r2, [r2, #16]
 8008128:	f107 0108 	add.w	r1, r7, #8
 800812c:	4610      	mov	r0, r2
 800812e:	4798      	blx	r3
 8008130:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008132:	e091      	b.n	8008258 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008134:	6839      	ldr	r1, [r7, #0]
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f000 facb 	bl	80086d2 <USBD_CtlError>
            err++;
 800813c:	7afb      	ldrb	r3, [r7, #11]
 800813e:	3301      	adds	r3, #1
 8008140:	72fb      	strb	r3, [r7, #11]
          break;
 8008142:	e089      	b.n	8008258 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800814a:	689b      	ldr	r3, [r3, #8]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d00b      	beq.n	8008168 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008156:	689b      	ldr	r3, [r3, #8]
 8008158:	687a      	ldr	r2, [r7, #4]
 800815a:	7c12      	ldrb	r2, [r2, #16]
 800815c:	f107 0108 	add.w	r1, r7, #8
 8008160:	4610      	mov	r0, r2
 8008162:	4798      	blx	r3
 8008164:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008166:	e077      	b.n	8008258 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008168:	6839      	ldr	r1, [r7, #0]
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f000 fab1 	bl	80086d2 <USBD_CtlError>
            err++;
 8008170:	7afb      	ldrb	r3, [r7, #11]
 8008172:	3301      	adds	r3, #1
 8008174:	72fb      	strb	r3, [r7, #11]
          break;
 8008176:	e06f      	b.n	8008258 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800817e:	68db      	ldr	r3, [r3, #12]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d00b      	beq.n	800819c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800818a:	68db      	ldr	r3, [r3, #12]
 800818c:	687a      	ldr	r2, [r7, #4]
 800818e:	7c12      	ldrb	r2, [r2, #16]
 8008190:	f107 0108 	add.w	r1, r7, #8
 8008194:	4610      	mov	r0, r2
 8008196:	4798      	blx	r3
 8008198:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800819a:	e05d      	b.n	8008258 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800819c:	6839      	ldr	r1, [r7, #0]
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f000 fa97 	bl	80086d2 <USBD_CtlError>
            err++;
 80081a4:	7afb      	ldrb	r3, [r7, #11]
 80081a6:	3301      	adds	r3, #1
 80081a8:	72fb      	strb	r3, [r7, #11]
          break;
 80081aa:	e055      	b.n	8008258 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081b2:	691b      	ldr	r3, [r3, #16]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d00b      	beq.n	80081d0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081be:	691b      	ldr	r3, [r3, #16]
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	7c12      	ldrb	r2, [r2, #16]
 80081c4:	f107 0108 	add.w	r1, r7, #8
 80081c8:	4610      	mov	r0, r2
 80081ca:	4798      	blx	r3
 80081cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081ce:	e043      	b.n	8008258 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081d0:	6839      	ldr	r1, [r7, #0]
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f000 fa7d 	bl	80086d2 <USBD_CtlError>
            err++;
 80081d8:	7afb      	ldrb	r3, [r7, #11]
 80081da:	3301      	adds	r3, #1
 80081dc:	72fb      	strb	r3, [r7, #11]
          break;
 80081de:	e03b      	b.n	8008258 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081e6:	695b      	ldr	r3, [r3, #20]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d00b      	beq.n	8008204 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081f2:	695b      	ldr	r3, [r3, #20]
 80081f4:	687a      	ldr	r2, [r7, #4]
 80081f6:	7c12      	ldrb	r2, [r2, #16]
 80081f8:	f107 0108 	add.w	r1, r7, #8
 80081fc:	4610      	mov	r0, r2
 80081fe:	4798      	blx	r3
 8008200:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008202:	e029      	b.n	8008258 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008204:	6839      	ldr	r1, [r7, #0]
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f000 fa63 	bl	80086d2 <USBD_CtlError>
            err++;
 800820c:	7afb      	ldrb	r3, [r7, #11]
 800820e:	3301      	adds	r3, #1
 8008210:	72fb      	strb	r3, [r7, #11]
          break;
 8008212:	e021      	b.n	8008258 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800821a:	699b      	ldr	r3, [r3, #24]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d00b      	beq.n	8008238 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008226:	699b      	ldr	r3, [r3, #24]
 8008228:	687a      	ldr	r2, [r7, #4]
 800822a:	7c12      	ldrb	r2, [r2, #16]
 800822c:	f107 0108 	add.w	r1, r7, #8
 8008230:	4610      	mov	r0, r2
 8008232:	4798      	blx	r3
 8008234:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008236:	e00f      	b.n	8008258 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008238:	6839      	ldr	r1, [r7, #0]
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 fa49 	bl	80086d2 <USBD_CtlError>
            err++;
 8008240:	7afb      	ldrb	r3, [r7, #11]
 8008242:	3301      	adds	r3, #1
 8008244:	72fb      	strb	r3, [r7, #11]
          break;
 8008246:	e007      	b.n	8008258 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008248:	6839      	ldr	r1, [r7, #0]
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f000 fa41 	bl	80086d2 <USBD_CtlError>
          err++;
 8008250:	7afb      	ldrb	r3, [r7, #11]
 8008252:	3301      	adds	r3, #1
 8008254:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008256:	bf00      	nop
      }
      break;
 8008258:	e037      	b.n	80082ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	7c1b      	ldrb	r3, [r3, #16]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d109      	bne.n	8008276 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800826a:	f107 0208 	add.w	r2, r7, #8
 800826e:	4610      	mov	r0, r2
 8008270:	4798      	blx	r3
 8008272:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008274:	e029      	b.n	80082ca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008276:	6839      	ldr	r1, [r7, #0]
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f000 fa2a 	bl	80086d2 <USBD_CtlError>
        err++;
 800827e:	7afb      	ldrb	r3, [r7, #11]
 8008280:	3301      	adds	r3, #1
 8008282:	72fb      	strb	r3, [r7, #11]
      break;
 8008284:	e021      	b.n	80082ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	7c1b      	ldrb	r3, [r3, #16]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d10d      	bne.n	80082aa <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008296:	f107 0208 	add.w	r2, r7, #8
 800829a:	4610      	mov	r0, r2
 800829c:	4798      	blx	r3
 800829e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	3301      	adds	r3, #1
 80082a4:	2207      	movs	r2, #7
 80082a6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80082a8:	e00f      	b.n	80082ca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80082aa:	6839      	ldr	r1, [r7, #0]
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f000 fa10 	bl	80086d2 <USBD_CtlError>
        err++;
 80082b2:	7afb      	ldrb	r3, [r7, #11]
 80082b4:	3301      	adds	r3, #1
 80082b6:	72fb      	strb	r3, [r7, #11]
      break;
 80082b8:	e007      	b.n	80082ca <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80082ba:	6839      	ldr	r1, [r7, #0]
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f000 fa08 	bl	80086d2 <USBD_CtlError>
      err++;
 80082c2:	7afb      	ldrb	r3, [r7, #11]
 80082c4:	3301      	adds	r3, #1
 80082c6:	72fb      	strb	r3, [r7, #11]
      break;
 80082c8:	bf00      	nop
  }

  if (err != 0U)
 80082ca:	7afb      	ldrb	r3, [r7, #11]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d11e      	bne.n	800830e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	88db      	ldrh	r3, [r3, #6]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d016      	beq.n	8008306 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80082d8:	893b      	ldrh	r3, [r7, #8]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d00e      	beq.n	80082fc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	88da      	ldrh	r2, [r3, #6]
 80082e2:	893b      	ldrh	r3, [r7, #8]
 80082e4:	4293      	cmp	r3, r2
 80082e6:	bf28      	it	cs
 80082e8:	4613      	movcs	r3, r2
 80082ea:	b29b      	uxth	r3, r3
 80082ec:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80082ee:	893b      	ldrh	r3, [r7, #8]
 80082f0:	461a      	mov	r2, r3
 80082f2:	68f9      	ldr	r1, [r7, #12]
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f000 fa5d 	bl	80087b4 <USBD_CtlSendData>
 80082fa:	e009      	b.n	8008310 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80082fc:	6839      	ldr	r1, [r7, #0]
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f000 f9e7 	bl	80086d2 <USBD_CtlError>
 8008304:	e004      	b.n	8008310 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f000 faae 	bl	8008868 <USBD_CtlSendStatus>
 800830c:	e000      	b.n	8008310 <USBD_GetDescriptor+0x2cc>
    return;
 800830e:	bf00      	nop
  }
}
 8008310:	3710      	adds	r7, #16
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}
 8008316:	bf00      	nop

08008318 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b084      	sub	sp, #16
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	889b      	ldrh	r3, [r3, #4]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d131      	bne.n	800838e <USBD_SetAddress+0x76>
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	88db      	ldrh	r3, [r3, #6]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d12d      	bne.n	800838e <USBD_SetAddress+0x76>
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	885b      	ldrh	r3, [r3, #2]
 8008336:	2b7f      	cmp	r3, #127	; 0x7f
 8008338:	d829      	bhi.n	800838e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	885b      	ldrh	r3, [r3, #2]
 800833e:	b2db      	uxtb	r3, r3
 8008340:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008344:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800834c:	b2db      	uxtb	r3, r3
 800834e:	2b03      	cmp	r3, #3
 8008350:	d104      	bne.n	800835c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008352:	6839      	ldr	r1, [r7, #0]
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f000 f9bc 	bl	80086d2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800835a:	e01d      	b.n	8008398 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	7bfa      	ldrb	r2, [r7, #15]
 8008360:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008364:	7bfb      	ldrb	r3, [r7, #15]
 8008366:	4619      	mov	r1, r3
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f000 fefb 	bl	8009164 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 fa7a 	bl	8008868 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008374:	7bfb      	ldrb	r3, [r7, #15]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d004      	beq.n	8008384 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2202      	movs	r2, #2
 800837e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008382:	e009      	b.n	8008398 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2201      	movs	r2, #1
 8008388:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800838c:	e004      	b.n	8008398 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800838e:	6839      	ldr	r1, [r7, #0]
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f000 f99e 	bl	80086d2 <USBD_CtlError>
  }
}
 8008396:	bf00      	nop
 8008398:	bf00      	nop
 800839a:	3710      	adds	r7, #16
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}

080083a0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b084      	sub	sp, #16
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
 80083a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80083aa:	2300      	movs	r3, #0
 80083ac:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	885b      	ldrh	r3, [r3, #2]
 80083b2:	b2da      	uxtb	r2, r3
 80083b4:	4b4e      	ldr	r3, [pc, #312]	; (80084f0 <USBD_SetConfig+0x150>)
 80083b6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80083b8:	4b4d      	ldr	r3, [pc, #308]	; (80084f0 <USBD_SetConfig+0x150>)
 80083ba:	781b      	ldrb	r3, [r3, #0]
 80083bc:	2b01      	cmp	r3, #1
 80083be:	d905      	bls.n	80083cc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80083c0:	6839      	ldr	r1, [r7, #0]
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f000 f985 	bl	80086d2 <USBD_CtlError>
    return USBD_FAIL;
 80083c8:	2303      	movs	r3, #3
 80083ca:	e08c      	b.n	80084e6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083d2:	b2db      	uxtb	r3, r3
 80083d4:	2b02      	cmp	r3, #2
 80083d6:	d002      	beq.n	80083de <USBD_SetConfig+0x3e>
 80083d8:	2b03      	cmp	r3, #3
 80083da:	d029      	beq.n	8008430 <USBD_SetConfig+0x90>
 80083dc:	e075      	b.n	80084ca <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80083de:	4b44      	ldr	r3, [pc, #272]	; (80084f0 <USBD_SetConfig+0x150>)
 80083e0:	781b      	ldrb	r3, [r3, #0]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d020      	beq.n	8008428 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80083e6:	4b42      	ldr	r3, [pc, #264]	; (80084f0 <USBD_SetConfig+0x150>)
 80083e8:	781b      	ldrb	r3, [r3, #0]
 80083ea:	461a      	mov	r2, r3
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80083f0:	4b3f      	ldr	r3, [pc, #252]	; (80084f0 <USBD_SetConfig+0x150>)
 80083f2:	781b      	ldrb	r3, [r3, #0]
 80083f4:	4619      	mov	r1, r3
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f7fe ffe7 	bl	80073ca <USBD_SetClassConfig>
 80083fc:	4603      	mov	r3, r0
 80083fe:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008400:	7bfb      	ldrb	r3, [r7, #15]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d008      	beq.n	8008418 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008406:	6839      	ldr	r1, [r7, #0]
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f000 f962 	bl	80086d2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2202      	movs	r2, #2
 8008412:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008416:	e065      	b.n	80084e4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f000 fa25 	bl	8008868 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2203      	movs	r2, #3
 8008422:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008426:	e05d      	b.n	80084e4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f000 fa1d 	bl	8008868 <USBD_CtlSendStatus>
      break;
 800842e:	e059      	b.n	80084e4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008430:	4b2f      	ldr	r3, [pc, #188]	; (80084f0 <USBD_SetConfig+0x150>)
 8008432:	781b      	ldrb	r3, [r3, #0]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d112      	bne.n	800845e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2202      	movs	r2, #2
 800843c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008440:	4b2b      	ldr	r3, [pc, #172]	; (80084f0 <USBD_SetConfig+0x150>)
 8008442:	781b      	ldrb	r3, [r3, #0]
 8008444:	461a      	mov	r2, r3
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800844a:	4b29      	ldr	r3, [pc, #164]	; (80084f0 <USBD_SetConfig+0x150>)
 800844c:	781b      	ldrb	r3, [r3, #0]
 800844e:	4619      	mov	r1, r3
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f7fe ffd6 	bl	8007402 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f000 fa06 	bl	8008868 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800845c:	e042      	b.n	80084e4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800845e:	4b24      	ldr	r3, [pc, #144]	; (80084f0 <USBD_SetConfig+0x150>)
 8008460:	781b      	ldrb	r3, [r3, #0]
 8008462:	461a      	mov	r2, r3
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	685b      	ldr	r3, [r3, #4]
 8008468:	429a      	cmp	r2, r3
 800846a:	d02a      	beq.n	80084c2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	685b      	ldr	r3, [r3, #4]
 8008470:	b2db      	uxtb	r3, r3
 8008472:	4619      	mov	r1, r3
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f7fe ffc4 	bl	8007402 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800847a:	4b1d      	ldr	r3, [pc, #116]	; (80084f0 <USBD_SetConfig+0x150>)
 800847c:	781b      	ldrb	r3, [r3, #0]
 800847e:	461a      	mov	r2, r3
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008484:	4b1a      	ldr	r3, [pc, #104]	; (80084f0 <USBD_SetConfig+0x150>)
 8008486:	781b      	ldrb	r3, [r3, #0]
 8008488:	4619      	mov	r1, r3
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f7fe ff9d 	bl	80073ca <USBD_SetClassConfig>
 8008490:	4603      	mov	r3, r0
 8008492:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008494:	7bfb      	ldrb	r3, [r7, #15]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d00f      	beq.n	80084ba <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800849a:	6839      	ldr	r1, [r7, #0]
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f000 f918 	bl	80086d2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	685b      	ldr	r3, [r3, #4]
 80084a6:	b2db      	uxtb	r3, r3
 80084a8:	4619      	mov	r1, r3
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f7fe ffa9 	bl	8007402 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2202      	movs	r2, #2
 80084b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80084b8:	e014      	b.n	80084e4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f000 f9d4 	bl	8008868 <USBD_CtlSendStatus>
      break;
 80084c0:	e010      	b.n	80084e4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f000 f9d0 	bl	8008868 <USBD_CtlSendStatus>
      break;
 80084c8:	e00c      	b.n	80084e4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80084ca:	6839      	ldr	r1, [r7, #0]
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f000 f900 	bl	80086d2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80084d2:	4b07      	ldr	r3, [pc, #28]	; (80084f0 <USBD_SetConfig+0x150>)
 80084d4:	781b      	ldrb	r3, [r3, #0]
 80084d6:	4619      	mov	r1, r3
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f7fe ff92 	bl	8007402 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80084de:	2303      	movs	r3, #3
 80084e0:	73fb      	strb	r3, [r7, #15]
      break;
 80084e2:	bf00      	nop
  }

  return ret;
 80084e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3710      	adds	r7, #16
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}
 80084ee:	bf00      	nop
 80084f0:	200003f4 	.word	0x200003f4

080084f4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b082      	sub	sp, #8
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	88db      	ldrh	r3, [r3, #6]
 8008502:	2b01      	cmp	r3, #1
 8008504:	d004      	beq.n	8008510 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008506:	6839      	ldr	r1, [r7, #0]
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f000 f8e2 	bl	80086d2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800850e:	e023      	b.n	8008558 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008516:	b2db      	uxtb	r3, r3
 8008518:	2b02      	cmp	r3, #2
 800851a:	dc02      	bgt.n	8008522 <USBD_GetConfig+0x2e>
 800851c:	2b00      	cmp	r3, #0
 800851e:	dc03      	bgt.n	8008528 <USBD_GetConfig+0x34>
 8008520:	e015      	b.n	800854e <USBD_GetConfig+0x5a>
 8008522:	2b03      	cmp	r3, #3
 8008524:	d00b      	beq.n	800853e <USBD_GetConfig+0x4a>
 8008526:	e012      	b.n	800854e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2200      	movs	r2, #0
 800852c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	3308      	adds	r3, #8
 8008532:	2201      	movs	r2, #1
 8008534:	4619      	mov	r1, r3
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 f93c 	bl	80087b4 <USBD_CtlSendData>
        break;
 800853c:	e00c      	b.n	8008558 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	3304      	adds	r3, #4
 8008542:	2201      	movs	r2, #1
 8008544:	4619      	mov	r1, r3
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f000 f934 	bl	80087b4 <USBD_CtlSendData>
        break;
 800854c:	e004      	b.n	8008558 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800854e:	6839      	ldr	r1, [r7, #0]
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f000 f8be 	bl	80086d2 <USBD_CtlError>
        break;
 8008556:	bf00      	nop
}
 8008558:	bf00      	nop
 800855a:	3708      	adds	r7, #8
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}

08008560 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b082      	sub	sp, #8
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008570:	b2db      	uxtb	r3, r3
 8008572:	3b01      	subs	r3, #1
 8008574:	2b02      	cmp	r3, #2
 8008576:	d81e      	bhi.n	80085b6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	88db      	ldrh	r3, [r3, #6]
 800857c:	2b02      	cmp	r3, #2
 800857e:	d004      	beq.n	800858a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008580:	6839      	ldr	r1, [r7, #0]
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f000 f8a5 	bl	80086d2 <USBD_CtlError>
        break;
 8008588:	e01a      	b.n	80085c0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2201      	movs	r2, #1
 800858e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008596:	2b00      	cmp	r3, #0
 8008598:	d005      	beq.n	80085a6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	68db      	ldr	r3, [r3, #12]
 800859e:	f043 0202 	orr.w	r2, r3, #2
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	330c      	adds	r3, #12
 80085aa:	2202      	movs	r2, #2
 80085ac:	4619      	mov	r1, r3
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f000 f900 	bl	80087b4 <USBD_CtlSendData>
      break;
 80085b4:	e004      	b.n	80085c0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80085b6:	6839      	ldr	r1, [r7, #0]
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f000 f88a 	bl	80086d2 <USBD_CtlError>
      break;
 80085be:	bf00      	nop
  }
}
 80085c0:	bf00      	nop
 80085c2:	3708      	adds	r7, #8
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}

080085c8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b082      	sub	sp, #8
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
 80085d0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	885b      	ldrh	r3, [r3, #2]
 80085d6:	2b01      	cmp	r3, #1
 80085d8:	d107      	bne.n	80085ea <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2201      	movs	r2, #1
 80085de:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f000 f940 	bl	8008868 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80085e8:	e013      	b.n	8008612 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	885b      	ldrh	r3, [r3, #2]
 80085ee:	2b02      	cmp	r3, #2
 80085f0:	d10b      	bne.n	800860a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	889b      	ldrh	r3, [r3, #4]
 80085f6:	0a1b      	lsrs	r3, r3, #8
 80085f8:	b29b      	uxth	r3, r3
 80085fa:	b2da      	uxtb	r2, r3
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 f930 	bl	8008868 <USBD_CtlSendStatus>
}
 8008608:	e003      	b.n	8008612 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800860a:	6839      	ldr	r1, [r7, #0]
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f000 f860 	bl	80086d2 <USBD_CtlError>
}
 8008612:	bf00      	nop
 8008614:	3708      	adds	r7, #8
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}

0800861a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800861a:	b580      	push	{r7, lr}
 800861c:	b082      	sub	sp, #8
 800861e:	af00      	add	r7, sp, #0
 8008620:	6078      	str	r0, [r7, #4]
 8008622:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800862a:	b2db      	uxtb	r3, r3
 800862c:	3b01      	subs	r3, #1
 800862e:	2b02      	cmp	r3, #2
 8008630:	d80b      	bhi.n	800864a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	885b      	ldrh	r3, [r3, #2]
 8008636:	2b01      	cmp	r3, #1
 8008638:	d10c      	bne.n	8008654 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2200      	movs	r2, #0
 800863e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f000 f910 	bl	8008868 <USBD_CtlSendStatus>
      }
      break;
 8008648:	e004      	b.n	8008654 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800864a:	6839      	ldr	r1, [r7, #0]
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f000 f840 	bl	80086d2 <USBD_CtlError>
      break;
 8008652:	e000      	b.n	8008656 <USBD_ClrFeature+0x3c>
      break;
 8008654:	bf00      	nop
  }
}
 8008656:	bf00      	nop
 8008658:	3708      	adds	r7, #8
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}

0800865e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800865e:	b580      	push	{r7, lr}
 8008660:	b084      	sub	sp, #16
 8008662:	af00      	add	r7, sp, #0
 8008664:	6078      	str	r0, [r7, #4]
 8008666:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	781a      	ldrb	r2, [r3, #0]
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	3301      	adds	r3, #1
 8008678:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	781a      	ldrb	r2, [r3, #0]
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	3301      	adds	r3, #1
 8008686:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008688:	68f8      	ldr	r0, [r7, #12]
 800868a:	f7ff fa41 	bl	8007b10 <SWAPBYTE>
 800868e:	4603      	mov	r3, r0
 8008690:	461a      	mov	r2, r3
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	3301      	adds	r3, #1
 800869a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	3301      	adds	r3, #1
 80086a0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80086a2:	68f8      	ldr	r0, [r7, #12]
 80086a4:	f7ff fa34 	bl	8007b10 <SWAPBYTE>
 80086a8:	4603      	mov	r3, r0
 80086aa:	461a      	mov	r2, r3
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	3301      	adds	r3, #1
 80086b4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	3301      	adds	r3, #1
 80086ba:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80086bc:	68f8      	ldr	r0, [r7, #12]
 80086be:	f7ff fa27 	bl	8007b10 <SWAPBYTE>
 80086c2:	4603      	mov	r3, r0
 80086c4:	461a      	mov	r2, r3
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	80da      	strh	r2, [r3, #6]
}
 80086ca:	bf00      	nop
 80086cc:	3710      	adds	r7, #16
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}

080086d2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086d2:	b580      	push	{r7, lr}
 80086d4:	b082      	sub	sp, #8
 80086d6:	af00      	add	r7, sp, #0
 80086d8:	6078      	str	r0, [r7, #4]
 80086da:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80086dc:	2180      	movs	r1, #128	; 0x80
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f000 fcd6 	bl	8009090 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80086e4:	2100      	movs	r1, #0
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f000 fcd2 	bl	8009090 <USBD_LL_StallEP>
}
 80086ec:	bf00      	nop
 80086ee:	3708      	adds	r7, #8
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}

080086f4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b086      	sub	sp, #24
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	60f8      	str	r0, [r7, #12]
 80086fc:	60b9      	str	r1, [r7, #8]
 80086fe:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008700:	2300      	movs	r3, #0
 8008702:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d036      	beq.n	8008778 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800870e:	6938      	ldr	r0, [r7, #16]
 8008710:	f000 f836 	bl	8008780 <USBD_GetLen>
 8008714:	4603      	mov	r3, r0
 8008716:	3301      	adds	r3, #1
 8008718:	b29b      	uxth	r3, r3
 800871a:	005b      	lsls	r3, r3, #1
 800871c:	b29a      	uxth	r2, r3
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008722:	7dfb      	ldrb	r3, [r7, #23]
 8008724:	68ba      	ldr	r2, [r7, #8]
 8008726:	4413      	add	r3, r2
 8008728:	687a      	ldr	r2, [r7, #4]
 800872a:	7812      	ldrb	r2, [r2, #0]
 800872c:	701a      	strb	r2, [r3, #0]
  idx++;
 800872e:	7dfb      	ldrb	r3, [r7, #23]
 8008730:	3301      	adds	r3, #1
 8008732:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008734:	7dfb      	ldrb	r3, [r7, #23]
 8008736:	68ba      	ldr	r2, [r7, #8]
 8008738:	4413      	add	r3, r2
 800873a:	2203      	movs	r2, #3
 800873c:	701a      	strb	r2, [r3, #0]
  idx++;
 800873e:	7dfb      	ldrb	r3, [r7, #23]
 8008740:	3301      	adds	r3, #1
 8008742:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008744:	e013      	b.n	800876e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008746:	7dfb      	ldrb	r3, [r7, #23]
 8008748:	68ba      	ldr	r2, [r7, #8]
 800874a:	4413      	add	r3, r2
 800874c:	693a      	ldr	r2, [r7, #16]
 800874e:	7812      	ldrb	r2, [r2, #0]
 8008750:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	3301      	adds	r3, #1
 8008756:	613b      	str	r3, [r7, #16]
    idx++;
 8008758:	7dfb      	ldrb	r3, [r7, #23]
 800875a:	3301      	adds	r3, #1
 800875c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800875e:	7dfb      	ldrb	r3, [r7, #23]
 8008760:	68ba      	ldr	r2, [r7, #8]
 8008762:	4413      	add	r3, r2
 8008764:	2200      	movs	r2, #0
 8008766:	701a      	strb	r2, [r3, #0]
    idx++;
 8008768:	7dfb      	ldrb	r3, [r7, #23]
 800876a:	3301      	adds	r3, #1
 800876c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	781b      	ldrb	r3, [r3, #0]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d1e7      	bne.n	8008746 <USBD_GetString+0x52>
 8008776:	e000      	b.n	800877a <USBD_GetString+0x86>
    return;
 8008778:	bf00      	nop
  }
}
 800877a:	3718      	adds	r7, #24
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}

08008780 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008780:	b480      	push	{r7}
 8008782:	b085      	sub	sp, #20
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008788:	2300      	movs	r3, #0
 800878a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008790:	e005      	b.n	800879e <USBD_GetLen+0x1e>
  {
    len++;
 8008792:	7bfb      	ldrb	r3, [r7, #15]
 8008794:	3301      	adds	r3, #1
 8008796:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	3301      	adds	r3, #1
 800879c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	781b      	ldrb	r3, [r3, #0]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d1f5      	bne.n	8008792 <USBD_GetLen+0x12>
  }

  return len;
 80087a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3714      	adds	r7, #20
 80087ac:	46bd      	mov	sp, r7
 80087ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b2:	4770      	bx	lr

080087b4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b084      	sub	sp, #16
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	60f8      	str	r0, [r7, #12]
 80087bc:	60b9      	str	r1, [r7, #8]
 80087be:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	2202      	movs	r2, #2
 80087c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	687a      	ldr	r2, [r7, #4]
 80087cc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	687a      	ldr	r2, [r7, #4]
 80087d2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	68ba      	ldr	r2, [r7, #8]
 80087d8:	2100      	movs	r1, #0
 80087da:	68f8      	ldr	r0, [r7, #12]
 80087dc:	f000 fce1 	bl	80091a2 <USBD_LL_Transmit>

  return USBD_OK;
 80087e0:	2300      	movs	r3, #0
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3710      	adds	r7, #16
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}

080087ea <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80087ea:	b580      	push	{r7, lr}
 80087ec:	b084      	sub	sp, #16
 80087ee:	af00      	add	r7, sp, #0
 80087f0:	60f8      	str	r0, [r7, #12]
 80087f2:	60b9      	str	r1, [r7, #8]
 80087f4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	68ba      	ldr	r2, [r7, #8]
 80087fa:	2100      	movs	r1, #0
 80087fc:	68f8      	ldr	r0, [r7, #12]
 80087fe:	f000 fcd0 	bl	80091a2 <USBD_LL_Transmit>

  return USBD_OK;
 8008802:	2300      	movs	r3, #0
}
 8008804:	4618      	mov	r0, r3
 8008806:	3710      	adds	r7, #16
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}

0800880c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b084      	sub	sp, #16
 8008810:	af00      	add	r7, sp, #0
 8008812:	60f8      	str	r0, [r7, #12]
 8008814:	60b9      	str	r1, [r7, #8]
 8008816:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	2203      	movs	r2, #3
 800881c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	687a      	ldr	r2, [r7, #4]
 8008824:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	687a      	ldr	r2, [r7, #4]
 800882c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	68ba      	ldr	r2, [r7, #8]
 8008834:	2100      	movs	r1, #0
 8008836:	68f8      	ldr	r0, [r7, #12]
 8008838:	f000 fcd4 	bl	80091e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800883c:	2300      	movs	r3, #0
}
 800883e:	4618      	mov	r0, r3
 8008840:	3710      	adds	r7, #16
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}

08008846 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008846:	b580      	push	{r7, lr}
 8008848:	b084      	sub	sp, #16
 800884a:	af00      	add	r7, sp, #0
 800884c:	60f8      	str	r0, [r7, #12]
 800884e:	60b9      	str	r1, [r7, #8]
 8008850:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	68ba      	ldr	r2, [r7, #8]
 8008856:	2100      	movs	r1, #0
 8008858:	68f8      	ldr	r0, [r7, #12]
 800885a:	f000 fcc3 	bl	80091e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800885e:	2300      	movs	r3, #0
}
 8008860:	4618      	mov	r0, r3
 8008862:	3710      	adds	r7, #16
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}

08008868 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b082      	sub	sp, #8
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2204      	movs	r2, #4
 8008874:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008878:	2300      	movs	r3, #0
 800887a:	2200      	movs	r2, #0
 800887c:	2100      	movs	r1, #0
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f000 fc8f 	bl	80091a2 <USBD_LL_Transmit>

  return USBD_OK;
 8008884:	2300      	movs	r3, #0
}
 8008886:	4618      	mov	r0, r3
 8008888:	3708      	adds	r7, #8
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}

0800888e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800888e:	b580      	push	{r7, lr}
 8008890:	b082      	sub	sp, #8
 8008892:	af00      	add	r7, sp, #0
 8008894:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2205      	movs	r2, #5
 800889a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800889e:	2300      	movs	r3, #0
 80088a0:	2200      	movs	r2, #0
 80088a2:	2100      	movs	r1, #0
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f000 fc9d 	bl	80091e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80088aa:	2300      	movs	r3, #0
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	3708      	adds	r7, #8
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}

080088b4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80088b8:	2200      	movs	r2, #0
 80088ba:	4912      	ldr	r1, [pc, #72]	; (8008904 <MX_USB_DEVICE_Init+0x50>)
 80088bc:	4812      	ldr	r0, [pc, #72]	; (8008908 <MX_USB_DEVICE_Init+0x54>)
 80088be:	f7fe fd07 	bl	80072d0 <USBD_Init>
 80088c2:	4603      	mov	r3, r0
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d001      	beq.n	80088cc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80088c8:	f7f9 f844 	bl	8001954 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80088cc:	490f      	ldr	r1, [pc, #60]	; (800890c <MX_USB_DEVICE_Init+0x58>)
 80088ce:	480e      	ldr	r0, [pc, #56]	; (8008908 <MX_USB_DEVICE_Init+0x54>)
 80088d0:	f7fe fd2e 	bl	8007330 <USBD_RegisterClass>
 80088d4:	4603      	mov	r3, r0
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d001      	beq.n	80088de <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80088da:	f7f9 f83b 	bl	8001954 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80088de:	490c      	ldr	r1, [pc, #48]	; (8008910 <MX_USB_DEVICE_Init+0x5c>)
 80088e0:	4809      	ldr	r0, [pc, #36]	; (8008908 <MX_USB_DEVICE_Init+0x54>)
 80088e2:	f7fe fc1f 	bl	8007124 <USBD_CDC_RegisterInterface>
 80088e6:	4603      	mov	r3, r0
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d001      	beq.n	80088f0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80088ec:	f7f9 f832 	bl	8001954 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80088f0:	4805      	ldr	r0, [pc, #20]	; (8008908 <MX_USB_DEVICE_Init+0x54>)
 80088f2:	f7fe fd53 	bl	800739c <USBD_Start>
 80088f6:	4603      	mov	r3, r0
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d001      	beq.n	8008900 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80088fc:	f7f9 f82a 	bl	8001954 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008900:	bf00      	nop
 8008902:	bd80      	pop	{r7, pc}
 8008904:	200000ac 	.word	0x200000ac
 8008908:	200003f8 	.word	0x200003f8
 800890c:	20000018 	.word	0x20000018
 8008910:	20000098 	.word	0x20000098

08008914 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008918:	2200      	movs	r2, #0
 800891a:	4905      	ldr	r1, [pc, #20]	; (8008930 <CDC_Init_FS+0x1c>)
 800891c:	4805      	ldr	r0, [pc, #20]	; (8008934 <CDC_Init_FS+0x20>)
 800891e:	f7fe fc1b 	bl	8007158 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008922:	4905      	ldr	r1, [pc, #20]	; (8008938 <CDC_Init_FS+0x24>)
 8008924:	4803      	ldr	r0, [pc, #12]	; (8008934 <CDC_Init_FS+0x20>)
 8008926:	f7fe fc39 	bl	800719c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800892a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800892c:	4618      	mov	r0, r3
 800892e:	bd80      	pop	{r7, pc}
 8008930:	20000ed4 	.word	0x20000ed4
 8008934:	200003f8 	.word	0x200003f8
 8008938:	200006d4 	.word	0x200006d4

0800893c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800893c:	b480      	push	{r7}
 800893e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008940:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008942:	4618      	mov	r0, r3
 8008944:	46bd      	mov	sp, r7
 8008946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894a:	4770      	bx	lr

0800894c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800894c:	b480      	push	{r7}
 800894e:	b083      	sub	sp, #12
 8008950:	af00      	add	r7, sp, #0
 8008952:	4603      	mov	r3, r0
 8008954:	6039      	str	r1, [r7, #0]
 8008956:	71fb      	strb	r3, [r7, #7]
 8008958:	4613      	mov	r3, r2
 800895a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800895c:	79fb      	ldrb	r3, [r7, #7]
 800895e:	2b23      	cmp	r3, #35	; 0x23
 8008960:	d84a      	bhi.n	80089f8 <CDC_Control_FS+0xac>
 8008962:	a201      	add	r2, pc, #4	; (adr r2, 8008968 <CDC_Control_FS+0x1c>)
 8008964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008968:	080089f9 	.word	0x080089f9
 800896c:	080089f9 	.word	0x080089f9
 8008970:	080089f9 	.word	0x080089f9
 8008974:	080089f9 	.word	0x080089f9
 8008978:	080089f9 	.word	0x080089f9
 800897c:	080089f9 	.word	0x080089f9
 8008980:	080089f9 	.word	0x080089f9
 8008984:	080089f9 	.word	0x080089f9
 8008988:	080089f9 	.word	0x080089f9
 800898c:	080089f9 	.word	0x080089f9
 8008990:	080089f9 	.word	0x080089f9
 8008994:	080089f9 	.word	0x080089f9
 8008998:	080089f9 	.word	0x080089f9
 800899c:	080089f9 	.word	0x080089f9
 80089a0:	080089f9 	.word	0x080089f9
 80089a4:	080089f9 	.word	0x080089f9
 80089a8:	080089f9 	.word	0x080089f9
 80089ac:	080089f9 	.word	0x080089f9
 80089b0:	080089f9 	.word	0x080089f9
 80089b4:	080089f9 	.word	0x080089f9
 80089b8:	080089f9 	.word	0x080089f9
 80089bc:	080089f9 	.word	0x080089f9
 80089c0:	080089f9 	.word	0x080089f9
 80089c4:	080089f9 	.word	0x080089f9
 80089c8:	080089f9 	.word	0x080089f9
 80089cc:	080089f9 	.word	0x080089f9
 80089d0:	080089f9 	.word	0x080089f9
 80089d4:	080089f9 	.word	0x080089f9
 80089d8:	080089f9 	.word	0x080089f9
 80089dc:	080089f9 	.word	0x080089f9
 80089e0:	080089f9 	.word	0x080089f9
 80089e4:	080089f9 	.word	0x080089f9
 80089e8:	080089f9 	.word	0x080089f9
 80089ec:	080089f9 	.word	0x080089f9
 80089f0:	080089f9 	.word	0x080089f9
 80089f4:	080089f9 	.word	0x080089f9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80089f8:	bf00      	nop
  }

  return (USBD_OK);
 80089fa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80089fc:	4618      	mov	r0, r3
 80089fe:	370c      	adds	r7, #12
 8008a00:	46bd      	mov	sp, r7
 8008a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a06:	4770      	bx	lr

08008a08 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b082      	sub	sp, #8
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008a12:	6879      	ldr	r1, [r7, #4]
 8008a14:	4805      	ldr	r0, [pc, #20]	; (8008a2c <CDC_Receive_FS+0x24>)
 8008a16:	f7fe fbc1 	bl	800719c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008a1a:	4804      	ldr	r0, [pc, #16]	; (8008a2c <CDC_Receive_FS+0x24>)
 8008a1c:	f7fe fc22 	bl	8007264 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008a20:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3708      	adds	r7, #8
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}
 8008a2a:	bf00      	nop
 8008a2c:	200003f8 	.word	0x200003f8

08008a30 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b084      	sub	sp, #16
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	460b      	mov	r3, r1
 8008a3a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008a40:	4b0d      	ldr	r3, [pc, #52]	; (8008a78 <CDC_Transmit_FS+0x48>)
 8008a42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a46:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d001      	beq.n	8008a56 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008a52:	2301      	movs	r3, #1
 8008a54:	e00b      	b.n	8008a6e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008a56:	887b      	ldrh	r3, [r7, #2]
 8008a58:	461a      	mov	r2, r3
 8008a5a:	6879      	ldr	r1, [r7, #4]
 8008a5c:	4806      	ldr	r0, [pc, #24]	; (8008a78 <CDC_Transmit_FS+0x48>)
 8008a5e:	f7fe fb7b 	bl	8007158 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008a62:	4805      	ldr	r0, [pc, #20]	; (8008a78 <CDC_Transmit_FS+0x48>)
 8008a64:	f7fe fbb8 	bl	80071d8 <USBD_CDC_TransmitPacket>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3710      	adds	r7, #16
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}
 8008a76:	bf00      	nop
 8008a78:	200003f8 	.word	0x200003f8

08008a7c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b087      	sub	sp, #28
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	60f8      	str	r0, [r7, #12]
 8008a84:	60b9      	str	r1, [r7, #8]
 8008a86:	4613      	mov	r3, r2
 8008a88:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008a8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	371c      	adds	r7, #28
 8008a96:	46bd      	mov	sp, r7
 8008a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9c:	4770      	bx	lr
	...

08008aa0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b083      	sub	sp, #12
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	6039      	str	r1, [r7, #0]
 8008aaa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	2212      	movs	r2, #18
 8008ab0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008ab2:	4b03      	ldr	r3, [pc, #12]	; (8008ac0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	370c      	adds	r7, #12
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abe:	4770      	bx	lr
 8008ac0:	200000c8 	.word	0x200000c8

08008ac4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b083      	sub	sp, #12
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	4603      	mov	r3, r0
 8008acc:	6039      	str	r1, [r7, #0]
 8008ace:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	2204      	movs	r2, #4
 8008ad4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008ad6:	4b03      	ldr	r3, [pc, #12]	; (8008ae4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	370c      	adds	r7, #12
 8008adc:	46bd      	mov	sp, r7
 8008ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae2:	4770      	bx	lr
 8008ae4:	200000dc 	.word	0x200000dc

08008ae8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b082      	sub	sp, #8
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	4603      	mov	r3, r0
 8008af0:	6039      	str	r1, [r7, #0]
 8008af2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008af4:	79fb      	ldrb	r3, [r7, #7]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d105      	bne.n	8008b06 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008afa:	683a      	ldr	r2, [r7, #0]
 8008afc:	4907      	ldr	r1, [pc, #28]	; (8008b1c <USBD_FS_ProductStrDescriptor+0x34>)
 8008afe:	4808      	ldr	r0, [pc, #32]	; (8008b20 <USBD_FS_ProductStrDescriptor+0x38>)
 8008b00:	f7ff fdf8 	bl	80086f4 <USBD_GetString>
 8008b04:	e004      	b.n	8008b10 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008b06:	683a      	ldr	r2, [r7, #0]
 8008b08:	4904      	ldr	r1, [pc, #16]	; (8008b1c <USBD_FS_ProductStrDescriptor+0x34>)
 8008b0a:	4805      	ldr	r0, [pc, #20]	; (8008b20 <USBD_FS_ProductStrDescriptor+0x38>)
 8008b0c:	f7ff fdf2 	bl	80086f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b10:	4b02      	ldr	r3, [pc, #8]	; (8008b1c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3708      	adds	r7, #8
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}
 8008b1a:	bf00      	nop
 8008b1c:	200016d4 	.word	0x200016d4
 8008b20:	0800d3d0 	.word	0x0800d3d0

08008b24 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b082      	sub	sp, #8
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	6039      	str	r1, [r7, #0]
 8008b2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008b30:	683a      	ldr	r2, [r7, #0]
 8008b32:	4904      	ldr	r1, [pc, #16]	; (8008b44 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008b34:	4804      	ldr	r0, [pc, #16]	; (8008b48 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008b36:	f7ff fddd 	bl	80086f4 <USBD_GetString>
  return USBD_StrDesc;
 8008b3a:	4b02      	ldr	r3, [pc, #8]	; (8008b44 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3708      	adds	r7, #8
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}
 8008b44:	200016d4 	.word	0x200016d4
 8008b48:	0800d3e8 	.word	0x0800d3e8

08008b4c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b082      	sub	sp, #8
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	4603      	mov	r3, r0
 8008b54:	6039      	str	r1, [r7, #0]
 8008b56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	221a      	movs	r2, #26
 8008b5c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008b5e:	f000 f843 	bl	8008be8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008b62:	4b02      	ldr	r3, [pc, #8]	; (8008b6c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3708      	adds	r7, #8
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}
 8008b6c:	200000e0 	.word	0x200000e0

08008b70 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b082      	sub	sp, #8
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	4603      	mov	r3, r0
 8008b78:	6039      	str	r1, [r7, #0]
 8008b7a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008b7c:	79fb      	ldrb	r3, [r7, #7]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d105      	bne.n	8008b8e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008b82:	683a      	ldr	r2, [r7, #0]
 8008b84:	4907      	ldr	r1, [pc, #28]	; (8008ba4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008b86:	4808      	ldr	r0, [pc, #32]	; (8008ba8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008b88:	f7ff fdb4 	bl	80086f4 <USBD_GetString>
 8008b8c:	e004      	b.n	8008b98 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008b8e:	683a      	ldr	r2, [r7, #0]
 8008b90:	4904      	ldr	r1, [pc, #16]	; (8008ba4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008b92:	4805      	ldr	r0, [pc, #20]	; (8008ba8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008b94:	f7ff fdae 	bl	80086f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b98:	4b02      	ldr	r3, [pc, #8]	; (8008ba4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3708      	adds	r7, #8
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}
 8008ba2:	bf00      	nop
 8008ba4:	200016d4 	.word	0x200016d4
 8008ba8:	0800d3fc 	.word	0x0800d3fc

08008bac <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b082      	sub	sp, #8
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	6039      	str	r1, [r7, #0]
 8008bb6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008bb8:	79fb      	ldrb	r3, [r7, #7]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d105      	bne.n	8008bca <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008bbe:	683a      	ldr	r2, [r7, #0]
 8008bc0:	4907      	ldr	r1, [pc, #28]	; (8008be0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008bc2:	4808      	ldr	r0, [pc, #32]	; (8008be4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008bc4:	f7ff fd96 	bl	80086f4 <USBD_GetString>
 8008bc8:	e004      	b.n	8008bd4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008bca:	683a      	ldr	r2, [r7, #0]
 8008bcc:	4904      	ldr	r1, [pc, #16]	; (8008be0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008bce:	4805      	ldr	r0, [pc, #20]	; (8008be4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008bd0:	f7ff fd90 	bl	80086f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008bd4:	4b02      	ldr	r3, [pc, #8]	; (8008be0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	3708      	adds	r7, #8
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}
 8008bde:	bf00      	nop
 8008be0:	200016d4 	.word	0x200016d4
 8008be4:	0800d408 	.word	0x0800d408

08008be8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b084      	sub	sp, #16
 8008bec:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008bee:	4b0f      	ldr	r3, [pc, #60]	; (8008c2c <Get_SerialNum+0x44>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008bf4:	4b0e      	ldr	r3, [pc, #56]	; (8008c30 <Get_SerialNum+0x48>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008bfa:	4b0e      	ldr	r3, [pc, #56]	; (8008c34 <Get_SerialNum+0x4c>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008c00:	68fa      	ldr	r2, [r7, #12]
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	4413      	add	r3, r2
 8008c06:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d009      	beq.n	8008c22 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008c0e:	2208      	movs	r2, #8
 8008c10:	4909      	ldr	r1, [pc, #36]	; (8008c38 <Get_SerialNum+0x50>)
 8008c12:	68f8      	ldr	r0, [r7, #12]
 8008c14:	f000 f814 	bl	8008c40 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008c18:	2204      	movs	r2, #4
 8008c1a:	4908      	ldr	r1, [pc, #32]	; (8008c3c <Get_SerialNum+0x54>)
 8008c1c:	68b8      	ldr	r0, [r7, #8]
 8008c1e:	f000 f80f 	bl	8008c40 <IntToUnicode>
  }
}
 8008c22:	bf00      	nop
 8008c24:	3710      	adds	r7, #16
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}
 8008c2a:	bf00      	nop
 8008c2c:	1fff7a10 	.word	0x1fff7a10
 8008c30:	1fff7a14 	.word	0x1fff7a14
 8008c34:	1fff7a18 	.word	0x1fff7a18
 8008c38:	200000e2 	.word	0x200000e2
 8008c3c:	200000f2 	.word	0x200000f2

08008c40 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008c40:	b480      	push	{r7}
 8008c42:	b087      	sub	sp, #28
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	60f8      	str	r0, [r7, #12]
 8008c48:	60b9      	str	r1, [r7, #8]
 8008c4a:	4613      	mov	r3, r2
 8008c4c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008c4e:	2300      	movs	r3, #0
 8008c50:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008c52:	2300      	movs	r3, #0
 8008c54:	75fb      	strb	r3, [r7, #23]
 8008c56:	e027      	b.n	8008ca8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	0f1b      	lsrs	r3, r3, #28
 8008c5c:	2b09      	cmp	r3, #9
 8008c5e:	d80b      	bhi.n	8008c78 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	0f1b      	lsrs	r3, r3, #28
 8008c64:	b2da      	uxtb	r2, r3
 8008c66:	7dfb      	ldrb	r3, [r7, #23]
 8008c68:	005b      	lsls	r3, r3, #1
 8008c6a:	4619      	mov	r1, r3
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	440b      	add	r3, r1
 8008c70:	3230      	adds	r2, #48	; 0x30
 8008c72:	b2d2      	uxtb	r2, r2
 8008c74:	701a      	strb	r2, [r3, #0]
 8008c76:	e00a      	b.n	8008c8e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	0f1b      	lsrs	r3, r3, #28
 8008c7c:	b2da      	uxtb	r2, r3
 8008c7e:	7dfb      	ldrb	r3, [r7, #23]
 8008c80:	005b      	lsls	r3, r3, #1
 8008c82:	4619      	mov	r1, r3
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	440b      	add	r3, r1
 8008c88:	3237      	adds	r2, #55	; 0x37
 8008c8a:	b2d2      	uxtb	r2, r2
 8008c8c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	011b      	lsls	r3, r3, #4
 8008c92:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008c94:	7dfb      	ldrb	r3, [r7, #23]
 8008c96:	005b      	lsls	r3, r3, #1
 8008c98:	3301      	adds	r3, #1
 8008c9a:	68ba      	ldr	r2, [r7, #8]
 8008c9c:	4413      	add	r3, r2
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008ca2:	7dfb      	ldrb	r3, [r7, #23]
 8008ca4:	3301      	adds	r3, #1
 8008ca6:	75fb      	strb	r3, [r7, #23]
 8008ca8:	7dfa      	ldrb	r2, [r7, #23]
 8008caa:	79fb      	ldrb	r3, [r7, #7]
 8008cac:	429a      	cmp	r2, r3
 8008cae:	d3d3      	bcc.n	8008c58 <IntToUnicode+0x18>
  }
}
 8008cb0:	bf00      	nop
 8008cb2:	bf00      	nop
 8008cb4:	371c      	adds	r7, #28
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbc:	4770      	bx	lr
	...

08008cc0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b08a      	sub	sp, #40	; 0x28
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008cc8:	f107 0314 	add.w	r3, r7, #20
 8008ccc:	2200      	movs	r2, #0
 8008cce:	601a      	str	r2, [r3, #0]
 8008cd0:	605a      	str	r2, [r3, #4]
 8008cd2:	609a      	str	r2, [r3, #8]
 8008cd4:	60da      	str	r2, [r3, #12]
 8008cd6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008ce0:	d13a      	bne.n	8008d58 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	613b      	str	r3, [r7, #16]
 8008ce6:	4b1e      	ldr	r3, [pc, #120]	; (8008d60 <HAL_PCD_MspInit+0xa0>)
 8008ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cea:	4a1d      	ldr	r2, [pc, #116]	; (8008d60 <HAL_PCD_MspInit+0xa0>)
 8008cec:	f043 0301 	orr.w	r3, r3, #1
 8008cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8008cf2:	4b1b      	ldr	r3, [pc, #108]	; (8008d60 <HAL_PCD_MspInit+0xa0>)
 8008cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cf6:	f003 0301 	and.w	r3, r3, #1
 8008cfa:	613b      	str	r3, [r7, #16]
 8008cfc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008cfe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008d02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d04:	2302      	movs	r3, #2
 8008d06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d08:	2300      	movs	r3, #0
 8008d0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008d0c:	2303      	movs	r3, #3
 8008d0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008d10:	230a      	movs	r3, #10
 8008d12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d14:	f107 0314 	add.w	r3, r7, #20
 8008d18:	4619      	mov	r1, r3
 8008d1a:	4812      	ldr	r0, [pc, #72]	; (8008d64 <HAL_PCD_MspInit+0xa4>)
 8008d1c:	f7f9 f97c 	bl	8002018 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008d20:	4b0f      	ldr	r3, [pc, #60]	; (8008d60 <HAL_PCD_MspInit+0xa0>)
 8008d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d24:	4a0e      	ldr	r2, [pc, #56]	; (8008d60 <HAL_PCD_MspInit+0xa0>)
 8008d26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d2a:	6353      	str	r3, [r2, #52]	; 0x34
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	60fb      	str	r3, [r7, #12]
 8008d30:	4b0b      	ldr	r3, [pc, #44]	; (8008d60 <HAL_PCD_MspInit+0xa0>)
 8008d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d34:	4a0a      	ldr	r2, [pc, #40]	; (8008d60 <HAL_PCD_MspInit+0xa0>)
 8008d36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008d3a:	6453      	str	r3, [r2, #68]	; 0x44
 8008d3c:	4b08      	ldr	r3, [pc, #32]	; (8008d60 <HAL_PCD_MspInit+0xa0>)
 8008d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d44:	60fb      	str	r3, [r7, #12]
 8008d46:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008d48:	2200      	movs	r2, #0
 8008d4a:	2100      	movs	r1, #0
 8008d4c:	2043      	movs	r0, #67	; 0x43
 8008d4e:	f7f9 f92c 	bl	8001faa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008d52:	2043      	movs	r0, #67	; 0x43
 8008d54:	f7f9 f945 	bl	8001fe2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008d58:	bf00      	nop
 8008d5a:	3728      	adds	r7, #40	; 0x28
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}
 8008d60:	40023800 	.word	0x40023800
 8008d64:	40020000 	.word	0x40020000

08008d68 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b082      	sub	sp, #8
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008d7c:	4619      	mov	r1, r3
 8008d7e:	4610      	mov	r0, r2
 8008d80:	f7fe fb59 	bl	8007436 <USBD_LL_SetupStage>
}
 8008d84:	bf00      	nop
 8008d86:	3708      	adds	r7, #8
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}

08008d8c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b082      	sub	sp, #8
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	460b      	mov	r3, r1
 8008d96:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008d9e:	78fa      	ldrb	r2, [r7, #3]
 8008da0:	6879      	ldr	r1, [r7, #4]
 8008da2:	4613      	mov	r3, r2
 8008da4:	00db      	lsls	r3, r3, #3
 8008da6:	4413      	add	r3, r2
 8008da8:	009b      	lsls	r3, r3, #2
 8008daa:	440b      	add	r3, r1
 8008dac:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008db0:	681a      	ldr	r2, [r3, #0]
 8008db2:	78fb      	ldrb	r3, [r7, #3]
 8008db4:	4619      	mov	r1, r3
 8008db6:	f7fe fb93 	bl	80074e0 <USBD_LL_DataOutStage>
}
 8008dba:	bf00      	nop
 8008dbc:	3708      	adds	r7, #8
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}

08008dc2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dc2:	b580      	push	{r7, lr}
 8008dc4:	b082      	sub	sp, #8
 8008dc6:	af00      	add	r7, sp, #0
 8008dc8:	6078      	str	r0, [r7, #4]
 8008dca:	460b      	mov	r3, r1
 8008dcc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008dd4:	78fa      	ldrb	r2, [r7, #3]
 8008dd6:	6879      	ldr	r1, [r7, #4]
 8008dd8:	4613      	mov	r3, r2
 8008dda:	00db      	lsls	r3, r3, #3
 8008ddc:	4413      	add	r3, r2
 8008dde:	009b      	lsls	r3, r3, #2
 8008de0:	440b      	add	r3, r1
 8008de2:	334c      	adds	r3, #76	; 0x4c
 8008de4:	681a      	ldr	r2, [r3, #0]
 8008de6:	78fb      	ldrb	r3, [r7, #3]
 8008de8:	4619      	mov	r1, r3
 8008dea:	f7fe fc2c 	bl	8007646 <USBD_LL_DataInStage>
}
 8008dee:	bf00      	nop
 8008df0:	3708      	adds	r7, #8
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}

08008df6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008df6:	b580      	push	{r7, lr}
 8008df8:	b082      	sub	sp, #8
 8008dfa:	af00      	add	r7, sp, #0
 8008dfc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008e04:	4618      	mov	r0, r3
 8008e06:	f7fe fd60 	bl	80078ca <USBD_LL_SOF>
}
 8008e0a:	bf00      	nop
 8008e0c:	3708      	adds	r7, #8
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}

08008e12 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e12:	b580      	push	{r7, lr}
 8008e14:	b084      	sub	sp, #16
 8008e16:	af00      	add	r7, sp, #0
 8008e18:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	68db      	ldr	r3, [r3, #12]
 8008e22:	2b02      	cmp	r3, #2
 8008e24:	d001      	beq.n	8008e2a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008e26:	f7f8 fd95 	bl	8001954 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008e30:	7bfa      	ldrb	r2, [r7, #15]
 8008e32:	4611      	mov	r1, r2
 8008e34:	4618      	mov	r0, r3
 8008e36:	f7fe fd0a 	bl	800784e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008e40:	4618      	mov	r0, r3
 8008e42:	f7fe fcb2 	bl	80077aa <USBD_LL_Reset>
}
 8008e46:	bf00      	nop
 8008e48:	3710      	adds	r7, #16
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}
	...

08008e50 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b082      	sub	sp, #8
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f7fe fd05 	bl	800786e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	687a      	ldr	r2, [r7, #4]
 8008e70:	6812      	ldr	r2, [r2, #0]
 8008e72:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008e76:	f043 0301 	orr.w	r3, r3, #1
 8008e7a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6a1b      	ldr	r3, [r3, #32]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d005      	beq.n	8008e90 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008e84:	4b04      	ldr	r3, [pc, #16]	; (8008e98 <HAL_PCD_SuspendCallback+0x48>)
 8008e86:	691b      	ldr	r3, [r3, #16]
 8008e88:	4a03      	ldr	r2, [pc, #12]	; (8008e98 <HAL_PCD_SuspendCallback+0x48>)
 8008e8a:	f043 0306 	orr.w	r3, r3, #6
 8008e8e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008e90:	bf00      	nop
 8008e92:	3708      	adds	r7, #8
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}
 8008e98:	e000ed00 	.word	0xe000ed00

08008e9c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b082      	sub	sp, #8
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f7fe fcf5 	bl	800789a <USBD_LL_Resume>
}
 8008eb0:	bf00      	nop
 8008eb2:	3708      	adds	r7, #8
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}

08008eb8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b082      	sub	sp, #8
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
 8008ec0:	460b      	mov	r3, r1
 8008ec2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008eca:	78fa      	ldrb	r2, [r7, #3]
 8008ecc:	4611      	mov	r1, r2
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f7fe fd4d 	bl	800796e <USBD_LL_IsoOUTIncomplete>
}
 8008ed4:	bf00      	nop
 8008ed6:	3708      	adds	r7, #8
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}

08008edc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b082      	sub	sp, #8
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
 8008ee4:	460b      	mov	r3, r1
 8008ee6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008eee:	78fa      	ldrb	r2, [r7, #3]
 8008ef0:	4611      	mov	r1, r2
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f7fe fd09 	bl	800790a <USBD_LL_IsoINIncomplete>
}
 8008ef8:	bf00      	nop
 8008efa:	3708      	adds	r7, #8
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}

08008f00 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b082      	sub	sp, #8
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f7fe fd5f 	bl	80079d2 <USBD_LL_DevConnected>
}
 8008f14:	bf00      	nop
 8008f16:	3708      	adds	r7, #8
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}

08008f1c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b082      	sub	sp, #8
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f7fe fd5c 	bl	80079e8 <USBD_LL_DevDisconnected>
}
 8008f30:	bf00      	nop
 8008f32:	3708      	adds	r7, #8
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}

08008f38 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b082      	sub	sp, #8
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	781b      	ldrb	r3, [r3, #0]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d13c      	bne.n	8008fc2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008f48:	4a20      	ldr	r2, [pc, #128]	; (8008fcc <USBD_LL_Init+0x94>)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	4a1e      	ldr	r2, [pc, #120]	; (8008fcc <USBD_LL_Init+0x94>)
 8008f54:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008f58:	4b1c      	ldr	r3, [pc, #112]	; (8008fcc <USBD_LL_Init+0x94>)
 8008f5a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008f5e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008f60:	4b1a      	ldr	r3, [pc, #104]	; (8008fcc <USBD_LL_Init+0x94>)
 8008f62:	2204      	movs	r2, #4
 8008f64:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008f66:	4b19      	ldr	r3, [pc, #100]	; (8008fcc <USBD_LL_Init+0x94>)
 8008f68:	2202      	movs	r2, #2
 8008f6a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008f6c:	4b17      	ldr	r3, [pc, #92]	; (8008fcc <USBD_LL_Init+0x94>)
 8008f6e:	2200      	movs	r2, #0
 8008f70:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008f72:	4b16      	ldr	r3, [pc, #88]	; (8008fcc <USBD_LL_Init+0x94>)
 8008f74:	2202      	movs	r2, #2
 8008f76:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008f78:	4b14      	ldr	r3, [pc, #80]	; (8008fcc <USBD_LL_Init+0x94>)
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008f7e:	4b13      	ldr	r3, [pc, #76]	; (8008fcc <USBD_LL_Init+0x94>)
 8008f80:	2200      	movs	r2, #0
 8008f82:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008f84:	4b11      	ldr	r3, [pc, #68]	; (8008fcc <USBD_LL_Init+0x94>)
 8008f86:	2200      	movs	r2, #0
 8008f88:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008f8a:	4b10      	ldr	r3, [pc, #64]	; (8008fcc <USBD_LL_Init+0x94>)
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008f90:	4b0e      	ldr	r3, [pc, #56]	; (8008fcc <USBD_LL_Init+0x94>)
 8008f92:	2200      	movs	r2, #0
 8008f94:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008f96:	480d      	ldr	r0, [pc, #52]	; (8008fcc <USBD_LL_Init+0x94>)
 8008f98:	f7fa f9b5 	bl	8003306 <HAL_PCD_Init>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d001      	beq.n	8008fa6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008fa2:	f7f8 fcd7 	bl	8001954 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008fa6:	2180      	movs	r1, #128	; 0x80
 8008fa8:	4808      	ldr	r0, [pc, #32]	; (8008fcc <USBD_LL_Init+0x94>)
 8008faa:	f7fb fc0c 	bl	80047c6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008fae:	2240      	movs	r2, #64	; 0x40
 8008fb0:	2100      	movs	r1, #0
 8008fb2:	4806      	ldr	r0, [pc, #24]	; (8008fcc <USBD_LL_Init+0x94>)
 8008fb4:	f7fb fbc0 	bl	8004738 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008fb8:	2280      	movs	r2, #128	; 0x80
 8008fba:	2101      	movs	r1, #1
 8008fbc:	4803      	ldr	r0, [pc, #12]	; (8008fcc <USBD_LL_Init+0x94>)
 8008fbe:	f7fb fbbb 	bl	8004738 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008fc2:	2300      	movs	r3, #0
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3708      	adds	r7, #8
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}
 8008fcc:	200018d4 	.word	0x200018d4

08008fd0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b084      	sub	sp, #16
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fdc:	2300      	movs	r3, #0
 8008fde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f7fa faaa 	bl	8003540 <HAL_PCD_Start>
 8008fec:	4603      	mov	r3, r0
 8008fee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ff0:	7bfb      	ldrb	r3, [r7, #15]
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f000 f942 	bl	800927c <USBD_Get_USB_Status>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ffc:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3710      	adds	r7, #16
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}

08009006 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009006:	b580      	push	{r7, lr}
 8009008:	b084      	sub	sp, #16
 800900a:	af00      	add	r7, sp, #0
 800900c:	6078      	str	r0, [r7, #4]
 800900e:	4608      	mov	r0, r1
 8009010:	4611      	mov	r1, r2
 8009012:	461a      	mov	r2, r3
 8009014:	4603      	mov	r3, r0
 8009016:	70fb      	strb	r3, [r7, #3]
 8009018:	460b      	mov	r3, r1
 800901a:	70bb      	strb	r3, [r7, #2]
 800901c:	4613      	mov	r3, r2
 800901e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009020:	2300      	movs	r3, #0
 8009022:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009024:	2300      	movs	r3, #0
 8009026:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800902e:	78bb      	ldrb	r3, [r7, #2]
 8009030:	883a      	ldrh	r2, [r7, #0]
 8009032:	78f9      	ldrb	r1, [r7, #3]
 8009034:	f7fa ff7b 	bl	8003f2e <HAL_PCD_EP_Open>
 8009038:	4603      	mov	r3, r0
 800903a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800903c:	7bfb      	ldrb	r3, [r7, #15]
 800903e:	4618      	mov	r0, r3
 8009040:	f000 f91c 	bl	800927c <USBD_Get_USB_Status>
 8009044:	4603      	mov	r3, r0
 8009046:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009048:	7bbb      	ldrb	r3, [r7, #14]
}
 800904a:	4618      	mov	r0, r3
 800904c:	3710      	adds	r7, #16
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}

08009052 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009052:	b580      	push	{r7, lr}
 8009054:	b084      	sub	sp, #16
 8009056:	af00      	add	r7, sp, #0
 8009058:	6078      	str	r0, [r7, #4]
 800905a:	460b      	mov	r3, r1
 800905c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800905e:	2300      	movs	r3, #0
 8009060:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009062:	2300      	movs	r3, #0
 8009064:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800906c:	78fa      	ldrb	r2, [r7, #3]
 800906e:	4611      	mov	r1, r2
 8009070:	4618      	mov	r0, r3
 8009072:	f7fa ffc4 	bl	8003ffe <HAL_PCD_EP_Close>
 8009076:	4603      	mov	r3, r0
 8009078:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800907a:	7bfb      	ldrb	r3, [r7, #15]
 800907c:	4618      	mov	r0, r3
 800907e:	f000 f8fd 	bl	800927c <USBD_Get_USB_Status>
 8009082:	4603      	mov	r3, r0
 8009084:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009086:	7bbb      	ldrb	r3, [r7, #14]
}
 8009088:	4618      	mov	r0, r3
 800908a:	3710      	adds	r7, #16
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}

08009090 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b084      	sub	sp, #16
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
 8009098:	460b      	mov	r3, r1
 800909a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800909c:	2300      	movs	r3, #0
 800909e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090a0:	2300      	movs	r3, #0
 80090a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80090aa:	78fa      	ldrb	r2, [r7, #3]
 80090ac:	4611      	mov	r1, r2
 80090ae:	4618      	mov	r0, r3
 80090b0:	f7fb f89c 	bl	80041ec <HAL_PCD_EP_SetStall>
 80090b4:	4603      	mov	r3, r0
 80090b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090b8:	7bfb      	ldrb	r3, [r7, #15]
 80090ba:	4618      	mov	r0, r3
 80090bc:	f000 f8de 	bl	800927c <USBD_Get_USB_Status>
 80090c0:	4603      	mov	r3, r0
 80090c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	3710      	adds	r7, #16
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}

080090ce <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090ce:	b580      	push	{r7, lr}
 80090d0:	b084      	sub	sp, #16
 80090d2:	af00      	add	r7, sp, #0
 80090d4:	6078      	str	r0, [r7, #4]
 80090d6:	460b      	mov	r3, r1
 80090d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090da:	2300      	movs	r3, #0
 80090dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090de:	2300      	movs	r3, #0
 80090e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80090e8:	78fa      	ldrb	r2, [r7, #3]
 80090ea:	4611      	mov	r1, r2
 80090ec:	4618      	mov	r0, r3
 80090ee:	f7fb f8e1 	bl	80042b4 <HAL_PCD_EP_ClrStall>
 80090f2:	4603      	mov	r3, r0
 80090f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090f6:	7bfb      	ldrb	r3, [r7, #15]
 80090f8:	4618      	mov	r0, r3
 80090fa:	f000 f8bf 	bl	800927c <USBD_Get_USB_Status>
 80090fe:	4603      	mov	r3, r0
 8009100:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009102:	7bbb      	ldrb	r3, [r7, #14]
}
 8009104:	4618      	mov	r0, r3
 8009106:	3710      	adds	r7, #16
 8009108:	46bd      	mov	sp, r7
 800910a:	bd80      	pop	{r7, pc}

0800910c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800910c:	b480      	push	{r7}
 800910e:	b085      	sub	sp, #20
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
 8009114:	460b      	mov	r3, r1
 8009116:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800911e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009120:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009124:	2b00      	cmp	r3, #0
 8009126:	da0b      	bge.n	8009140 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009128:	78fb      	ldrb	r3, [r7, #3]
 800912a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800912e:	68f9      	ldr	r1, [r7, #12]
 8009130:	4613      	mov	r3, r2
 8009132:	00db      	lsls	r3, r3, #3
 8009134:	4413      	add	r3, r2
 8009136:	009b      	lsls	r3, r3, #2
 8009138:	440b      	add	r3, r1
 800913a:	333e      	adds	r3, #62	; 0x3e
 800913c:	781b      	ldrb	r3, [r3, #0]
 800913e:	e00b      	b.n	8009158 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009140:	78fb      	ldrb	r3, [r7, #3]
 8009142:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009146:	68f9      	ldr	r1, [r7, #12]
 8009148:	4613      	mov	r3, r2
 800914a:	00db      	lsls	r3, r3, #3
 800914c:	4413      	add	r3, r2
 800914e:	009b      	lsls	r3, r3, #2
 8009150:	440b      	add	r3, r1
 8009152:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8009156:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009158:	4618      	mov	r0, r3
 800915a:	3714      	adds	r7, #20
 800915c:	46bd      	mov	sp, r7
 800915e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009162:	4770      	bx	lr

08009164 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b084      	sub	sp, #16
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
 800916c:	460b      	mov	r3, r1
 800916e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009170:	2300      	movs	r3, #0
 8009172:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009174:	2300      	movs	r3, #0
 8009176:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800917e:	78fa      	ldrb	r2, [r7, #3]
 8009180:	4611      	mov	r1, r2
 8009182:	4618      	mov	r0, r3
 8009184:	f7fa feae 	bl	8003ee4 <HAL_PCD_SetAddress>
 8009188:	4603      	mov	r3, r0
 800918a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800918c:	7bfb      	ldrb	r3, [r7, #15]
 800918e:	4618      	mov	r0, r3
 8009190:	f000 f874 	bl	800927c <USBD_Get_USB_Status>
 8009194:	4603      	mov	r3, r0
 8009196:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009198:	7bbb      	ldrb	r3, [r7, #14]
}
 800919a:	4618      	mov	r0, r3
 800919c:	3710      	adds	r7, #16
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}

080091a2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80091a2:	b580      	push	{r7, lr}
 80091a4:	b086      	sub	sp, #24
 80091a6:	af00      	add	r7, sp, #0
 80091a8:	60f8      	str	r0, [r7, #12]
 80091aa:	607a      	str	r2, [r7, #4]
 80091ac:	603b      	str	r3, [r7, #0]
 80091ae:	460b      	mov	r3, r1
 80091b0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091b2:	2300      	movs	r3, #0
 80091b4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091b6:	2300      	movs	r3, #0
 80091b8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80091c0:	7af9      	ldrb	r1, [r7, #11]
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	687a      	ldr	r2, [r7, #4]
 80091c6:	f7fa ffc7 	bl	8004158 <HAL_PCD_EP_Transmit>
 80091ca:	4603      	mov	r3, r0
 80091cc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091ce:	7dfb      	ldrb	r3, [r7, #23]
 80091d0:	4618      	mov	r0, r3
 80091d2:	f000 f853 	bl	800927c <USBD_Get_USB_Status>
 80091d6:	4603      	mov	r3, r0
 80091d8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80091da:	7dbb      	ldrb	r3, [r7, #22]
}
 80091dc:	4618      	mov	r0, r3
 80091de:	3718      	adds	r7, #24
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}

080091e4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b086      	sub	sp, #24
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	60f8      	str	r0, [r7, #12]
 80091ec:	607a      	str	r2, [r7, #4]
 80091ee:	603b      	str	r3, [r7, #0]
 80091f0:	460b      	mov	r3, r1
 80091f2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091f4:	2300      	movs	r3, #0
 80091f6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091f8:	2300      	movs	r3, #0
 80091fa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009202:	7af9      	ldrb	r1, [r7, #11]
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	687a      	ldr	r2, [r7, #4]
 8009208:	f7fa ff43 	bl	8004092 <HAL_PCD_EP_Receive>
 800920c:	4603      	mov	r3, r0
 800920e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009210:	7dfb      	ldrb	r3, [r7, #23]
 8009212:	4618      	mov	r0, r3
 8009214:	f000 f832 	bl	800927c <USBD_Get_USB_Status>
 8009218:	4603      	mov	r3, r0
 800921a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800921c:	7dbb      	ldrb	r3, [r7, #22]
}
 800921e:	4618      	mov	r0, r3
 8009220:	3718      	adds	r7, #24
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}

08009226 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009226:	b580      	push	{r7, lr}
 8009228:	b082      	sub	sp, #8
 800922a:	af00      	add	r7, sp, #0
 800922c:	6078      	str	r0, [r7, #4]
 800922e:	460b      	mov	r3, r1
 8009230:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009238:	78fa      	ldrb	r2, [r7, #3]
 800923a:	4611      	mov	r1, r2
 800923c:	4618      	mov	r0, r3
 800923e:	f7fa ff73 	bl	8004128 <HAL_PCD_EP_GetRxCount>
 8009242:	4603      	mov	r3, r0
}
 8009244:	4618      	mov	r0, r3
 8009246:	3708      	adds	r7, #8
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}

0800924c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800924c:	b480      	push	{r7}
 800924e:	b083      	sub	sp, #12
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009254:	4b03      	ldr	r3, [pc, #12]	; (8009264 <USBD_static_malloc+0x18>)
}
 8009256:	4618      	mov	r0, r3
 8009258:	370c      	adds	r7, #12
 800925a:	46bd      	mov	sp, r7
 800925c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009260:	4770      	bx	lr
 8009262:	bf00      	nop
 8009264:	20001de0 	.word	0x20001de0

08009268 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009268:	b480      	push	{r7}
 800926a:	b083      	sub	sp, #12
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]

}
 8009270:	bf00      	nop
 8009272:	370c      	adds	r7, #12
 8009274:	46bd      	mov	sp, r7
 8009276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927a:	4770      	bx	lr

0800927c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800927c:	b480      	push	{r7}
 800927e:	b085      	sub	sp, #20
 8009280:	af00      	add	r7, sp, #0
 8009282:	4603      	mov	r3, r0
 8009284:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009286:	2300      	movs	r3, #0
 8009288:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800928a:	79fb      	ldrb	r3, [r7, #7]
 800928c:	2b03      	cmp	r3, #3
 800928e:	d817      	bhi.n	80092c0 <USBD_Get_USB_Status+0x44>
 8009290:	a201      	add	r2, pc, #4	; (adr r2, 8009298 <USBD_Get_USB_Status+0x1c>)
 8009292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009296:	bf00      	nop
 8009298:	080092a9 	.word	0x080092a9
 800929c:	080092af 	.word	0x080092af
 80092a0:	080092b5 	.word	0x080092b5
 80092a4:	080092bb 	.word	0x080092bb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80092a8:	2300      	movs	r3, #0
 80092aa:	73fb      	strb	r3, [r7, #15]
    break;
 80092ac:	e00b      	b.n	80092c6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80092ae:	2303      	movs	r3, #3
 80092b0:	73fb      	strb	r3, [r7, #15]
    break;
 80092b2:	e008      	b.n	80092c6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80092b4:	2301      	movs	r3, #1
 80092b6:	73fb      	strb	r3, [r7, #15]
    break;
 80092b8:	e005      	b.n	80092c6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80092ba:	2303      	movs	r3, #3
 80092bc:	73fb      	strb	r3, [r7, #15]
    break;
 80092be:	e002      	b.n	80092c6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80092c0:	2303      	movs	r3, #3
 80092c2:	73fb      	strb	r3, [r7, #15]
    break;
 80092c4:	bf00      	nop
  }
  return usb_status;
 80092c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80092c8:	4618      	mov	r0, r3
 80092ca:	3714      	adds	r7, #20
 80092cc:	46bd      	mov	sp, r7
 80092ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d2:	4770      	bx	lr

080092d4 <__errno>:
 80092d4:	4b01      	ldr	r3, [pc, #4]	; (80092dc <__errno+0x8>)
 80092d6:	6818      	ldr	r0, [r3, #0]
 80092d8:	4770      	bx	lr
 80092da:	bf00      	nop
 80092dc:	200000fc 	.word	0x200000fc

080092e0 <__libc_init_array>:
 80092e0:	b570      	push	{r4, r5, r6, lr}
 80092e2:	4d0d      	ldr	r5, [pc, #52]	; (8009318 <__libc_init_array+0x38>)
 80092e4:	4c0d      	ldr	r4, [pc, #52]	; (800931c <__libc_init_array+0x3c>)
 80092e6:	1b64      	subs	r4, r4, r5
 80092e8:	10a4      	asrs	r4, r4, #2
 80092ea:	2600      	movs	r6, #0
 80092ec:	42a6      	cmp	r6, r4
 80092ee:	d109      	bne.n	8009304 <__libc_init_array+0x24>
 80092f0:	4d0b      	ldr	r5, [pc, #44]	; (8009320 <__libc_init_array+0x40>)
 80092f2:	4c0c      	ldr	r4, [pc, #48]	; (8009324 <__libc_init_array+0x44>)
 80092f4:	f004 f856 	bl	800d3a4 <_init>
 80092f8:	1b64      	subs	r4, r4, r5
 80092fa:	10a4      	asrs	r4, r4, #2
 80092fc:	2600      	movs	r6, #0
 80092fe:	42a6      	cmp	r6, r4
 8009300:	d105      	bne.n	800930e <__libc_init_array+0x2e>
 8009302:	bd70      	pop	{r4, r5, r6, pc}
 8009304:	f855 3b04 	ldr.w	r3, [r5], #4
 8009308:	4798      	blx	r3
 800930a:	3601      	adds	r6, #1
 800930c:	e7ee      	b.n	80092ec <__libc_init_array+0xc>
 800930e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009312:	4798      	blx	r3
 8009314:	3601      	adds	r6, #1
 8009316:	e7f2      	b.n	80092fe <__libc_init_array+0x1e>
 8009318:	0800dc1c 	.word	0x0800dc1c
 800931c:	0800dc1c 	.word	0x0800dc1c
 8009320:	0800dc1c 	.word	0x0800dc1c
 8009324:	0800dc20 	.word	0x0800dc20

08009328 <memset>:
 8009328:	4402      	add	r2, r0
 800932a:	4603      	mov	r3, r0
 800932c:	4293      	cmp	r3, r2
 800932e:	d100      	bne.n	8009332 <memset+0xa>
 8009330:	4770      	bx	lr
 8009332:	f803 1b01 	strb.w	r1, [r3], #1
 8009336:	e7f9      	b.n	800932c <memset+0x4>

08009338 <__cvt>:
 8009338:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800933c:	ec55 4b10 	vmov	r4, r5, d0
 8009340:	2d00      	cmp	r5, #0
 8009342:	460e      	mov	r6, r1
 8009344:	4619      	mov	r1, r3
 8009346:	462b      	mov	r3, r5
 8009348:	bfbb      	ittet	lt
 800934a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800934e:	461d      	movlt	r5, r3
 8009350:	2300      	movge	r3, #0
 8009352:	232d      	movlt	r3, #45	; 0x2d
 8009354:	700b      	strb	r3, [r1, #0]
 8009356:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009358:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800935c:	4691      	mov	r9, r2
 800935e:	f023 0820 	bic.w	r8, r3, #32
 8009362:	bfbc      	itt	lt
 8009364:	4622      	movlt	r2, r4
 8009366:	4614      	movlt	r4, r2
 8009368:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800936c:	d005      	beq.n	800937a <__cvt+0x42>
 800936e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009372:	d100      	bne.n	8009376 <__cvt+0x3e>
 8009374:	3601      	adds	r6, #1
 8009376:	2102      	movs	r1, #2
 8009378:	e000      	b.n	800937c <__cvt+0x44>
 800937a:	2103      	movs	r1, #3
 800937c:	ab03      	add	r3, sp, #12
 800937e:	9301      	str	r3, [sp, #4]
 8009380:	ab02      	add	r3, sp, #8
 8009382:	9300      	str	r3, [sp, #0]
 8009384:	ec45 4b10 	vmov	d0, r4, r5
 8009388:	4653      	mov	r3, sl
 800938a:	4632      	mov	r2, r6
 800938c:	f000 fd00 	bl	8009d90 <_dtoa_r>
 8009390:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009394:	4607      	mov	r7, r0
 8009396:	d102      	bne.n	800939e <__cvt+0x66>
 8009398:	f019 0f01 	tst.w	r9, #1
 800939c:	d022      	beq.n	80093e4 <__cvt+0xac>
 800939e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80093a2:	eb07 0906 	add.w	r9, r7, r6
 80093a6:	d110      	bne.n	80093ca <__cvt+0x92>
 80093a8:	783b      	ldrb	r3, [r7, #0]
 80093aa:	2b30      	cmp	r3, #48	; 0x30
 80093ac:	d10a      	bne.n	80093c4 <__cvt+0x8c>
 80093ae:	2200      	movs	r2, #0
 80093b0:	2300      	movs	r3, #0
 80093b2:	4620      	mov	r0, r4
 80093b4:	4629      	mov	r1, r5
 80093b6:	f7f7 fb8f 	bl	8000ad8 <__aeabi_dcmpeq>
 80093ba:	b918      	cbnz	r0, 80093c4 <__cvt+0x8c>
 80093bc:	f1c6 0601 	rsb	r6, r6, #1
 80093c0:	f8ca 6000 	str.w	r6, [sl]
 80093c4:	f8da 3000 	ldr.w	r3, [sl]
 80093c8:	4499      	add	r9, r3
 80093ca:	2200      	movs	r2, #0
 80093cc:	2300      	movs	r3, #0
 80093ce:	4620      	mov	r0, r4
 80093d0:	4629      	mov	r1, r5
 80093d2:	f7f7 fb81 	bl	8000ad8 <__aeabi_dcmpeq>
 80093d6:	b108      	cbz	r0, 80093dc <__cvt+0xa4>
 80093d8:	f8cd 900c 	str.w	r9, [sp, #12]
 80093dc:	2230      	movs	r2, #48	; 0x30
 80093de:	9b03      	ldr	r3, [sp, #12]
 80093e0:	454b      	cmp	r3, r9
 80093e2:	d307      	bcc.n	80093f4 <__cvt+0xbc>
 80093e4:	9b03      	ldr	r3, [sp, #12]
 80093e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80093e8:	1bdb      	subs	r3, r3, r7
 80093ea:	4638      	mov	r0, r7
 80093ec:	6013      	str	r3, [r2, #0]
 80093ee:	b004      	add	sp, #16
 80093f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093f4:	1c59      	adds	r1, r3, #1
 80093f6:	9103      	str	r1, [sp, #12]
 80093f8:	701a      	strb	r2, [r3, #0]
 80093fa:	e7f0      	b.n	80093de <__cvt+0xa6>

080093fc <__exponent>:
 80093fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80093fe:	4603      	mov	r3, r0
 8009400:	2900      	cmp	r1, #0
 8009402:	bfb8      	it	lt
 8009404:	4249      	neglt	r1, r1
 8009406:	f803 2b02 	strb.w	r2, [r3], #2
 800940a:	bfb4      	ite	lt
 800940c:	222d      	movlt	r2, #45	; 0x2d
 800940e:	222b      	movge	r2, #43	; 0x2b
 8009410:	2909      	cmp	r1, #9
 8009412:	7042      	strb	r2, [r0, #1]
 8009414:	dd2a      	ble.n	800946c <__exponent+0x70>
 8009416:	f10d 0407 	add.w	r4, sp, #7
 800941a:	46a4      	mov	ip, r4
 800941c:	270a      	movs	r7, #10
 800941e:	46a6      	mov	lr, r4
 8009420:	460a      	mov	r2, r1
 8009422:	fb91 f6f7 	sdiv	r6, r1, r7
 8009426:	fb07 1516 	mls	r5, r7, r6, r1
 800942a:	3530      	adds	r5, #48	; 0x30
 800942c:	2a63      	cmp	r2, #99	; 0x63
 800942e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8009432:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009436:	4631      	mov	r1, r6
 8009438:	dcf1      	bgt.n	800941e <__exponent+0x22>
 800943a:	3130      	adds	r1, #48	; 0x30
 800943c:	f1ae 0502 	sub.w	r5, lr, #2
 8009440:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009444:	1c44      	adds	r4, r0, #1
 8009446:	4629      	mov	r1, r5
 8009448:	4561      	cmp	r1, ip
 800944a:	d30a      	bcc.n	8009462 <__exponent+0x66>
 800944c:	f10d 0209 	add.w	r2, sp, #9
 8009450:	eba2 020e 	sub.w	r2, r2, lr
 8009454:	4565      	cmp	r5, ip
 8009456:	bf88      	it	hi
 8009458:	2200      	movhi	r2, #0
 800945a:	4413      	add	r3, r2
 800945c:	1a18      	subs	r0, r3, r0
 800945e:	b003      	add	sp, #12
 8009460:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009462:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009466:	f804 2f01 	strb.w	r2, [r4, #1]!
 800946a:	e7ed      	b.n	8009448 <__exponent+0x4c>
 800946c:	2330      	movs	r3, #48	; 0x30
 800946e:	3130      	adds	r1, #48	; 0x30
 8009470:	7083      	strb	r3, [r0, #2]
 8009472:	70c1      	strb	r1, [r0, #3]
 8009474:	1d03      	adds	r3, r0, #4
 8009476:	e7f1      	b.n	800945c <__exponent+0x60>

08009478 <_printf_float>:
 8009478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800947c:	ed2d 8b02 	vpush	{d8}
 8009480:	b08d      	sub	sp, #52	; 0x34
 8009482:	460c      	mov	r4, r1
 8009484:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009488:	4616      	mov	r6, r2
 800948a:	461f      	mov	r7, r3
 800948c:	4605      	mov	r5, r0
 800948e:	f001 fa6d 	bl	800a96c <_localeconv_r>
 8009492:	f8d0 a000 	ldr.w	sl, [r0]
 8009496:	4650      	mov	r0, sl
 8009498:	f7f6 fea2 	bl	80001e0 <strlen>
 800949c:	2300      	movs	r3, #0
 800949e:	930a      	str	r3, [sp, #40]	; 0x28
 80094a0:	6823      	ldr	r3, [r4, #0]
 80094a2:	9305      	str	r3, [sp, #20]
 80094a4:	f8d8 3000 	ldr.w	r3, [r8]
 80094a8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80094ac:	3307      	adds	r3, #7
 80094ae:	f023 0307 	bic.w	r3, r3, #7
 80094b2:	f103 0208 	add.w	r2, r3, #8
 80094b6:	f8c8 2000 	str.w	r2, [r8]
 80094ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094be:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80094c2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80094c6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80094ca:	9307      	str	r3, [sp, #28]
 80094cc:	f8cd 8018 	str.w	r8, [sp, #24]
 80094d0:	ee08 0a10 	vmov	s16, r0
 80094d4:	4b9f      	ldr	r3, [pc, #636]	; (8009754 <_printf_float+0x2dc>)
 80094d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80094da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80094de:	f7f7 fb2d 	bl	8000b3c <__aeabi_dcmpun>
 80094e2:	bb88      	cbnz	r0, 8009548 <_printf_float+0xd0>
 80094e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80094e8:	4b9a      	ldr	r3, [pc, #616]	; (8009754 <_printf_float+0x2dc>)
 80094ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80094ee:	f7f7 fb07 	bl	8000b00 <__aeabi_dcmple>
 80094f2:	bb48      	cbnz	r0, 8009548 <_printf_float+0xd0>
 80094f4:	2200      	movs	r2, #0
 80094f6:	2300      	movs	r3, #0
 80094f8:	4640      	mov	r0, r8
 80094fa:	4649      	mov	r1, r9
 80094fc:	f7f7 faf6 	bl	8000aec <__aeabi_dcmplt>
 8009500:	b110      	cbz	r0, 8009508 <_printf_float+0x90>
 8009502:	232d      	movs	r3, #45	; 0x2d
 8009504:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009508:	4b93      	ldr	r3, [pc, #588]	; (8009758 <_printf_float+0x2e0>)
 800950a:	4894      	ldr	r0, [pc, #592]	; (800975c <_printf_float+0x2e4>)
 800950c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009510:	bf94      	ite	ls
 8009512:	4698      	movls	r8, r3
 8009514:	4680      	movhi	r8, r0
 8009516:	2303      	movs	r3, #3
 8009518:	6123      	str	r3, [r4, #16]
 800951a:	9b05      	ldr	r3, [sp, #20]
 800951c:	f023 0204 	bic.w	r2, r3, #4
 8009520:	6022      	str	r2, [r4, #0]
 8009522:	f04f 0900 	mov.w	r9, #0
 8009526:	9700      	str	r7, [sp, #0]
 8009528:	4633      	mov	r3, r6
 800952a:	aa0b      	add	r2, sp, #44	; 0x2c
 800952c:	4621      	mov	r1, r4
 800952e:	4628      	mov	r0, r5
 8009530:	f000 f9d8 	bl	80098e4 <_printf_common>
 8009534:	3001      	adds	r0, #1
 8009536:	f040 8090 	bne.w	800965a <_printf_float+0x1e2>
 800953a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800953e:	b00d      	add	sp, #52	; 0x34
 8009540:	ecbd 8b02 	vpop	{d8}
 8009544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009548:	4642      	mov	r2, r8
 800954a:	464b      	mov	r3, r9
 800954c:	4640      	mov	r0, r8
 800954e:	4649      	mov	r1, r9
 8009550:	f7f7 faf4 	bl	8000b3c <__aeabi_dcmpun>
 8009554:	b140      	cbz	r0, 8009568 <_printf_float+0xf0>
 8009556:	464b      	mov	r3, r9
 8009558:	2b00      	cmp	r3, #0
 800955a:	bfbc      	itt	lt
 800955c:	232d      	movlt	r3, #45	; 0x2d
 800955e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009562:	487f      	ldr	r0, [pc, #508]	; (8009760 <_printf_float+0x2e8>)
 8009564:	4b7f      	ldr	r3, [pc, #508]	; (8009764 <_printf_float+0x2ec>)
 8009566:	e7d1      	b.n	800950c <_printf_float+0x94>
 8009568:	6863      	ldr	r3, [r4, #4]
 800956a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800956e:	9206      	str	r2, [sp, #24]
 8009570:	1c5a      	adds	r2, r3, #1
 8009572:	d13f      	bne.n	80095f4 <_printf_float+0x17c>
 8009574:	2306      	movs	r3, #6
 8009576:	6063      	str	r3, [r4, #4]
 8009578:	9b05      	ldr	r3, [sp, #20]
 800957a:	6861      	ldr	r1, [r4, #4]
 800957c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009580:	2300      	movs	r3, #0
 8009582:	9303      	str	r3, [sp, #12]
 8009584:	ab0a      	add	r3, sp, #40	; 0x28
 8009586:	e9cd b301 	strd	fp, r3, [sp, #4]
 800958a:	ab09      	add	r3, sp, #36	; 0x24
 800958c:	ec49 8b10 	vmov	d0, r8, r9
 8009590:	9300      	str	r3, [sp, #0]
 8009592:	6022      	str	r2, [r4, #0]
 8009594:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009598:	4628      	mov	r0, r5
 800959a:	f7ff fecd 	bl	8009338 <__cvt>
 800959e:	9b06      	ldr	r3, [sp, #24]
 80095a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80095a2:	2b47      	cmp	r3, #71	; 0x47
 80095a4:	4680      	mov	r8, r0
 80095a6:	d108      	bne.n	80095ba <_printf_float+0x142>
 80095a8:	1cc8      	adds	r0, r1, #3
 80095aa:	db02      	blt.n	80095b2 <_printf_float+0x13a>
 80095ac:	6863      	ldr	r3, [r4, #4]
 80095ae:	4299      	cmp	r1, r3
 80095b0:	dd41      	ble.n	8009636 <_printf_float+0x1be>
 80095b2:	f1ab 0b02 	sub.w	fp, fp, #2
 80095b6:	fa5f fb8b 	uxtb.w	fp, fp
 80095ba:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80095be:	d820      	bhi.n	8009602 <_printf_float+0x18a>
 80095c0:	3901      	subs	r1, #1
 80095c2:	465a      	mov	r2, fp
 80095c4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80095c8:	9109      	str	r1, [sp, #36]	; 0x24
 80095ca:	f7ff ff17 	bl	80093fc <__exponent>
 80095ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80095d0:	1813      	adds	r3, r2, r0
 80095d2:	2a01      	cmp	r2, #1
 80095d4:	4681      	mov	r9, r0
 80095d6:	6123      	str	r3, [r4, #16]
 80095d8:	dc02      	bgt.n	80095e0 <_printf_float+0x168>
 80095da:	6822      	ldr	r2, [r4, #0]
 80095dc:	07d2      	lsls	r2, r2, #31
 80095de:	d501      	bpl.n	80095e4 <_printf_float+0x16c>
 80095e0:	3301      	adds	r3, #1
 80095e2:	6123      	str	r3, [r4, #16]
 80095e4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d09c      	beq.n	8009526 <_printf_float+0xae>
 80095ec:	232d      	movs	r3, #45	; 0x2d
 80095ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095f2:	e798      	b.n	8009526 <_printf_float+0xae>
 80095f4:	9a06      	ldr	r2, [sp, #24]
 80095f6:	2a47      	cmp	r2, #71	; 0x47
 80095f8:	d1be      	bne.n	8009578 <_printf_float+0x100>
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d1bc      	bne.n	8009578 <_printf_float+0x100>
 80095fe:	2301      	movs	r3, #1
 8009600:	e7b9      	b.n	8009576 <_printf_float+0xfe>
 8009602:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009606:	d118      	bne.n	800963a <_printf_float+0x1c2>
 8009608:	2900      	cmp	r1, #0
 800960a:	6863      	ldr	r3, [r4, #4]
 800960c:	dd0b      	ble.n	8009626 <_printf_float+0x1ae>
 800960e:	6121      	str	r1, [r4, #16]
 8009610:	b913      	cbnz	r3, 8009618 <_printf_float+0x1a0>
 8009612:	6822      	ldr	r2, [r4, #0]
 8009614:	07d0      	lsls	r0, r2, #31
 8009616:	d502      	bpl.n	800961e <_printf_float+0x1a6>
 8009618:	3301      	adds	r3, #1
 800961a:	440b      	add	r3, r1
 800961c:	6123      	str	r3, [r4, #16]
 800961e:	65a1      	str	r1, [r4, #88]	; 0x58
 8009620:	f04f 0900 	mov.w	r9, #0
 8009624:	e7de      	b.n	80095e4 <_printf_float+0x16c>
 8009626:	b913      	cbnz	r3, 800962e <_printf_float+0x1b6>
 8009628:	6822      	ldr	r2, [r4, #0]
 800962a:	07d2      	lsls	r2, r2, #31
 800962c:	d501      	bpl.n	8009632 <_printf_float+0x1ba>
 800962e:	3302      	adds	r3, #2
 8009630:	e7f4      	b.n	800961c <_printf_float+0x1a4>
 8009632:	2301      	movs	r3, #1
 8009634:	e7f2      	b.n	800961c <_printf_float+0x1a4>
 8009636:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800963a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800963c:	4299      	cmp	r1, r3
 800963e:	db05      	blt.n	800964c <_printf_float+0x1d4>
 8009640:	6823      	ldr	r3, [r4, #0]
 8009642:	6121      	str	r1, [r4, #16]
 8009644:	07d8      	lsls	r0, r3, #31
 8009646:	d5ea      	bpl.n	800961e <_printf_float+0x1a6>
 8009648:	1c4b      	adds	r3, r1, #1
 800964a:	e7e7      	b.n	800961c <_printf_float+0x1a4>
 800964c:	2900      	cmp	r1, #0
 800964e:	bfd4      	ite	le
 8009650:	f1c1 0202 	rsble	r2, r1, #2
 8009654:	2201      	movgt	r2, #1
 8009656:	4413      	add	r3, r2
 8009658:	e7e0      	b.n	800961c <_printf_float+0x1a4>
 800965a:	6823      	ldr	r3, [r4, #0]
 800965c:	055a      	lsls	r2, r3, #21
 800965e:	d407      	bmi.n	8009670 <_printf_float+0x1f8>
 8009660:	6923      	ldr	r3, [r4, #16]
 8009662:	4642      	mov	r2, r8
 8009664:	4631      	mov	r1, r6
 8009666:	4628      	mov	r0, r5
 8009668:	47b8      	blx	r7
 800966a:	3001      	adds	r0, #1
 800966c:	d12c      	bne.n	80096c8 <_printf_float+0x250>
 800966e:	e764      	b.n	800953a <_printf_float+0xc2>
 8009670:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009674:	f240 80e0 	bls.w	8009838 <_printf_float+0x3c0>
 8009678:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800967c:	2200      	movs	r2, #0
 800967e:	2300      	movs	r3, #0
 8009680:	f7f7 fa2a 	bl	8000ad8 <__aeabi_dcmpeq>
 8009684:	2800      	cmp	r0, #0
 8009686:	d034      	beq.n	80096f2 <_printf_float+0x27a>
 8009688:	4a37      	ldr	r2, [pc, #220]	; (8009768 <_printf_float+0x2f0>)
 800968a:	2301      	movs	r3, #1
 800968c:	4631      	mov	r1, r6
 800968e:	4628      	mov	r0, r5
 8009690:	47b8      	blx	r7
 8009692:	3001      	adds	r0, #1
 8009694:	f43f af51 	beq.w	800953a <_printf_float+0xc2>
 8009698:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800969c:	429a      	cmp	r2, r3
 800969e:	db02      	blt.n	80096a6 <_printf_float+0x22e>
 80096a0:	6823      	ldr	r3, [r4, #0]
 80096a2:	07d8      	lsls	r0, r3, #31
 80096a4:	d510      	bpl.n	80096c8 <_printf_float+0x250>
 80096a6:	ee18 3a10 	vmov	r3, s16
 80096aa:	4652      	mov	r2, sl
 80096ac:	4631      	mov	r1, r6
 80096ae:	4628      	mov	r0, r5
 80096b0:	47b8      	blx	r7
 80096b2:	3001      	adds	r0, #1
 80096b4:	f43f af41 	beq.w	800953a <_printf_float+0xc2>
 80096b8:	f04f 0800 	mov.w	r8, #0
 80096bc:	f104 091a 	add.w	r9, r4, #26
 80096c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096c2:	3b01      	subs	r3, #1
 80096c4:	4543      	cmp	r3, r8
 80096c6:	dc09      	bgt.n	80096dc <_printf_float+0x264>
 80096c8:	6823      	ldr	r3, [r4, #0]
 80096ca:	079b      	lsls	r3, r3, #30
 80096cc:	f100 8105 	bmi.w	80098da <_printf_float+0x462>
 80096d0:	68e0      	ldr	r0, [r4, #12]
 80096d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096d4:	4298      	cmp	r0, r3
 80096d6:	bfb8      	it	lt
 80096d8:	4618      	movlt	r0, r3
 80096da:	e730      	b.n	800953e <_printf_float+0xc6>
 80096dc:	2301      	movs	r3, #1
 80096de:	464a      	mov	r2, r9
 80096e0:	4631      	mov	r1, r6
 80096e2:	4628      	mov	r0, r5
 80096e4:	47b8      	blx	r7
 80096e6:	3001      	adds	r0, #1
 80096e8:	f43f af27 	beq.w	800953a <_printf_float+0xc2>
 80096ec:	f108 0801 	add.w	r8, r8, #1
 80096f0:	e7e6      	b.n	80096c0 <_printf_float+0x248>
 80096f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	dc39      	bgt.n	800976c <_printf_float+0x2f4>
 80096f8:	4a1b      	ldr	r2, [pc, #108]	; (8009768 <_printf_float+0x2f0>)
 80096fa:	2301      	movs	r3, #1
 80096fc:	4631      	mov	r1, r6
 80096fe:	4628      	mov	r0, r5
 8009700:	47b8      	blx	r7
 8009702:	3001      	adds	r0, #1
 8009704:	f43f af19 	beq.w	800953a <_printf_float+0xc2>
 8009708:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800970c:	4313      	orrs	r3, r2
 800970e:	d102      	bne.n	8009716 <_printf_float+0x29e>
 8009710:	6823      	ldr	r3, [r4, #0]
 8009712:	07d9      	lsls	r1, r3, #31
 8009714:	d5d8      	bpl.n	80096c8 <_printf_float+0x250>
 8009716:	ee18 3a10 	vmov	r3, s16
 800971a:	4652      	mov	r2, sl
 800971c:	4631      	mov	r1, r6
 800971e:	4628      	mov	r0, r5
 8009720:	47b8      	blx	r7
 8009722:	3001      	adds	r0, #1
 8009724:	f43f af09 	beq.w	800953a <_printf_float+0xc2>
 8009728:	f04f 0900 	mov.w	r9, #0
 800972c:	f104 0a1a 	add.w	sl, r4, #26
 8009730:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009732:	425b      	negs	r3, r3
 8009734:	454b      	cmp	r3, r9
 8009736:	dc01      	bgt.n	800973c <_printf_float+0x2c4>
 8009738:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800973a:	e792      	b.n	8009662 <_printf_float+0x1ea>
 800973c:	2301      	movs	r3, #1
 800973e:	4652      	mov	r2, sl
 8009740:	4631      	mov	r1, r6
 8009742:	4628      	mov	r0, r5
 8009744:	47b8      	blx	r7
 8009746:	3001      	adds	r0, #1
 8009748:	f43f aef7 	beq.w	800953a <_printf_float+0xc2>
 800974c:	f109 0901 	add.w	r9, r9, #1
 8009750:	e7ee      	b.n	8009730 <_printf_float+0x2b8>
 8009752:	bf00      	nop
 8009754:	7fefffff 	.word	0x7fefffff
 8009758:	0800d434 	.word	0x0800d434
 800975c:	0800d438 	.word	0x0800d438
 8009760:	0800d440 	.word	0x0800d440
 8009764:	0800d43c 	.word	0x0800d43c
 8009768:	0800d444 	.word	0x0800d444
 800976c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800976e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009770:	429a      	cmp	r2, r3
 8009772:	bfa8      	it	ge
 8009774:	461a      	movge	r2, r3
 8009776:	2a00      	cmp	r2, #0
 8009778:	4691      	mov	r9, r2
 800977a:	dc37      	bgt.n	80097ec <_printf_float+0x374>
 800977c:	f04f 0b00 	mov.w	fp, #0
 8009780:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009784:	f104 021a 	add.w	r2, r4, #26
 8009788:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800978a:	9305      	str	r3, [sp, #20]
 800978c:	eba3 0309 	sub.w	r3, r3, r9
 8009790:	455b      	cmp	r3, fp
 8009792:	dc33      	bgt.n	80097fc <_printf_float+0x384>
 8009794:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009798:	429a      	cmp	r2, r3
 800979a:	db3b      	blt.n	8009814 <_printf_float+0x39c>
 800979c:	6823      	ldr	r3, [r4, #0]
 800979e:	07da      	lsls	r2, r3, #31
 80097a0:	d438      	bmi.n	8009814 <_printf_float+0x39c>
 80097a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097a4:	9a05      	ldr	r2, [sp, #20]
 80097a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80097a8:	1a9a      	subs	r2, r3, r2
 80097aa:	eba3 0901 	sub.w	r9, r3, r1
 80097ae:	4591      	cmp	r9, r2
 80097b0:	bfa8      	it	ge
 80097b2:	4691      	movge	r9, r2
 80097b4:	f1b9 0f00 	cmp.w	r9, #0
 80097b8:	dc35      	bgt.n	8009826 <_printf_float+0x3ae>
 80097ba:	f04f 0800 	mov.w	r8, #0
 80097be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80097c2:	f104 0a1a 	add.w	sl, r4, #26
 80097c6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80097ca:	1a9b      	subs	r3, r3, r2
 80097cc:	eba3 0309 	sub.w	r3, r3, r9
 80097d0:	4543      	cmp	r3, r8
 80097d2:	f77f af79 	ble.w	80096c8 <_printf_float+0x250>
 80097d6:	2301      	movs	r3, #1
 80097d8:	4652      	mov	r2, sl
 80097da:	4631      	mov	r1, r6
 80097dc:	4628      	mov	r0, r5
 80097de:	47b8      	blx	r7
 80097e0:	3001      	adds	r0, #1
 80097e2:	f43f aeaa 	beq.w	800953a <_printf_float+0xc2>
 80097e6:	f108 0801 	add.w	r8, r8, #1
 80097ea:	e7ec      	b.n	80097c6 <_printf_float+0x34e>
 80097ec:	4613      	mov	r3, r2
 80097ee:	4631      	mov	r1, r6
 80097f0:	4642      	mov	r2, r8
 80097f2:	4628      	mov	r0, r5
 80097f4:	47b8      	blx	r7
 80097f6:	3001      	adds	r0, #1
 80097f8:	d1c0      	bne.n	800977c <_printf_float+0x304>
 80097fa:	e69e      	b.n	800953a <_printf_float+0xc2>
 80097fc:	2301      	movs	r3, #1
 80097fe:	4631      	mov	r1, r6
 8009800:	4628      	mov	r0, r5
 8009802:	9205      	str	r2, [sp, #20]
 8009804:	47b8      	blx	r7
 8009806:	3001      	adds	r0, #1
 8009808:	f43f ae97 	beq.w	800953a <_printf_float+0xc2>
 800980c:	9a05      	ldr	r2, [sp, #20]
 800980e:	f10b 0b01 	add.w	fp, fp, #1
 8009812:	e7b9      	b.n	8009788 <_printf_float+0x310>
 8009814:	ee18 3a10 	vmov	r3, s16
 8009818:	4652      	mov	r2, sl
 800981a:	4631      	mov	r1, r6
 800981c:	4628      	mov	r0, r5
 800981e:	47b8      	blx	r7
 8009820:	3001      	adds	r0, #1
 8009822:	d1be      	bne.n	80097a2 <_printf_float+0x32a>
 8009824:	e689      	b.n	800953a <_printf_float+0xc2>
 8009826:	9a05      	ldr	r2, [sp, #20]
 8009828:	464b      	mov	r3, r9
 800982a:	4442      	add	r2, r8
 800982c:	4631      	mov	r1, r6
 800982e:	4628      	mov	r0, r5
 8009830:	47b8      	blx	r7
 8009832:	3001      	adds	r0, #1
 8009834:	d1c1      	bne.n	80097ba <_printf_float+0x342>
 8009836:	e680      	b.n	800953a <_printf_float+0xc2>
 8009838:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800983a:	2a01      	cmp	r2, #1
 800983c:	dc01      	bgt.n	8009842 <_printf_float+0x3ca>
 800983e:	07db      	lsls	r3, r3, #31
 8009840:	d538      	bpl.n	80098b4 <_printf_float+0x43c>
 8009842:	2301      	movs	r3, #1
 8009844:	4642      	mov	r2, r8
 8009846:	4631      	mov	r1, r6
 8009848:	4628      	mov	r0, r5
 800984a:	47b8      	blx	r7
 800984c:	3001      	adds	r0, #1
 800984e:	f43f ae74 	beq.w	800953a <_printf_float+0xc2>
 8009852:	ee18 3a10 	vmov	r3, s16
 8009856:	4652      	mov	r2, sl
 8009858:	4631      	mov	r1, r6
 800985a:	4628      	mov	r0, r5
 800985c:	47b8      	blx	r7
 800985e:	3001      	adds	r0, #1
 8009860:	f43f ae6b 	beq.w	800953a <_printf_float+0xc2>
 8009864:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009868:	2200      	movs	r2, #0
 800986a:	2300      	movs	r3, #0
 800986c:	f7f7 f934 	bl	8000ad8 <__aeabi_dcmpeq>
 8009870:	b9d8      	cbnz	r0, 80098aa <_printf_float+0x432>
 8009872:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009874:	f108 0201 	add.w	r2, r8, #1
 8009878:	3b01      	subs	r3, #1
 800987a:	4631      	mov	r1, r6
 800987c:	4628      	mov	r0, r5
 800987e:	47b8      	blx	r7
 8009880:	3001      	adds	r0, #1
 8009882:	d10e      	bne.n	80098a2 <_printf_float+0x42a>
 8009884:	e659      	b.n	800953a <_printf_float+0xc2>
 8009886:	2301      	movs	r3, #1
 8009888:	4652      	mov	r2, sl
 800988a:	4631      	mov	r1, r6
 800988c:	4628      	mov	r0, r5
 800988e:	47b8      	blx	r7
 8009890:	3001      	adds	r0, #1
 8009892:	f43f ae52 	beq.w	800953a <_printf_float+0xc2>
 8009896:	f108 0801 	add.w	r8, r8, #1
 800989a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800989c:	3b01      	subs	r3, #1
 800989e:	4543      	cmp	r3, r8
 80098a0:	dcf1      	bgt.n	8009886 <_printf_float+0x40e>
 80098a2:	464b      	mov	r3, r9
 80098a4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80098a8:	e6dc      	b.n	8009664 <_printf_float+0x1ec>
 80098aa:	f04f 0800 	mov.w	r8, #0
 80098ae:	f104 0a1a 	add.w	sl, r4, #26
 80098b2:	e7f2      	b.n	800989a <_printf_float+0x422>
 80098b4:	2301      	movs	r3, #1
 80098b6:	4642      	mov	r2, r8
 80098b8:	e7df      	b.n	800987a <_printf_float+0x402>
 80098ba:	2301      	movs	r3, #1
 80098bc:	464a      	mov	r2, r9
 80098be:	4631      	mov	r1, r6
 80098c0:	4628      	mov	r0, r5
 80098c2:	47b8      	blx	r7
 80098c4:	3001      	adds	r0, #1
 80098c6:	f43f ae38 	beq.w	800953a <_printf_float+0xc2>
 80098ca:	f108 0801 	add.w	r8, r8, #1
 80098ce:	68e3      	ldr	r3, [r4, #12]
 80098d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80098d2:	1a5b      	subs	r3, r3, r1
 80098d4:	4543      	cmp	r3, r8
 80098d6:	dcf0      	bgt.n	80098ba <_printf_float+0x442>
 80098d8:	e6fa      	b.n	80096d0 <_printf_float+0x258>
 80098da:	f04f 0800 	mov.w	r8, #0
 80098de:	f104 0919 	add.w	r9, r4, #25
 80098e2:	e7f4      	b.n	80098ce <_printf_float+0x456>

080098e4 <_printf_common>:
 80098e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098e8:	4616      	mov	r6, r2
 80098ea:	4699      	mov	r9, r3
 80098ec:	688a      	ldr	r2, [r1, #8]
 80098ee:	690b      	ldr	r3, [r1, #16]
 80098f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80098f4:	4293      	cmp	r3, r2
 80098f6:	bfb8      	it	lt
 80098f8:	4613      	movlt	r3, r2
 80098fa:	6033      	str	r3, [r6, #0]
 80098fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009900:	4607      	mov	r7, r0
 8009902:	460c      	mov	r4, r1
 8009904:	b10a      	cbz	r2, 800990a <_printf_common+0x26>
 8009906:	3301      	adds	r3, #1
 8009908:	6033      	str	r3, [r6, #0]
 800990a:	6823      	ldr	r3, [r4, #0]
 800990c:	0699      	lsls	r1, r3, #26
 800990e:	bf42      	ittt	mi
 8009910:	6833      	ldrmi	r3, [r6, #0]
 8009912:	3302      	addmi	r3, #2
 8009914:	6033      	strmi	r3, [r6, #0]
 8009916:	6825      	ldr	r5, [r4, #0]
 8009918:	f015 0506 	ands.w	r5, r5, #6
 800991c:	d106      	bne.n	800992c <_printf_common+0x48>
 800991e:	f104 0a19 	add.w	sl, r4, #25
 8009922:	68e3      	ldr	r3, [r4, #12]
 8009924:	6832      	ldr	r2, [r6, #0]
 8009926:	1a9b      	subs	r3, r3, r2
 8009928:	42ab      	cmp	r3, r5
 800992a:	dc26      	bgt.n	800997a <_printf_common+0x96>
 800992c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009930:	1e13      	subs	r3, r2, #0
 8009932:	6822      	ldr	r2, [r4, #0]
 8009934:	bf18      	it	ne
 8009936:	2301      	movne	r3, #1
 8009938:	0692      	lsls	r2, r2, #26
 800993a:	d42b      	bmi.n	8009994 <_printf_common+0xb0>
 800993c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009940:	4649      	mov	r1, r9
 8009942:	4638      	mov	r0, r7
 8009944:	47c0      	blx	r8
 8009946:	3001      	adds	r0, #1
 8009948:	d01e      	beq.n	8009988 <_printf_common+0xa4>
 800994a:	6823      	ldr	r3, [r4, #0]
 800994c:	68e5      	ldr	r5, [r4, #12]
 800994e:	6832      	ldr	r2, [r6, #0]
 8009950:	f003 0306 	and.w	r3, r3, #6
 8009954:	2b04      	cmp	r3, #4
 8009956:	bf08      	it	eq
 8009958:	1aad      	subeq	r5, r5, r2
 800995a:	68a3      	ldr	r3, [r4, #8]
 800995c:	6922      	ldr	r2, [r4, #16]
 800995e:	bf0c      	ite	eq
 8009960:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009964:	2500      	movne	r5, #0
 8009966:	4293      	cmp	r3, r2
 8009968:	bfc4      	itt	gt
 800996a:	1a9b      	subgt	r3, r3, r2
 800996c:	18ed      	addgt	r5, r5, r3
 800996e:	2600      	movs	r6, #0
 8009970:	341a      	adds	r4, #26
 8009972:	42b5      	cmp	r5, r6
 8009974:	d11a      	bne.n	80099ac <_printf_common+0xc8>
 8009976:	2000      	movs	r0, #0
 8009978:	e008      	b.n	800998c <_printf_common+0xa8>
 800997a:	2301      	movs	r3, #1
 800997c:	4652      	mov	r2, sl
 800997e:	4649      	mov	r1, r9
 8009980:	4638      	mov	r0, r7
 8009982:	47c0      	blx	r8
 8009984:	3001      	adds	r0, #1
 8009986:	d103      	bne.n	8009990 <_printf_common+0xac>
 8009988:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800998c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009990:	3501      	adds	r5, #1
 8009992:	e7c6      	b.n	8009922 <_printf_common+0x3e>
 8009994:	18e1      	adds	r1, r4, r3
 8009996:	1c5a      	adds	r2, r3, #1
 8009998:	2030      	movs	r0, #48	; 0x30
 800999a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800999e:	4422      	add	r2, r4
 80099a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80099a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80099a8:	3302      	adds	r3, #2
 80099aa:	e7c7      	b.n	800993c <_printf_common+0x58>
 80099ac:	2301      	movs	r3, #1
 80099ae:	4622      	mov	r2, r4
 80099b0:	4649      	mov	r1, r9
 80099b2:	4638      	mov	r0, r7
 80099b4:	47c0      	blx	r8
 80099b6:	3001      	adds	r0, #1
 80099b8:	d0e6      	beq.n	8009988 <_printf_common+0xa4>
 80099ba:	3601      	adds	r6, #1
 80099bc:	e7d9      	b.n	8009972 <_printf_common+0x8e>
	...

080099c0 <_printf_i>:
 80099c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80099c4:	7e0f      	ldrb	r7, [r1, #24]
 80099c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80099c8:	2f78      	cmp	r7, #120	; 0x78
 80099ca:	4691      	mov	r9, r2
 80099cc:	4680      	mov	r8, r0
 80099ce:	460c      	mov	r4, r1
 80099d0:	469a      	mov	sl, r3
 80099d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80099d6:	d807      	bhi.n	80099e8 <_printf_i+0x28>
 80099d8:	2f62      	cmp	r7, #98	; 0x62
 80099da:	d80a      	bhi.n	80099f2 <_printf_i+0x32>
 80099dc:	2f00      	cmp	r7, #0
 80099de:	f000 80d8 	beq.w	8009b92 <_printf_i+0x1d2>
 80099e2:	2f58      	cmp	r7, #88	; 0x58
 80099e4:	f000 80a3 	beq.w	8009b2e <_printf_i+0x16e>
 80099e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80099ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80099f0:	e03a      	b.n	8009a68 <_printf_i+0xa8>
 80099f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80099f6:	2b15      	cmp	r3, #21
 80099f8:	d8f6      	bhi.n	80099e8 <_printf_i+0x28>
 80099fa:	a101      	add	r1, pc, #4	; (adr r1, 8009a00 <_printf_i+0x40>)
 80099fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009a00:	08009a59 	.word	0x08009a59
 8009a04:	08009a6d 	.word	0x08009a6d
 8009a08:	080099e9 	.word	0x080099e9
 8009a0c:	080099e9 	.word	0x080099e9
 8009a10:	080099e9 	.word	0x080099e9
 8009a14:	080099e9 	.word	0x080099e9
 8009a18:	08009a6d 	.word	0x08009a6d
 8009a1c:	080099e9 	.word	0x080099e9
 8009a20:	080099e9 	.word	0x080099e9
 8009a24:	080099e9 	.word	0x080099e9
 8009a28:	080099e9 	.word	0x080099e9
 8009a2c:	08009b79 	.word	0x08009b79
 8009a30:	08009a9d 	.word	0x08009a9d
 8009a34:	08009b5b 	.word	0x08009b5b
 8009a38:	080099e9 	.word	0x080099e9
 8009a3c:	080099e9 	.word	0x080099e9
 8009a40:	08009b9b 	.word	0x08009b9b
 8009a44:	080099e9 	.word	0x080099e9
 8009a48:	08009a9d 	.word	0x08009a9d
 8009a4c:	080099e9 	.word	0x080099e9
 8009a50:	080099e9 	.word	0x080099e9
 8009a54:	08009b63 	.word	0x08009b63
 8009a58:	682b      	ldr	r3, [r5, #0]
 8009a5a:	1d1a      	adds	r2, r3, #4
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	602a      	str	r2, [r5, #0]
 8009a60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009a68:	2301      	movs	r3, #1
 8009a6a:	e0a3      	b.n	8009bb4 <_printf_i+0x1f4>
 8009a6c:	6820      	ldr	r0, [r4, #0]
 8009a6e:	6829      	ldr	r1, [r5, #0]
 8009a70:	0606      	lsls	r6, r0, #24
 8009a72:	f101 0304 	add.w	r3, r1, #4
 8009a76:	d50a      	bpl.n	8009a8e <_printf_i+0xce>
 8009a78:	680e      	ldr	r6, [r1, #0]
 8009a7a:	602b      	str	r3, [r5, #0]
 8009a7c:	2e00      	cmp	r6, #0
 8009a7e:	da03      	bge.n	8009a88 <_printf_i+0xc8>
 8009a80:	232d      	movs	r3, #45	; 0x2d
 8009a82:	4276      	negs	r6, r6
 8009a84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a88:	485e      	ldr	r0, [pc, #376]	; (8009c04 <_printf_i+0x244>)
 8009a8a:	230a      	movs	r3, #10
 8009a8c:	e019      	b.n	8009ac2 <_printf_i+0x102>
 8009a8e:	680e      	ldr	r6, [r1, #0]
 8009a90:	602b      	str	r3, [r5, #0]
 8009a92:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009a96:	bf18      	it	ne
 8009a98:	b236      	sxthne	r6, r6
 8009a9a:	e7ef      	b.n	8009a7c <_printf_i+0xbc>
 8009a9c:	682b      	ldr	r3, [r5, #0]
 8009a9e:	6820      	ldr	r0, [r4, #0]
 8009aa0:	1d19      	adds	r1, r3, #4
 8009aa2:	6029      	str	r1, [r5, #0]
 8009aa4:	0601      	lsls	r1, r0, #24
 8009aa6:	d501      	bpl.n	8009aac <_printf_i+0xec>
 8009aa8:	681e      	ldr	r6, [r3, #0]
 8009aaa:	e002      	b.n	8009ab2 <_printf_i+0xf2>
 8009aac:	0646      	lsls	r6, r0, #25
 8009aae:	d5fb      	bpl.n	8009aa8 <_printf_i+0xe8>
 8009ab0:	881e      	ldrh	r6, [r3, #0]
 8009ab2:	4854      	ldr	r0, [pc, #336]	; (8009c04 <_printf_i+0x244>)
 8009ab4:	2f6f      	cmp	r7, #111	; 0x6f
 8009ab6:	bf0c      	ite	eq
 8009ab8:	2308      	moveq	r3, #8
 8009aba:	230a      	movne	r3, #10
 8009abc:	2100      	movs	r1, #0
 8009abe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009ac2:	6865      	ldr	r5, [r4, #4]
 8009ac4:	60a5      	str	r5, [r4, #8]
 8009ac6:	2d00      	cmp	r5, #0
 8009ac8:	bfa2      	ittt	ge
 8009aca:	6821      	ldrge	r1, [r4, #0]
 8009acc:	f021 0104 	bicge.w	r1, r1, #4
 8009ad0:	6021      	strge	r1, [r4, #0]
 8009ad2:	b90e      	cbnz	r6, 8009ad8 <_printf_i+0x118>
 8009ad4:	2d00      	cmp	r5, #0
 8009ad6:	d04d      	beq.n	8009b74 <_printf_i+0x1b4>
 8009ad8:	4615      	mov	r5, r2
 8009ada:	fbb6 f1f3 	udiv	r1, r6, r3
 8009ade:	fb03 6711 	mls	r7, r3, r1, r6
 8009ae2:	5dc7      	ldrb	r7, [r0, r7]
 8009ae4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009ae8:	4637      	mov	r7, r6
 8009aea:	42bb      	cmp	r3, r7
 8009aec:	460e      	mov	r6, r1
 8009aee:	d9f4      	bls.n	8009ada <_printf_i+0x11a>
 8009af0:	2b08      	cmp	r3, #8
 8009af2:	d10b      	bne.n	8009b0c <_printf_i+0x14c>
 8009af4:	6823      	ldr	r3, [r4, #0]
 8009af6:	07de      	lsls	r6, r3, #31
 8009af8:	d508      	bpl.n	8009b0c <_printf_i+0x14c>
 8009afa:	6923      	ldr	r3, [r4, #16]
 8009afc:	6861      	ldr	r1, [r4, #4]
 8009afe:	4299      	cmp	r1, r3
 8009b00:	bfde      	ittt	le
 8009b02:	2330      	movle	r3, #48	; 0x30
 8009b04:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009b08:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009b0c:	1b52      	subs	r2, r2, r5
 8009b0e:	6122      	str	r2, [r4, #16]
 8009b10:	f8cd a000 	str.w	sl, [sp]
 8009b14:	464b      	mov	r3, r9
 8009b16:	aa03      	add	r2, sp, #12
 8009b18:	4621      	mov	r1, r4
 8009b1a:	4640      	mov	r0, r8
 8009b1c:	f7ff fee2 	bl	80098e4 <_printf_common>
 8009b20:	3001      	adds	r0, #1
 8009b22:	d14c      	bne.n	8009bbe <_printf_i+0x1fe>
 8009b24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009b28:	b004      	add	sp, #16
 8009b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b2e:	4835      	ldr	r0, [pc, #212]	; (8009c04 <_printf_i+0x244>)
 8009b30:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009b34:	6829      	ldr	r1, [r5, #0]
 8009b36:	6823      	ldr	r3, [r4, #0]
 8009b38:	f851 6b04 	ldr.w	r6, [r1], #4
 8009b3c:	6029      	str	r1, [r5, #0]
 8009b3e:	061d      	lsls	r5, r3, #24
 8009b40:	d514      	bpl.n	8009b6c <_printf_i+0x1ac>
 8009b42:	07df      	lsls	r7, r3, #31
 8009b44:	bf44      	itt	mi
 8009b46:	f043 0320 	orrmi.w	r3, r3, #32
 8009b4a:	6023      	strmi	r3, [r4, #0]
 8009b4c:	b91e      	cbnz	r6, 8009b56 <_printf_i+0x196>
 8009b4e:	6823      	ldr	r3, [r4, #0]
 8009b50:	f023 0320 	bic.w	r3, r3, #32
 8009b54:	6023      	str	r3, [r4, #0]
 8009b56:	2310      	movs	r3, #16
 8009b58:	e7b0      	b.n	8009abc <_printf_i+0xfc>
 8009b5a:	6823      	ldr	r3, [r4, #0]
 8009b5c:	f043 0320 	orr.w	r3, r3, #32
 8009b60:	6023      	str	r3, [r4, #0]
 8009b62:	2378      	movs	r3, #120	; 0x78
 8009b64:	4828      	ldr	r0, [pc, #160]	; (8009c08 <_printf_i+0x248>)
 8009b66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009b6a:	e7e3      	b.n	8009b34 <_printf_i+0x174>
 8009b6c:	0659      	lsls	r1, r3, #25
 8009b6e:	bf48      	it	mi
 8009b70:	b2b6      	uxthmi	r6, r6
 8009b72:	e7e6      	b.n	8009b42 <_printf_i+0x182>
 8009b74:	4615      	mov	r5, r2
 8009b76:	e7bb      	b.n	8009af0 <_printf_i+0x130>
 8009b78:	682b      	ldr	r3, [r5, #0]
 8009b7a:	6826      	ldr	r6, [r4, #0]
 8009b7c:	6961      	ldr	r1, [r4, #20]
 8009b7e:	1d18      	adds	r0, r3, #4
 8009b80:	6028      	str	r0, [r5, #0]
 8009b82:	0635      	lsls	r5, r6, #24
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	d501      	bpl.n	8009b8c <_printf_i+0x1cc>
 8009b88:	6019      	str	r1, [r3, #0]
 8009b8a:	e002      	b.n	8009b92 <_printf_i+0x1d2>
 8009b8c:	0670      	lsls	r0, r6, #25
 8009b8e:	d5fb      	bpl.n	8009b88 <_printf_i+0x1c8>
 8009b90:	8019      	strh	r1, [r3, #0]
 8009b92:	2300      	movs	r3, #0
 8009b94:	6123      	str	r3, [r4, #16]
 8009b96:	4615      	mov	r5, r2
 8009b98:	e7ba      	b.n	8009b10 <_printf_i+0x150>
 8009b9a:	682b      	ldr	r3, [r5, #0]
 8009b9c:	1d1a      	adds	r2, r3, #4
 8009b9e:	602a      	str	r2, [r5, #0]
 8009ba0:	681d      	ldr	r5, [r3, #0]
 8009ba2:	6862      	ldr	r2, [r4, #4]
 8009ba4:	2100      	movs	r1, #0
 8009ba6:	4628      	mov	r0, r5
 8009ba8:	f7f6 fb22 	bl	80001f0 <memchr>
 8009bac:	b108      	cbz	r0, 8009bb2 <_printf_i+0x1f2>
 8009bae:	1b40      	subs	r0, r0, r5
 8009bb0:	6060      	str	r0, [r4, #4]
 8009bb2:	6863      	ldr	r3, [r4, #4]
 8009bb4:	6123      	str	r3, [r4, #16]
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009bbc:	e7a8      	b.n	8009b10 <_printf_i+0x150>
 8009bbe:	6923      	ldr	r3, [r4, #16]
 8009bc0:	462a      	mov	r2, r5
 8009bc2:	4649      	mov	r1, r9
 8009bc4:	4640      	mov	r0, r8
 8009bc6:	47d0      	blx	sl
 8009bc8:	3001      	adds	r0, #1
 8009bca:	d0ab      	beq.n	8009b24 <_printf_i+0x164>
 8009bcc:	6823      	ldr	r3, [r4, #0]
 8009bce:	079b      	lsls	r3, r3, #30
 8009bd0:	d413      	bmi.n	8009bfa <_printf_i+0x23a>
 8009bd2:	68e0      	ldr	r0, [r4, #12]
 8009bd4:	9b03      	ldr	r3, [sp, #12]
 8009bd6:	4298      	cmp	r0, r3
 8009bd8:	bfb8      	it	lt
 8009bda:	4618      	movlt	r0, r3
 8009bdc:	e7a4      	b.n	8009b28 <_printf_i+0x168>
 8009bde:	2301      	movs	r3, #1
 8009be0:	4632      	mov	r2, r6
 8009be2:	4649      	mov	r1, r9
 8009be4:	4640      	mov	r0, r8
 8009be6:	47d0      	blx	sl
 8009be8:	3001      	adds	r0, #1
 8009bea:	d09b      	beq.n	8009b24 <_printf_i+0x164>
 8009bec:	3501      	adds	r5, #1
 8009bee:	68e3      	ldr	r3, [r4, #12]
 8009bf0:	9903      	ldr	r1, [sp, #12]
 8009bf2:	1a5b      	subs	r3, r3, r1
 8009bf4:	42ab      	cmp	r3, r5
 8009bf6:	dcf2      	bgt.n	8009bde <_printf_i+0x21e>
 8009bf8:	e7eb      	b.n	8009bd2 <_printf_i+0x212>
 8009bfa:	2500      	movs	r5, #0
 8009bfc:	f104 0619 	add.w	r6, r4, #25
 8009c00:	e7f5      	b.n	8009bee <_printf_i+0x22e>
 8009c02:	bf00      	nop
 8009c04:	0800d446 	.word	0x0800d446
 8009c08:	0800d457 	.word	0x0800d457

08009c0c <sniprintf>:
 8009c0c:	b40c      	push	{r2, r3}
 8009c0e:	b530      	push	{r4, r5, lr}
 8009c10:	4b17      	ldr	r3, [pc, #92]	; (8009c70 <sniprintf+0x64>)
 8009c12:	1e0c      	subs	r4, r1, #0
 8009c14:	681d      	ldr	r5, [r3, #0]
 8009c16:	b09d      	sub	sp, #116	; 0x74
 8009c18:	da08      	bge.n	8009c2c <sniprintf+0x20>
 8009c1a:	238b      	movs	r3, #139	; 0x8b
 8009c1c:	602b      	str	r3, [r5, #0]
 8009c1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c22:	b01d      	add	sp, #116	; 0x74
 8009c24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009c28:	b002      	add	sp, #8
 8009c2a:	4770      	bx	lr
 8009c2c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009c30:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009c34:	bf14      	ite	ne
 8009c36:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8009c3a:	4623      	moveq	r3, r4
 8009c3c:	9304      	str	r3, [sp, #16]
 8009c3e:	9307      	str	r3, [sp, #28]
 8009c40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009c44:	9002      	str	r0, [sp, #8]
 8009c46:	9006      	str	r0, [sp, #24]
 8009c48:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009c4c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009c4e:	ab21      	add	r3, sp, #132	; 0x84
 8009c50:	a902      	add	r1, sp, #8
 8009c52:	4628      	mov	r0, r5
 8009c54:	9301      	str	r3, [sp, #4]
 8009c56:	f001 fb79 	bl	800b34c <_svfiprintf_r>
 8009c5a:	1c43      	adds	r3, r0, #1
 8009c5c:	bfbc      	itt	lt
 8009c5e:	238b      	movlt	r3, #139	; 0x8b
 8009c60:	602b      	strlt	r3, [r5, #0]
 8009c62:	2c00      	cmp	r4, #0
 8009c64:	d0dd      	beq.n	8009c22 <sniprintf+0x16>
 8009c66:	9b02      	ldr	r3, [sp, #8]
 8009c68:	2200      	movs	r2, #0
 8009c6a:	701a      	strb	r2, [r3, #0]
 8009c6c:	e7d9      	b.n	8009c22 <sniprintf+0x16>
 8009c6e:	bf00      	nop
 8009c70:	200000fc 	.word	0x200000fc

08009c74 <quorem>:
 8009c74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c78:	6903      	ldr	r3, [r0, #16]
 8009c7a:	690c      	ldr	r4, [r1, #16]
 8009c7c:	42a3      	cmp	r3, r4
 8009c7e:	4607      	mov	r7, r0
 8009c80:	f2c0 8081 	blt.w	8009d86 <quorem+0x112>
 8009c84:	3c01      	subs	r4, #1
 8009c86:	f101 0814 	add.w	r8, r1, #20
 8009c8a:	f100 0514 	add.w	r5, r0, #20
 8009c8e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009c92:	9301      	str	r3, [sp, #4]
 8009c94:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009c98:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009c9c:	3301      	adds	r3, #1
 8009c9e:	429a      	cmp	r2, r3
 8009ca0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009ca4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009ca8:	fbb2 f6f3 	udiv	r6, r2, r3
 8009cac:	d331      	bcc.n	8009d12 <quorem+0x9e>
 8009cae:	f04f 0e00 	mov.w	lr, #0
 8009cb2:	4640      	mov	r0, r8
 8009cb4:	46ac      	mov	ip, r5
 8009cb6:	46f2      	mov	sl, lr
 8009cb8:	f850 2b04 	ldr.w	r2, [r0], #4
 8009cbc:	b293      	uxth	r3, r2
 8009cbe:	fb06 e303 	mla	r3, r6, r3, lr
 8009cc2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009cc6:	b29b      	uxth	r3, r3
 8009cc8:	ebaa 0303 	sub.w	r3, sl, r3
 8009ccc:	f8dc a000 	ldr.w	sl, [ip]
 8009cd0:	0c12      	lsrs	r2, r2, #16
 8009cd2:	fa13 f38a 	uxtah	r3, r3, sl
 8009cd6:	fb06 e202 	mla	r2, r6, r2, lr
 8009cda:	9300      	str	r3, [sp, #0]
 8009cdc:	9b00      	ldr	r3, [sp, #0]
 8009cde:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009ce2:	b292      	uxth	r2, r2
 8009ce4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009ce8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009cec:	f8bd 3000 	ldrh.w	r3, [sp]
 8009cf0:	4581      	cmp	r9, r0
 8009cf2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009cf6:	f84c 3b04 	str.w	r3, [ip], #4
 8009cfa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009cfe:	d2db      	bcs.n	8009cb8 <quorem+0x44>
 8009d00:	f855 300b 	ldr.w	r3, [r5, fp]
 8009d04:	b92b      	cbnz	r3, 8009d12 <quorem+0x9e>
 8009d06:	9b01      	ldr	r3, [sp, #4]
 8009d08:	3b04      	subs	r3, #4
 8009d0a:	429d      	cmp	r5, r3
 8009d0c:	461a      	mov	r2, r3
 8009d0e:	d32e      	bcc.n	8009d6e <quorem+0xfa>
 8009d10:	613c      	str	r4, [r7, #16]
 8009d12:	4638      	mov	r0, r7
 8009d14:	f001 f8c6 	bl	800aea4 <__mcmp>
 8009d18:	2800      	cmp	r0, #0
 8009d1a:	db24      	blt.n	8009d66 <quorem+0xf2>
 8009d1c:	3601      	adds	r6, #1
 8009d1e:	4628      	mov	r0, r5
 8009d20:	f04f 0c00 	mov.w	ip, #0
 8009d24:	f858 2b04 	ldr.w	r2, [r8], #4
 8009d28:	f8d0 e000 	ldr.w	lr, [r0]
 8009d2c:	b293      	uxth	r3, r2
 8009d2e:	ebac 0303 	sub.w	r3, ip, r3
 8009d32:	0c12      	lsrs	r2, r2, #16
 8009d34:	fa13 f38e 	uxtah	r3, r3, lr
 8009d38:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009d3c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009d40:	b29b      	uxth	r3, r3
 8009d42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009d46:	45c1      	cmp	r9, r8
 8009d48:	f840 3b04 	str.w	r3, [r0], #4
 8009d4c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009d50:	d2e8      	bcs.n	8009d24 <quorem+0xb0>
 8009d52:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009d56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009d5a:	b922      	cbnz	r2, 8009d66 <quorem+0xf2>
 8009d5c:	3b04      	subs	r3, #4
 8009d5e:	429d      	cmp	r5, r3
 8009d60:	461a      	mov	r2, r3
 8009d62:	d30a      	bcc.n	8009d7a <quorem+0x106>
 8009d64:	613c      	str	r4, [r7, #16]
 8009d66:	4630      	mov	r0, r6
 8009d68:	b003      	add	sp, #12
 8009d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d6e:	6812      	ldr	r2, [r2, #0]
 8009d70:	3b04      	subs	r3, #4
 8009d72:	2a00      	cmp	r2, #0
 8009d74:	d1cc      	bne.n	8009d10 <quorem+0x9c>
 8009d76:	3c01      	subs	r4, #1
 8009d78:	e7c7      	b.n	8009d0a <quorem+0x96>
 8009d7a:	6812      	ldr	r2, [r2, #0]
 8009d7c:	3b04      	subs	r3, #4
 8009d7e:	2a00      	cmp	r2, #0
 8009d80:	d1f0      	bne.n	8009d64 <quorem+0xf0>
 8009d82:	3c01      	subs	r4, #1
 8009d84:	e7eb      	b.n	8009d5e <quorem+0xea>
 8009d86:	2000      	movs	r0, #0
 8009d88:	e7ee      	b.n	8009d68 <quorem+0xf4>
 8009d8a:	0000      	movs	r0, r0
 8009d8c:	0000      	movs	r0, r0
	...

08009d90 <_dtoa_r>:
 8009d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d94:	ed2d 8b04 	vpush	{d8-d9}
 8009d98:	ec57 6b10 	vmov	r6, r7, d0
 8009d9c:	b093      	sub	sp, #76	; 0x4c
 8009d9e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009da0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009da4:	9106      	str	r1, [sp, #24]
 8009da6:	ee10 aa10 	vmov	sl, s0
 8009daa:	4604      	mov	r4, r0
 8009dac:	9209      	str	r2, [sp, #36]	; 0x24
 8009dae:	930c      	str	r3, [sp, #48]	; 0x30
 8009db0:	46bb      	mov	fp, r7
 8009db2:	b975      	cbnz	r5, 8009dd2 <_dtoa_r+0x42>
 8009db4:	2010      	movs	r0, #16
 8009db6:	f000 fddd 	bl	800a974 <malloc>
 8009dba:	4602      	mov	r2, r0
 8009dbc:	6260      	str	r0, [r4, #36]	; 0x24
 8009dbe:	b920      	cbnz	r0, 8009dca <_dtoa_r+0x3a>
 8009dc0:	4ba7      	ldr	r3, [pc, #668]	; (800a060 <_dtoa_r+0x2d0>)
 8009dc2:	21ea      	movs	r1, #234	; 0xea
 8009dc4:	48a7      	ldr	r0, [pc, #668]	; (800a064 <_dtoa_r+0x2d4>)
 8009dc6:	f001 fbd1 	bl	800b56c <__assert_func>
 8009dca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009dce:	6005      	str	r5, [r0, #0]
 8009dd0:	60c5      	str	r5, [r0, #12]
 8009dd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009dd4:	6819      	ldr	r1, [r3, #0]
 8009dd6:	b151      	cbz	r1, 8009dee <_dtoa_r+0x5e>
 8009dd8:	685a      	ldr	r2, [r3, #4]
 8009dda:	604a      	str	r2, [r1, #4]
 8009ddc:	2301      	movs	r3, #1
 8009dde:	4093      	lsls	r3, r2
 8009de0:	608b      	str	r3, [r1, #8]
 8009de2:	4620      	mov	r0, r4
 8009de4:	f000 fe1c 	bl	800aa20 <_Bfree>
 8009de8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009dea:	2200      	movs	r2, #0
 8009dec:	601a      	str	r2, [r3, #0]
 8009dee:	1e3b      	subs	r3, r7, #0
 8009df0:	bfaa      	itet	ge
 8009df2:	2300      	movge	r3, #0
 8009df4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009df8:	f8c8 3000 	strge.w	r3, [r8]
 8009dfc:	4b9a      	ldr	r3, [pc, #616]	; (800a068 <_dtoa_r+0x2d8>)
 8009dfe:	bfbc      	itt	lt
 8009e00:	2201      	movlt	r2, #1
 8009e02:	f8c8 2000 	strlt.w	r2, [r8]
 8009e06:	ea33 030b 	bics.w	r3, r3, fp
 8009e0a:	d11b      	bne.n	8009e44 <_dtoa_r+0xb4>
 8009e0c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009e0e:	f242 730f 	movw	r3, #9999	; 0x270f
 8009e12:	6013      	str	r3, [r2, #0]
 8009e14:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009e18:	4333      	orrs	r3, r6
 8009e1a:	f000 8592 	beq.w	800a942 <_dtoa_r+0xbb2>
 8009e1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009e20:	b963      	cbnz	r3, 8009e3c <_dtoa_r+0xac>
 8009e22:	4b92      	ldr	r3, [pc, #584]	; (800a06c <_dtoa_r+0x2dc>)
 8009e24:	e022      	b.n	8009e6c <_dtoa_r+0xdc>
 8009e26:	4b92      	ldr	r3, [pc, #584]	; (800a070 <_dtoa_r+0x2e0>)
 8009e28:	9301      	str	r3, [sp, #4]
 8009e2a:	3308      	adds	r3, #8
 8009e2c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009e2e:	6013      	str	r3, [r2, #0]
 8009e30:	9801      	ldr	r0, [sp, #4]
 8009e32:	b013      	add	sp, #76	; 0x4c
 8009e34:	ecbd 8b04 	vpop	{d8-d9}
 8009e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e3c:	4b8b      	ldr	r3, [pc, #556]	; (800a06c <_dtoa_r+0x2dc>)
 8009e3e:	9301      	str	r3, [sp, #4]
 8009e40:	3303      	adds	r3, #3
 8009e42:	e7f3      	b.n	8009e2c <_dtoa_r+0x9c>
 8009e44:	2200      	movs	r2, #0
 8009e46:	2300      	movs	r3, #0
 8009e48:	4650      	mov	r0, sl
 8009e4a:	4659      	mov	r1, fp
 8009e4c:	f7f6 fe44 	bl	8000ad8 <__aeabi_dcmpeq>
 8009e50:	ec4b ab19 	vmov	d9, sl, fp
 8009e54:	4680      	mov	r8, r0
 8009e56:	b158      	cbz	r0, 8009e70 <_dtoa_r+0xe0>
 8009e58:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009e5a:	2301      	movs	r3, #1
 8009e5c:	6013      	str	r3, [r2, #0]
 8009e5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	f000 856b 	beq.w	800a93c <_dtoa_r+0xbac>
 8009e66:	4883      	ldr	r0, [pc, #524]	; (800a074 <_dtoa_r+0x2e4>)
 8009e68:	6018      	str	r0, [r3, #0]
 8009e6a:	1e43      	subs	r3, r0, #1
 8009e6c:	9301      	str	r3, [sp, #4]
 8009e6e:	e7df      	b.n	8009e30 <_dtoa_r+0xa0>
 8009e70:	ec4b ab10 	vmov	d0, sl, fp
 8009e74:	aa10      	add	r2, sp, #64	; 0x40
 8009e76:	a911      	add	r1, sp, #68	; 0x44
 8009e78:	4620      	mov	r0, r4
 8009e7a:	f001 f8b9 	bl	800aff0 <__d2b>
 8009e7e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009e82:	ee08 0a10 	vmov	s16, r0
 8009e86:	2d00      	cmp	r5, #0
 8009e88:	f000 8084 	beq.w	8009f94 <_dtoa_r+0x204>
 8009e8c:	ee19 3a90 	vmov	r3, s19
 8009e90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009e94:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009e98:	4656      	mov	r6, sl
 8009e9a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009e9e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009ea2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009ea6:	4b74      	ldr	r3, [pc, #464]	; (800a078 <_dtoa_r+0x2e8>)
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	4630      	mov	r0, r6
 8009eac:	4639      	mov	r1, r7
 8009eae:	f7f6 f9f3 	bl	8000298 <__aeabi_dsub>
 8009eb2:	a365      	add	r3, pc, #404	; (adr r3, 800a048 <_dtoa_r+0x2b8>)
 8009eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eb8:	f7f6 fba6 	bl	8000608 <__aeabi_dmul>
 8009ebc:	a364      	add	r3, pc, #400	; (adr r3, 800a050 <_dtoa_r+0x2c0>)
 8009ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec2:	f7f6 f9eb 	bl	800029c <__adddf3>
 8009ec6:	4606      	mov	r6, r0
 8009ec8:	4628      	mov	r0, r5
 8009eca:	460f      	mov	r7, r1
 8009ecc:	f7f6 fb32 	bl	8000534 <__aeabi_i2d>
 8009ed0:	a361      	add	r3, pc, #388	; (adr r3, 800a058 <_dtoa_r+0x2c8>)
 8009ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ed6:	f7f6 fb97 	bl	8000608 <__aeabi_dmul>
 8009eda:	4602      	mov	r2, r0
 8009edc:	460b      	mov	r3, r1
 8009ede:	4630      	mov	r0, r6
 8009ee0:	4639      	mov	r1, r7
 8009ee2:	f7f6 f9db 	bl	800029c <__adddf3>
 8009ee6:	4606      	mov	r6, r0
 8009ee8:	460f      	mov	r7, r1
 8009eea:	f7f6 fe3d 	bl	8000b68 <__aeabi_d2iz>
 8009eee:	2200      	movs	r2, #0
 8009ef0:	9000      	str	r0, [sp, #0]
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	4630      	mov	r0, r6
 8009ef6:	4639      	mov	r1, r7
 8009ef8:	f7f6 fdf8 	bl	8000aec <__aeabi_dcmplt>
 8009efc:	b150      	cbz	r0, 8009f14 <_dtoa_r+0x184>
 8009efe:	9800      	ldr	r0, [sp, #0]
 8009f00:	f7f6 fb18 	bl	8000534 <__aeabi_i2d>
 8009f04:	4632      	mov	r2, r6
 8009f06:	463b      	mov	r3, r7
 8009f08:	f7f6 fde6 	bl	8000ad8 <__aeabi_dcmpeq>
 8009f0c:	b910      	cbnz	r0, 8009f14 <_dtoa_r+0x184>
 8009f0e:	9b00      	ldr	r3, [sp, #0]
 8009f10:	3b01      	subs	r3, #1
 8009f12:	9300      	str	r3, [sp, #0]
 8009f14:	9b00      	ldr	r3, [sp, #0]
 8009f16:	2b16      	cmp	r3, #22
 8009f18:	d85a      	bhi.n	8009fd0 <_dtoa_r+0x240>
 8009f1a:	9a00      	ldr	r2, [sp, #0]
 8009f1c:	4b57      	ldr	r3, [pc, #348]	; (800a07c <_dtoa_r+0x2ec>)
 8009f1e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f26:	ec51 0b19 	vmov	r0, r1, d9
 8009f2a:	f7f6 fddf 	bl	8000aec <__aeabi_dcmplt>
 8009f2e:	2800      	cmp	r0, #0
 8009f30:	d050      	beq.n	8009fd4 <_dtoa_r+0x244>
 8009f32:	9b00      	ldr	r3, [sp, #0]
 8009f34:	3b01      	subs	r3, #1
 8009f36:	9300      	str	r3, [sp, #0]
 8009f38:	2300      	movs	r3, #0
 8009f3a:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009f3e:	1b5d      	subs	r5, r3, r5
 8009f40:	1e6b      	subs	r3, r5, #1
 8009f42:	9305      	str	r3, [sp, #20]
 8009f44:	bf45      	ittet	mi
 8009f46:	f1c5 0301 	rsbmi	r3, r5, #1
 8009f4a:	9304      	strmi	r3, [sp, #16]
 8009f4c:	2300      	movpl	r3, #0
 8009f4e:	2300      	movmi	r3, #0
 8009f50:	bf4c      	ite	mi
 8009f52:	9305      	strmi	r3, [sp, #20]
 8009f54:	9304      	strpl	r3, [sp, #16]
 8009f56:	9b00      	ldr	r3, [sp, #0]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	db3d      	blt.n	8009fd8 <_dtoa_r+0x248>
 8009f5c:	9b05      	ldr	r3, [sp, #20]
 8009f5e:	9a00      	ldr	r2, [sp, #0]
 8009f60:	920a      	str	r2, [sp, #40]	; 0x28
 8009f62:	4413      	add	r3, r2
 8009f64:	9305      	str	r3, [sp, #20]
 8009f66:	2300      	movs	r3, #0
 8009f68:	9307      	str	r3, [sp, #28]
 8009f6a:	9b06      	ldr	r3, [sp, #24]
 8009f6c:	2b09      	cmp	r3, #9
 8009f6e:	f200 8089 	bhi.w	800a084 <_dtoa_r+0x2f4>
 8009f72:	2b05      	cmp	r3, #5
 8009f74:	bfc4      	itt	gt
 8009f76:	3b04      	subgt	r3, #4
 8009f78:	9306      	strgt	r3, [sp, #24]
 8009f7a:	9b06      	ldr	r3, [sp, #24]
 8009f7c:	f1a3 0302 	sub.w	r3, r3, #2
 8009f80:	bfcc      	ite	gt
 8009f82:	2500      	movgt	r5, #0
 8009f84:	2501      	movle	r5, #1
 8009f86:	2b03      	cmp	r3, #3
 8009f88:	f200 8087 	bhi.w	800a09a <_dtoa_r+0x30a>
 8009f8c:	e8df f003 	tbb	[pc, r3]
 8009f90:	59383a2d 	.word	0x59383a2d
 8009f94:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009f98:	441d      	add	r5, r3
 8009f9a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009f9e:	2b20      	cmp	r3, #32
 8009fa0:	bfc1      	itttt	gt
 8009fa2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009fa6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009faa:	fa0b f303 	lslgt.w	r3, fp, r3
 8009fae:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009fb2:	bfda      	itte	le
 8009fb4:	f1c3 0320 	rsble	r3, r3, #32
 8009fb8:	fa06 f003 	lslle.w	r0, r6, r3
 8009fbc:	4318      	orrgt	r0, r3
 8009fbe:	f7f6 faa9 	bl	8000514 <__aeabi_ui2d>
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	4606      	mov	r6, r0
 8009fc6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009fca:	3d01      	subs	r5, #1
 8009fcc:	930e      	str	r3, [sp, #56]	; 0x38
 8009fce:	e76a      	b.n	8009ea6 <_dtoa_r+0x116>
 8009fd0:	2301      	movs	r3, #1
 8009fd2:	e7b2      	b.n	8009f3a <_dtoa_r+0x1aa>
 8009fd4:	900b      	str	r0, [sp, #44]	; 0x2c
 8009fd6:	e7b1      	b.n	8009f3c <_dtoa_r+0x1ac>
 8009fd8:	9b04      	ldr	r3, [sp, #16]
 8009fda:	9a00      	ldr	r2, [sp, #0]
 8009fdc:	1a9b      	subs	r3, r3, r2
 8009fde:	9304      	str	r3, [sp, #16]
 8009fe0:	4253      	negs	r3, r2
 8009fe2:	9307      	str	r3, [sp, #28]
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	930a      	str	r3, [sp, #40]	; 0x28
 8009fe8:	e7bf      	b.n	8009f6a <_dtoa_r+0x1da>
 8009fea:	2300      	movs	r3, #0
 8009fec:	9308      	str	r3, [sp, #32]
 8009fee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	dc55      	bgt.n	800a0a0 <_dtoa_r+0x310>
 8009ff4:	2301      	movs	r3, #1
 8009ff6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009ffa:	461a      	mov	r2, r3
 8009ffc:	9209      	str	r2, [sp, #36]	; 0x24
 8009ffe:	e00c      	b.n	800a01a <_dtoa_r+0x28a>
 800a000:	2301      	movs	r3, #1
 800a002:	e7f3      	b.n	8009fec <_dtoa_r+0x25c>
 800a004:	2300      	movs	r3, #0
 800a006:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a008:	9308      	str	r3, [sp, #32]
 800a00a:	9b00      	ldr	r3, [sp, #0]
 800a00c:	4413      	add	r3, r2
 800a00e:	9302      	str	r3, [sp, #8]
 800a010:	3301      	adds	r3, #1
 800a012:	2b01      	cmp	r3, #1
 800a014:	9303      	str	r3, [sp, #12]
 800a016:	bfb8      	it	lt
 800a018:	2301      	movlt	r3, #1
 800a01a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a01c:	2200      	movs	r2, #0
 800a01e:	6042      	str	r2, [r0, #4]
 800a020:	2204      	movs	r2, #4
 800a022:	f102 0614 	add.w	r6, r2, #20
 800a026:	429e      	cmp	r6, r3
 800a028:	6841      	ldr	r1, [r0, #4]
 800a02a:	d93d      	bls.n	800a0a8 <_dtoa_r+0x318>
 800a02c:	4620      	mov	r0, r4
 800a02e:	f000 fcb7 	bl	800a9a0 <_Balloc>
 800a032:	9001      	str	r0, [sp, #4]
 800a034:	2800      	cmp	r0, #0
 800a036:	d13b      	bne.n	800a0b0 <_dtoa_r+0x320>
 800a038:	4b11      	ldr	r3, [pc, #68]	; (800a080 <_dtoa_r+0x2f0>)
 800a03a:	4602      	mov	r2, r0
 800a03c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a040:	e6c0      	b.n	8009dc4 <_dtoa_r+0x34>
 800a042:	2301      	movs	r3, #1
 800a044:	e7df      	b.n	800a006 <_dtoa_r+0x276>
 800a046:	bf00      	nop
 800a048:	636f4361 	.word	0x636f4361
 800a04c:	3fd287a7 	.word	0x3fd287a7
 800a050:	8b60c8b3 	.word	0x8b60c8b3
 800a054:	3fc68a28 	.word	0x3fc68a28
 800a058:	509f79fb 	.word	0x509f79fb
 800a05c:	3fd34413 	.word	0x3fd34413
 800a060:	0800d475 	.word	0x0800d475
 800a064:	0800d48c 	.word	0x0800d48c
 800a068:	7ff00000 	.word	0x7ff00000
 800a06c:	0800d471 	.word	0x0800d471
 800a070:	0800d468 	.word	0x0800d468
 800a074:	0800d445 	.word	0x0800d445
 800a078:	3ff80000 	.word	0x3ff80000
 800a07c:	0800d580 	.word	0x0800d580
 800a080:	0800d4e7 	.word	0x0800d4e7
 800a084:	2501      	movs	r5, #1
 800a086:	2300      	movs	r3, #0
 800a088:	9306      	str	r3, [sp, #24]
 800a08a:	9508      	str	r5, [sp, #32]
 800a08c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a090:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a094:	2200      	movs	r2, #0
 800a096:	2312      	movs	r3, #18
 800a098:	e7b0      	b.n	8009ffc <_dtoa_r+0x26c>
 800a09a:	2301      	movs	r3, #1
 800a09c:	9308      	str	r3, [sp, #32]
 800a09e:	e7f5      	b.n	800a08c <_dtoa_r+0x2fc>
 800a0a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0a2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a0a6:	e7b8      	b.n	800a01a <_dtoa_r+0x28a>
 800a0a8:	3101      	adds	r1, #1
 800a0aa:	6041      	str	r1, [r0, #4]
 800a0ac:	0052      	lsls	r2, r2, #1
 800a0ae:	e7b8      	b.n	800a022 <_dtoa_r+0x292>
 800a0b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a0b2:	9a01      	ldr	r2, [sp, #4]
 800a0b4:	601a      	str	r2, [r3, #0]
 800a0b6:	9b03      	ldr	r3, [sp, #12]
 800a0b8:	2b0e      	cmp	r3, #14
 800a0ba:	f200 809d 	bhi.w	800a1f8 <_dtoa_r+0x468>
 800a0be:	2d00      	cmp	r5, #0
 800a0c0:	f000 809a 	beq.w	800a1f8 <_dtoa_r+0x468>
 800a0c4:	9b00      	ldr	r3, [sp, #0]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	dd32      	ble.n	800a130 <_dtoa_r+0x3a0>
 800a0ca:	4ab7      	ldr	r2, [pc, #732]	; (800a3a8 <_dtoa_r+0x618>)
 800a0cc:	f003 030f 	and.w	r3, r3, #15
 800a0d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a0d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a0d8:	9b00      	ldr	r3, [sp, #0]
 800a0da:	05d8      	lsls	r0, r3, #23
 800a0dc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a0e0:	d516      	bpl.n	800a110 <_dtoa_r+0x380>
 800a0e2:	4bb2      	ldr	r3, [pc, #712]	; (800a3ac <_dtoa_r+0x61c>)
 800a0e4:	ec51 0b19 	vmov	r0, r1, d9
 800a0e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a0ec:	f7f6 fbb6 	bl	800085c <__aeabi_ddiv>
 800a0f0:	f007 070f 	and.w	r7, r7, #15
 800a0f4:	4682      	mov	sl, r0
 800a0f6:	468b      	mov	fp, r1
 800a0f8:	2503      	movs	r5, #3
 800a0fa:	4eac      	ldr	r6, [pc, #688]	; (800a3ac <_dtoa_r+0x61c>)
 800a0fc:	b957      	cbnz	r7, 800a114 <_dtoa_r+0x384>
 800a0fe:	4642      	mov	r2, r8
 800a100:	464b      	mov	r3, r9
 800a102:	4650      	mov	r0, sl
 800a104:	4659      	mov	r1, fp
 800a106:	f7f6 fba9 	bl	800085c <__aeabi_ddiv>
 800a10a:	4682      	mov	sl, r0
 800a10c:	468b      	mov	fp, r1
 800a10e:	e028      	b.n	800a162 <_dtoa_r+0x3d2>
 800a110:	2502      	movs	r5, #2
 800a112:	e7f2      	b.n	800a0fa <_dtoa_r+0x36a>
 800a114:	07f9      	lsls	r1, r7, #31
 800a116:	d508      	bpl.n	800a12a <_dtoa_r+0x39a>
 800a118:	4640      	mov	r0, r8
 800a11a:	4649      	mov	r1, r9
 800a11c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a120:	f7f6 fa72 	bl	8000608 <__aeabi_dmul>
 800a124:	3501      	adds	r5, #1
 800a126:	4680      	mov	r8, r0
 800a128:	4689      	mov	r9, r1
 800a12a:	107f      	asrs	r7, r7, #1
 800a12c:	3608      	adds	r6, #8
 800a12e:	e7e5      	b.n	800a0fc <_dtoa_r+0x36c>
 800a130:	f000 809b 	beq.w	800a26a <_dtoa_r+0x4da>
 800a134:	9b00      	ldr	r3, [sp, #0]
 800a136:	4f9d      	ldr	r7, [pc, #628]	; (800a3ac <_dtoa_r+0x61c>)
 800a138:	425e      	negs	r6, r3
 800a13a:	4b9b      	ldr	r3, [pc, #620]	; (800a3a8 <_dtoa_r+0x618>)
 800a13c:	f006 020f 	and.w	r2, r6, #15
 800a140:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a144:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a148:	ec51 0b19 	vmov	r0, r1, d9
 800a14c:	f7f6 fa5c 	bl	8000608 <__aeabi_dmul>
 800a150:	1136      	asrs	r6, r6, #4
 800a152:	4682      	mov	sl, r0
 800a154:	468b      	mov	fp, r1
 800a156:	2300      	movs	r3, #0
 800a158:	2502      	movs	r5, #2
 800a15a:	2e00      	cmp	r6, #0
 800a15c:	d17a      	bne.n	800a254 <_dtoa_r+0x4c4>
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d1d3      	bne.n	800a10a <_dtoa_r+0x37a>
 800a162:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a164:	2b00      	cmp	r3, #0
 800a166:	f000 8082 	beq.w	800a26e <_dtoa_r+0x4de>
 800a16a:	4b91      	ldr	r3, [pc, #580]	; (800a3b0 <_dtoa_r+0x620>)
 800a16c:	2200      	movs	r2, #0
 800a16e:	4650      	mov	r0, sl
 800a170:	4659      	mov	r1, fp
 800a172:	f7f6 fcbb 	bl	8000aec <__aeabi_dcmplt>
 800a176:	2800      	cmp	r0, #0
 800a178:	d079      	beq.n	800a26e <_dtoa_r+0x4de>
 800a17a:	9b03      	ldr	r3, [sp, #12]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d076      	beq.n	800a26e <_dtoa_r+0x4de>
 800a180:	9b02      	ldr	r3, [sp, #8]
 800a182:	2b00      	cmp	r3, #0
 800a184:	dd36      	ble.n	800a1f4 <_dtoa_r+0x464>
 800a186:	9b00      	ldr	r3, [sp, #0]
 800a188:	4650      	mov	r0, sl
 800a18a:	4659      	mov	r1, fp
 800a18c:	1e5f      	subs	r7, r3, #1
 800a18e:	2200      	movs	r2, #0
 800a190:	4b88      	ldr	r3, [pc, #544]	; (800a3b4 <_dtoa_r+0x624>)
 800a192:	f7f6 fa39 	bl	8000608 <__aeabi_dmul>
 800a196:	9e02      	ldr	r6, [sp, #8]
 800a198:	4682      	mov	sl, r0
 800a19a:	468b      	mov	fp, r1
 800a19c:	3501      	adds	r5, #1
 800a19e:	4628      	mov	r0, r5
 800a1a0:	f7f6 f9c8 	bl	8000534 <__aeabi_i2d>
 800a1a4:	4652      	mov	r2, sl
 800a1a6:	465b      	mov	r3, fp
 800a1a8:	f7f6 fa2e 	bl	8000608 <__aeabi_dmul>
 800a1ac:	4b82      	ldr	r3, [pc, #520]	; (800a3b8 <_dtoa_r+0x628>)
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	f7f6 f874 	bl	800029c <__adddf3>
 800a1b4:	46d0      	mov	r8, sl
 800a1b6:	46d9      	mov	r9, fp
 800a1b8:	4682      	mov	sl, r0
 800a1ba:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a1be:	2e00      	cmp	r6, #0
 800a1c0:	d158      	bne.n	800a274 <_dtoa_r+0x4e4>
 800a1c2:	4b7e      	ldr	r3, [pc, #504]	; (800a3bc <_dtoa_r+0x62c>)
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	4640      	mov	r0, r8
 800a1c8:	4649      	mov	r1, r9
 800a1ca:	f7f6 f865 	bl	8000298 <__aeabi_dsub>
 800a1ce:	4652      	mov	r2, sl
 800a1d0:	465b      	mov	r3, fp
 800a1d2:	4680      	mov	r8, r0
 800a1d4:	4689      	mov	r9, r1
 800a1d6:	f7f6 fca7 	bl	8000b28 <__aeabi_dcmpgt>
 800a1da:	2800      	cmp	r0, #0
 800a1dc:	f040 8295 	bne.w	800a70a <_dtoa_r+0x97a>
 800a1e0:	4652      	mov	r2, sl
 800a1e2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a1e6:	4640      	mov	r0, r8
 800a1e8:	4649      	mov	r1, r9
 800a1ea:	f7f6 fc7f 	bl	8000aec <__aeabi_dcmplt>
 800a1ee:	2800      	cmp	r0, #0
 800a1f0:	f040 8289 	bne.w	800a706 <_dtoa_r+0x976>
 800a1f4:	ec5b ab19 	vmov	sl, fp, d9
 800a1f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	f2c0 8148 	blt.w	800a490 <_dtoa_r+0x700>
 800a200:	9a00      	ldr	r2, [sp, #0]
 800a202:	2a0e      	cmp	r2, #14
 800a204:	f300 8144 	bgt.w	800a490 <_dtoa_r+0x700>
 800a208:	4b67      	ldr	r3, [pc, #412]	; (800a3a8 <_dtoa_r+0x618>)
 800a20a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a20e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a212:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a214:	2b00      	cmp	r3, #0
 800a216:	f280 80d5 	bge.w	800a3c4 <_dtoa_r+0x634>
 800a21a:	9b03      	ldr	r3, [sp, #12]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	f300 80d1 	bgt.w	800a3c4 <_dtoa_r+0x634>
 800a222:	f040 826f 	bne.w	800a704 <_dtoa_r+0x974>
 800a226:	4b65      	ldr	r3, [pc, #404]	; (800a3bc <_dtoa_r+0x62c>)
 800a228:	2200      	movs	r2, #0
 800a22a:	4640      	mov	r0, r8
 800a22c:	4649      	mov	r1, r9
 800a22e:	f7f6 f9eb 	bl	8000608 <__aeabi_dmul>
 800a232:	4652      	mov	r2, sl
 800a234:	465b      	mov	r3, fp
 800a236:	f7f6 fc6d 	bl	8000b14 <__aeabi_dcmpge>
 800a23a:	9e03      	ldr	r6, [sp, #12]
 800a23c:	4637      	mov	r7, r6
 800a23e:	2800      	cmp	r0, #0
 800a240:	f040 8245 	bne.w	800a6ce <_dtoa_r+0x93e>
 800a244:	9d01      	ldr	r5, [sp, #4]
 800a246:	2331      	movs	r3, #49	; 0x31
 800a248:	f805 3b01 	strb.w	r3, [r5], #1
 800a24c:	9b00      	ldr	r3, [sp, #0]
 800a24e:	3301      	adds	r3, #1
 800a250:	9300      	str	r3, [sp, #0]
 800a252:	e240      	b.n	800a6d6 <_dtoa_r+0x946>
 800a254:	07f2      	lsls	r2, r6, #31
 800a256:	d505      	bpl.n	800a264 <_dtoa_r+0x4d4>
 800a258:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a25c:	f7f6 f9d4 	bl	8000608 <__aeabi_dmul>
 800a260:	3501      	adds	r5, #1
 800a262:	2301      	movs	r3, #1
 800a264:	1076      	asrs	r6, r6, #1
 800a266:	3708      	adds	r7, #8
 800a268:	e777      	b.n	800a15a <_dtoa_r+0x3ca>
 800a26a:	2502      	movs	r5, #2
 800a26c:	e779      	b.n	800a162 <_dtoa_r+0x3d2>
 800a26e:	9f00      	ldr	r7, [sp, #0]
 800a270:	9e03      	ldr	r6, [sp, #12]
 800a272:	e794      	b.n	800a19e <_dtoa_r+0x40e>
 800a274:	9901      	ldr	r1, [sp, #4]
 800a276:	4b4c      	ldr	r3, [pc, #304]	; (800a3a8 <_dtoa_r+0x618>)
 800a278:	4431      	add	r1, r6
 800a27a:	910d      	str	r1, [sp, #52]	; 0x34
 800a27c:	9908      	ldr	r1, [sp, #32]
 800a27e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a282:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a286:	2900      	cmp	r1, #0
 800a288:	d043      	beq.n	800a312 <_dtoa_r+0x582>
 800a28a:	494d      	ldr	r1, [pc, #308]	; (800a3c0 <_dtoa_r+0x630>)
 800a28c:	2000      	movs	r0, #0
 800a28e:	f7f6 fae5 	bl	800085c <__aeabi_ddiv>
 800a292:	4652      	mov	r2, sl
 800a294:	465b      	mov	r3, fp
 800a296:	f7f5 ffff 	bl	8000298 <__aeabi_dsub>
 800a29a:	9d01      	ldr	r5, [sp, #4]
 800a29c:	4682      	mov	sl, r0
 800a29e:	468b      	mov	fp, r1
 800a2a0:	4649      	mov	r1, r9
 800a2a2:	4640      	mov	r0, r8
 800a2a4:	f7f6 fc60 	bl	8000b68 <__aeabi_d2iz>
 800a2a8:	4606      	mov	r6, r0
 800a2aa:	f7f6 f943 	bl	8000534 <__aeabi_i2d>
 800a2ae:	4602      	mov	r2, r0
 800a2b0:	460b      	mov	r3, r1
 800a2b2:	4640      	mov	r0, r8
 800a2b4:	4649      	mov	r1, r9
 800a2b6:	f7f5 ffef 	bl	8000298 <__aeabi_dsub>
 800a2ba:	3630      	adds	r6, #48	; 0x30
 800a2bc:	f805 6b01 	strb.w	r6, [r5], #1
 800a2c0:	4652      	mov	r2, sl
 800a2c2:	465b      	mov	r3, fp
 800a2c4:	4680      	mov	r8, r0
 800a2c6:	4689      	mov	r9, r1
 800a2c8:	f7f6 fc10 	bl	8000aec <__aeabi_dcmplt>
 800a2cc:	2800      	cmp	r0, #0
 800a2ce:	d163      	bne.n	800a398 <_dtoa_r+0x608>
 800a2d0:	4642      	mov	r2, r8
 800a2d2:	464b      	mov	r3, r9
 800a2d4:	4936      	ldr	r1, [pc, #216]	; (800a3b0 <_dtoa_r+0x620>)
 800a2d6:	2000      	movs	r0, #0
 800a2d8:	f7f5 ffde 	bl	8000298 <__aeabi_dsub>
 800a2dc:	4652      	mov	r2, sl
 800a2de:	465b      	mov	r3, fp
 800a2e0:	f7f6 fc04 	bl	8000aec <__aeabi_dcmplt>
 800a2e4:	2800      	cmp	r0, #0
 800a2e6:	f040 80b5 	bne.w	800a454 <_dtoa_r+0x6c4>
 800a2ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a2ec:	429d      	cmp	r5, r3
 800a2ee:	d081      	beq.n	800a1f4 <_dtoa_r+0x464>
 800a2f0:	4b30      	ldr	r3, [pc, #192]	; (800a3b4 <_dtoa_r+0x624>)
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	4650      	mov	r0, sl
 800a2f6:	4659      	mov	r1, fp
 800a2f8:	f7f6 f986 	bl	8000608 <__aeabi_dmul>
 800a2fc:	4b2d      	ldr	r3, [pc, #180]	; (800a3b4 <_dtoa_r+0x624>)
 800a2fe:	4682      	mov	sl, r0
 800a300:	468b      	mov	fp, r1
 800a302:	4640      	mov	r0, r8
 800a304:	4649      	mov	r1, r9
 800a306:	2200      	movs	r2, #0
 800a308:	f7f6 f97e 	bl	8000608 <__aeabi_dmul>
 800a30c:	4680      	mov	r8, r0
 800a30e:	4689      	mov	r9, r1
 800a310:	e7c6      	b.n	800a2a0 <_dtoa_r+0x510>
 800a312:	4650      	mov	r0, sl
 800a314:	4659      	mov	r1, fp
 800a316:	f7f6 f977 	bl	8000608 <__aeabi_dmul>
 800a31a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a31c:	9d01      	ldr	r5, [sp, #4]
 800a31e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a320:	4682      	mov	sl, r0
 800a322:	468b      	mov	fp, r1
 800a324:	4649      	mov	r1, r9
 800a326:	4640      	mov	r0, r8
 800a328:	f7f6 fc1e 	bl	8000b68 <__aeabi_d2iz>
 800a32c:	4606      	mov	r6, r0
 800a32e:	f7f6 f901 	bl	8000534 <__aeabi_i2d>
 800a332:	3630      	adds	r6, #48	; 0x30
 800a334:	4602      	mov	r2, r0
 800a336:	460b      	mov	r3, r1
 800a338:	4640      	mov	r0, r8
 800a33a:	4649      	mov	r1, r9
 800a33c:	f7f5 ffac 	bl	8000298 <__aeabi_dsub>
 800a340:	f805 6b01 	strb.w	r6, [r5], #1
 800a344:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a346:	429d      	cmp	r5, r3
 800a348:	4680      	mov	r8, r0
 800a34a:	4689      	mov	r9, r1
 800a34c:	f04f 0200 	mov.w	r2, #0
 800a350:	d124      	bne.n	800a39c <_dtoa_r+0x60c>
 800a352:	4b1b      	ldr	r3, [pc, #108]	; (800a3c0 <_dtoa_r+0x630>)
 800a354:	4650      	mov	r0, sl
 800a356:	4659      	mov	r1, fp
 800a358:	f7f5 ffa0 	bl	800029c <__adddf3>
 800a35c:	4602      	mov	r2, r0
 800a35e:	460b      	mov	r3, r1
 800a360:	4640      	mov	r0, r8
 800a362:	4649      	mov	r1, r9
 800a364:	f7f6 fbe0 	bl	8000b28 <__aeabi_dcmpgt>
 800a368:	2800      	cmp	r0, #0
 800a36a:	d173      	bne.n	800a454 <_dtoa_r+0x6c4>
 800a36c:	4652      	mov	r2, sl
 800a36e:	465b      	mov	r3, fp
 800a370:	4913      	ldr	r1, [pc, #76]	; (800a3c0 <_dtoa_r+0x630>)
 800a372:	2000      	movs	r0, #0
 800a374:	f7f5 ff90 	bl	8000298 <__aeabi_dsub>
 800a378:	4602      	mov	r2, r0
 800a37a:	460b      	mov	r3, r1
 800a37c:	4640      	mov	r0, r8
 800a37e:	4649      	mov	r1, r9
 800a380:	f7f6 fbb4 	bl	8000aec <__aeabi_dcmplt>
 800a384:	2800      	cmp	r0, #0
 800a386:	f43f af35 	beq.w	800a1f4 <_dtoa_r+0x464>
 800a38a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a38c:	1e6b      	subs	r3, r5, #1
 800a38e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a390:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a394:	2b30      	cmp	r3, #48	; 0x30
 800a396:	d0f8      	beq.n	800a38a <_dtoa_r+0x5fa>
 800a398:	9700      	str	r7, [sp, #0]
 800a39a:	e049      	b.n	800a430 <_dtoa_r+0x6a0>
 800a39c:	4b05      	ldr	r3, [pc, #20]	; (800a3b4 <_dtoa_r+0x624>)
 800a39e:	f7f6 f933 	bl	8000608 <__aeabi_dmul>
 800a3a2:	4680      	mov	r8, r0
 800a3a4:	4689      	mov	r9, r1
 800a3a6:	e7bd      	b.n	800a324 <_dtoa_r+0x594>
 800a3a8:	0800d580 	.word	0x0800d580
 800a3ac:	0800d558 	.word	0x0800d558
 800a3b0:	3ff00000 	.word	0x3ff00000
 800a3b4:	40240000 	.word	0x40240000
 800a3b8:	401c0000 	.word	0x401c0000
 800a3bc:	40140000 	.word	0x40140000
 800a3c0:	3fe00000 	.word	0x3fe00000
 800a3c4:	9d01      	ldr	r5, [sp, #4]
 800a3c6:	4656      	mov	r6, sl
 800a3c8:	465f      	mov	r7, fp
 800a3ca:	4642      	mov	r2, r8
 800a3cc:	464b      	mov	r3, r9
 800a3ce:	4630      	mov	r0, r6
 800a3d0:	4639      	mov	r1, r7
 800a3d2:	f7f6 fa43 	bl	800085c <__aeabi_ddiv>
 800a3d6:	f7f6 fbc7 	bl	8000b68 <__aeabi_d2iz>
 800a3da:	4682      	mov	sl, r0
 800a3dc:	f7f6 f8aa 	bl	8000534 <__aeabi_i2d>
 800a3e0:	4642      	mov	r2, r8
 800a3e2:	464b      	mov	r3, r9
 800a3e4:	f7f6 f910 	bl	8000608 <__aeabi_dmul>
 800a3e8:	4602      	mov	r2, r0
 800a3ea:	460b      	mov	r3, r1
 800a3ec:	4630      	mov	r0, r6
 800a3ee:	4639      	mov	r1, r7
 800a3f0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a3f4:	f7f5 ff50 	bl	8000298 <__aeabi_dsub>
 800a3f8:	f805 6b01 	strb.w	r6, [r5], #1
 800a3fc:	9e01      	ldr	r6, [sp, #4]
 800a3fe:	9f03      	ldr	r7, [sp, #12]
 800a400:	1bae      	subs	r6, r5, r6
 800a402:	42b7      	cmp	r7, r6
 800a404:	4602      	mov	r2, r0
 800a406:	460b      	mov	r3, r1
 800a408:	d135      	bne.n	800a476 <_dtoa_r+0x6e6>
 800a40a:	f7f5 ff47 	bl	800029c <__adddf3>
 800a40e:	4642      	mov	r2, r8
 800a410:	464b      	mov	r3, r9
 800a412:	4606      	mov	r6, r0
 800a414:	460f      	mov	r7, r1
 800a416:	f7f6 fb87 	bl	8000b28 <__aeabi_dcmpgt>
 800a41a:	b9d0      	cbnz	r0, 800a452 <_dtoa_r+0x6c2>
 800a41c:	4642      	mov	r2, r8
 800a41e:	464b      	mov	r3, r9
 800a420:	4630      	mov	r0, r6
 800a422:	4639      	mov	r1, r7
 800a424:	f7f6 fb58 	bl	8000ad8 <__aeabi_dcmpeq>
 800a428:	b110      	cbz	r0, 800a430 <_dtoa_r+0x6a0>
 800a42a:	f01a 0f01 	tst.w	sl, #1
 800a42e:	d110      	bne.n	800a452 <_dtoa_r+0x6c2>
 800a430:	4620      	mov	r0, r4
 800a432:	ee18 1a10 	vmov	r1, s16
 800a436:	f000 faf3 	bl	800aa20 <_Bfree>
 800a43a:	2300      	movs	r3, #0
 800a43c:	9800      	ldr	r0, [sp, #0]
 800a43e:	702b      	strb	r3, [r5, #0]
 800a440:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a442:	3001      	adds	r0, #1
 800a444:	6018      	str	r0, [r3, #0]
 800a446:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a448:	2b00      	cmp	r3, #0
 800a44a:	f43f acf1 	beq.w	8009e30 <_dtoa_r+0xa0>
 800a44e:	601d      	str	r5, [r3, #0]
 800a450:	e4ee      	b.n	8009e30 <_dtoa_r+0xa0>
 800a452:	9f00      	ldr	r7, [sp, #0]
 800a454:	462b      	mov	r3, r5
 800a456:	461d      	mov	r5, r3
 800a458:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a45c:	2a39      	cmp	r2, #57	; 0x39
 800a45e:	d106      	bne.n	800a46e <_dtoa_r+0x6de>
 800a460:	9a01      	ldr	r2, [sp, #4]
 800a462:	429a      	cmp	r2, r3
 800a464:	d1f7      	bne.n	800a456 <_dtoa_r+0x6c6>
 800a466:	9901      	ldr	r1, [sp, #4]
 800a468:	2230      	movs	r2, #48	; 0x30
 800a46a:	3701      	adds	r7, #1
 800a46c:	700a      	strb	r2, [r1, #0]
 800a46e:	781a      	ldrb	r2, [r3, #0]
 800a470:	3201      	adds	r2, #1
 800a472:	701a      	strb	r2, [r3, #0]
 800a474:	e790      	b.n	800a398 <_dtoa_r+0x608>
 800a476:	4ba6      	ldr	r3, [pc, #664]	; (800a710 <_dtoa_r+0x980>)
 800a478:	2200      	movs	r2, #0
 800a47a:	f7f6 f8c5 	bl	8000608 <__aeabi_dmul>
 800a47e:	2200      	movs	r2, #0
 800a480:	2300      	movs	r3, #0
 800a482:	4606      	mov	r6, r0
 800a484:	460f      	mov	r7, r1
 800a486:	f7f6 fb27 	bl	8000ad8 <__aeabi_dcmpeq>
 800a48a:	2800      	cmp	r0, #0
 800a48c:	d09d      	beq.n	800a3ca <_dtoa_r+0x63a>
 800a48e:	e7cf      	b.n	800a430 <_dtoa_r+0x6a0>
 800a490:	9a08      	ldr	r2, [sp, #32]
 800a492:	2a00      	cmp	r2, #0
 800a494:	f000 80d7 	beq.w	800a646 <_dtoa_r+0x8b6>
 800a498:	9a06      	ldr	r2, [sp, #24]
 800a49a:	2a01      	cmp	r2, #1
 800a49c:	f300 80ba 	bgt.w	800a614 <_dtoa_r+0x884>
 800a4a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a4a2:	2a00      	cmp	r2, #0
 800a4a4:	f000 80b2 	beq.w	800a60c <_dtoa_r+0x87c>
 800a4a8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a4ac:	9e07      	ldr	r6, [sp, #28]
 800a4ae:	9d04      	ldr	r5, [sp, #16]
 800a4b0:	9a04      	ldr	r2, [sp, #16]
 800a4b2:	441a      	add	r2, r3
 800a4b4:	9204      	str	r2, [sp, #16]
 800a4b6:	9a05      	ldr	r2, [sp, #20]
 800a4b8:	2101      	movs	r1, #1
 800a4ba:	441a      	add	r2, r3
 800a4bc:	4620      	mov	r0, r4
 800a4be:	9205      	str	r2, [sp, #20]
 800a4c0:	f000 fb66 	bl	800ab90 <__i2b>
 800a4c4:	4607      	mov	r7, r0
 800a4c6:	2d00      	cmp	r5, #0
 800a4c8:	dd0c      	ble.n	800a4e4 <_dtoa_r+0x754>
 800a4ca:	9b05      	ldr	r3, [sp, #20]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	dd09      	ble.n	800a4e4 <_dtoa_r+0x754>
 800a4d0:	42ab      	cmp	r3, r5
 800a4d2:	9a04      	ldr	r2, [sp, #16]
 800a4d4:	bfa8      	it	ge
 800a4d6:	462b      	movge	r3, r5
 800a4d8:	1ad2      	subs	r2, r2, r3
 800a4da:	9204      	str	r2, [sp, #16]
 800a4dc:	9a05      	ldr	r2, [sp, #20]
 800a4de:	1aed      	subs	r5, r5, r3
 800a4e0:	1ad3      	subs	r3, r2, r3
 800a4e2:	9305      	str	r3, [sp, #20]
 800a4e4:	9b07      	ldr	r3, [sp, #28]
 800a4e6:	b31b      	cbz	r3, 800a530 <_dtoa_r+0x7a0>
 800a4e8:	9b08      	ldr	r3, [sp, #32]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	f000 80af 	beq.w	800a64e <_dtoa_r+0x8be>
 800a4f0:	2e00      	cmp	r6, #0
 800a4f2:	dd13      	ble.n	800a51c <_dtoa_r+0x78c>
 800a4f4:	4639      	mov	r1, r7
 800a4f6:	4632      	mov	r2, r6
 800a4f8:	4620      	mov	r0, r4
 800a4fa:	f000 fc09 	bl	800ad10 <__pow5mult>
 800a4fe:	ee18 2a10 	vmov	r2, s16
 800a502:	4601      	mov	r1, r0
 800a504:	4607      	mov	r7, r0
 800a506:	4620      	mov	r0, r4
 800a508:	f000 fb58 	bl	800abbc <__multiply>
 800a50c:	ee18 1a10 	vmov	r1, s16
 800a510:	4680      	mov	r8, r0
 800a512:	4620      	mov	r0, r4
 800a514:	f000 fa84 	bl	800aa20 <_Bfree>
 800a518:	ee08 8a10 	vmov	s16, r8
 800a51c:	9b07      	ldr	r3, [sp, #28]
 800a51e:	1b9a      	subs	r2, r3, r6
 800a520:	d006      	beq.n	800a530 <_dtoa_r+0x7a0>
 800a522:	ee18 1a10 	vmov	r1, s16
 800a526:	4620      	mov	r0, r4
 800a528:	f000 fbf2 	bl	800ad10 <__pow5mult>
 800a52c:	ee08 0a10 	vmov	s16, r0
 800a530:	2101      	movs	r1, #1
 800a532:	4620      	mov	r0, r4
 800a534:	f000 fb2c 	bl	800ab90 <__i2b>
 800a538:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	4606      	mov	r6, r0
 800a53e:	f340 8088 	ble.w	800a652 <_dtoa_r+0x8c2>
 800a542:	461a      	mov	r2, r3
 800a544:	4601      	mov	r1, r0
 800a546:	4620      	mov	r0, r4
 800a548:	f000 fbe2 	bl	800ad10 <__pow5mult>
 800a54c:	9b06      	ldr	r3, [sp, #24]
 800a54e:	2b01      	cmp	r3, #1
 800a550:	4606      	mov	r6, r0
 800a552:	f340 8081 	ble.w	800a658 <_dtoa_r+0x8c8>
 800a556:	f04f 0800 	mov.w	r8, #0
 800a55a:	6933      	ldr	r3, [r6, #16]
 800a55c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a560:	6918      	ldr	r0, [r3, #16]
 800a562:	f000 fac5 	bl	800aaf0 <__hi0bits>
 800a566:	f1c0 0020 	rsb	r0, r0, #32
 800a56a:	9b05      	ldr	r3, [sp, #20]
 800a56c:	4418      	add	r0, r3
 800a56e:	f010 001f 	ands.w	r0, r0, #31
 800a572:	f000 8092 	beq.w	800a69a <_dtoa_r+0x90a>
 800a576:	f1c0 0320 	rsb	r3, r0, #32
 800a57a:	2b04      	cmp	r3, #4
 800a57c:	f340 808a 	ble.w	800a694 <_dtoa_r+0x904>
 800a580:	f1c0 001c 	rsb	r0, r0, #28
 800a584:	9b04      	ldr	r3, [sp, #16]
 800a586:	4403      	add	r3, r0
 800a588:	9304      	str	r3, [sp, #16]
 800a58a:	9b05      	ldr	r3, [sp, #20]
 800a58c:	4403      	add	r3, r0
 800a58e:	4405      	add	r5, r0
 800a590:	9305      	str	r3, [sp, #20]
 800a592:	9b04      	ldr	r3, [sp, #16]
 800a594:	2b00      	cmp	r3, #0
 800a596:	dd07      	ble.n	800a5a8 <_dtoa_r+0x818>
 800a598:	ee18 1a10 	vmov	r1, s16
 800a59c:	461a      	mov	r2, r3
 800a59e:	4620      	mov	r0, r4
 800a5a0:	f000 fc10 	bl	800adc4 <__lshift>
 800a5a4:	ee08 0a10 	vmov	s16, r0
 800a5a8:	9b05      	ldr	r3, [sp, #20]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	dd05      	ble.n	800a5ba <_dtoa_r+0x82a>
 800a5ae:	4631      	mov	r1, r6
 800a5b0:	461a      	mov	r2, r3
 800a5b2:	4620      	mov	r0, r4
 800a5b4:	f000 fc06 	bl	800adc4 <__lshift>
 800a5b8:	4606      	mov	r6, r0
 800a5ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d06e      	beq.n	800a69e <_dtoa_r+0x90e>
 800a5c0:	ee18 0a10 	vmov	r0, s16
 800a5c4:	4631      	mov	r1, r6
 800a5c6:	f000 fc6d 	bl	800aea4 <__mcmp>
 800a5ca:	2800      	cmp	r0, #0
 800a5cc:	da67      	bge.n	800a69e <_dtoa_r+0x90e>
 800a5ce:	9b00      	ldr	r3, [sp, #0]
 800a5d0:	3b01      	subs	r3, #1
 800a5d2:	ee18 1a10 	vmov	r1, s16
 800a5d6:	9300      	str	r3, [sp, #0]
 800a5d8:	220a      	movs	r2, #10
 800a5da:	2300      	movs	r3, #0
 800a5dc:	4620      	mov	r0, r4
 800a5de:	f000 fa41 	bl	800aa64 <__multadd>
 800a5e2:	9b08      	ldr	r3, [sp, #32]
 800a5e4:	ee08 0a10 	vmov	s16, r0
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	f000 81b1 	beq.w	800a950 <_dtoa_r+0xbc0>
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	4639      	mov	r1, r7
 800a5f2:	220a      	movs	r2, #10
 800a5f4:	4620      	mov	r0, r4
 800a5f6:	f000 fa35 	bl	800aa64 <__multadd>
 800a5fa:	9b02      	ldr	r3, [sp, #8]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	4607      	mov	r7, r0
 800a600:	f300 808e 	bgt.w	800a720 <_dtoa_r+0x990>
 800a604:	9b06      	ldr	r3, [sp, #24]
 800a606:	2b02      	cmp	r3, #2
 800a608:	dc51      	bgt.n	800a6ae <_dtoa_r+0x91e>
 800a60a:	e089      	b.n	800a720 <_dtoa_r+0x990>
 800a60c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a60e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a612:	e74b      	b.n	800a4ac <_dtoa_r+0x71c>
 800a614:	9b03      	ldr	r3, [sp, #12]
 800a616:	1e5e      	subs	r6, r3, #1
 800a618:	9b07      	ldr	r3, [sp, #28]
 800a61a:	42b3      	cmp	r3, r6
 800a61c:	bfbf      	itttt	lt
 800a61e:	9b07      	ldrlt	r3, [sp, #28]
 800a620:	9607      	strlt	r6, [sp, #28]
 800a622:	1af2      	sublt	r2, r6, r3
 800a624:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a626:	bfb6      	itet	lt
 800a628:	189b      	addlt	r3, r3, r2
 800a62a:	1b9e      	subge	r6, r3, r6
 800a62c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a62e:	9b03      	ldr	r3, [sp, #12]
 800a630:	bfb8      	it	lt
 800a632:	2600      	movlt	r6, #0
 800a634:	2b00      	cmp	r3, #0
 800a636:	bfb7      	itett	lt
 800a638:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a63c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a640:	1a9d      	sublt	r5, r3, r2
 800a642:	2300      	movlt	r3, #0
 800a644:	e734      	b.n	800a4b0 <_dtoa_r+0x720>
 800a646:	9e07      	ldr	r6, [sp, #28]
 800a648:	9d04      	ldr	r5, [sp, #16]
 800a64a:	9f08      	ldr	r7, [sp, #32]
 800a64c:	e73b      	b.n	800a4c6 <_dtoa_r+0x736>
 800a64e:	9a07      	ldr	r2, [sp, #28]
 800a650:	e767      	b.n	800a522 <_dtoa_r+0x792>
 800a652:	9b06      	ldr	r3, [sp, #24]
 800a654:	2b01      	cmp	r3, #1
 800a656:	dc18      	bgt.n	800a68a <_dtoa_r+0x8fa>
 800a658:	f1ba 0f00 	cmp.w	sl, #0
 800a65c:	d115      	bne.n	800a68a <_dtoa_r+0x8fa>
 800a65e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a662:	b993      	cbnz	r3, 800a68a <_dtoa_r+0x8fa>
 800a664:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a668:	0d1b      	lsrs	r3, r3, #20
 800a66a:	051b      	lsls	r3, r3, #20
 800a66c:	b183      	cbz	r3, 800a690 <_dtoa_r+0x900>
 800a66e:	9b04      	ldr	r3, [sp, #16]
 800a670:	3301      	adds	r3, #1
 800a672:	9304      	str	r3, [sp, #16]
 800a674:	9b05      	ldr	r3, [sp, #20]
 800a676:	3301      	adds	r3, #1
 800a678:	9305      	str	r3, [sp, #20]
 800a67a:	f04f 0801 	mov.w	r8, #1
 800a67e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a680:	2b00      	cmp	r3, #0
 800a682:	f47f af6a 	bne.w	800a55a <_dtoa_r+0x7ca>
 800a686:	2001      	movs	r0, #1
 800a688:	e76f      	b.n	800a56a <_dtoa_r+0x7da>
 800a68a:	f04f 0800 	mov.w	r8, #0
 800a68e:	e7f6      	b.n	800a67e <_dtoa_r+0x8ee>
 800a690:	4698      	mov	r8, r3
 800a692:	e7f4      	b.n	800a67e <_dtoa_r+0x8ee>
 800a694:	f43f af7d 	beq.w	800a592 <_dtoa_r+0x802>
 800a698:	4618      	mov	r0, r3
 800a69a:	301c      	adds	r0, #28
 800a69c:	e772      	b.n	800a584 <_dtoa_r+0x7f4>
 800a69e:	9b03      	ldr	r3, [sp, #12]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	dc37      	bgt.n	800a714 <_dtoa_r+0x984>
 800a6a4:	9b06      	ldr	r3, [sp, #24]
 800a6a6:	2b02      	cmp	r3, #2
 800a6a8:	dd34      	ble.n	800a714 <_dtoa_r+0x984>
 800a6aa:	9b03      	ldr	r3, [sp, #12]
 800a6ac:	9302      	str	r3, [sp, #8]
 800a6ae:	9b02      	ldr	r3, [sp, #8]
 800a6b0:	b96b      	cbnz	r3, 800a6ce <_dtoa_r+0x93e>
 800a6b2:	4631      	mov	r1, r6
 800a6b4:	2205      	movs	r2, #5
 800a6b6:	4620      	mov	r0, r4
 800a6b8:	f000 f9d4 	bl	800aa64 <__multadd>
 800a6bc:	4601      	mov	r1, r0
 800a6be:	4606      	mov	r6, r0
 800a6c0:	ee18 0a10 	vmov	r0, s16
 800a6c4:	f000 fbee 	bl	800aea4 <__mcmp>
 800a6c8:	2800      	cmp	r0, #0
 800a6ca:	f73f adbb 	bgt.w	800a244 <_dtoa_r+0x4b4>
 800a6ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6d0:	9d01      	ldr	r5, [sp, #4]
 800a6d2:	43db      	mvns	r3, r3
 800a6d4:	9300      	str	r3, [sp, #0]
 800a6d6:	f04f 0800 	mov.w	r8, #0
 800a6da:	4631      	mov	r1, r6
 800a6dc:	4620      	mov	r0, r4
 800a6de:	f000 f99f 	bl	800aa20 <_Bfree>
 800a6e2:	2f00      	cmp	r7, #0
 800a6e4:	f43f aea4 	beq.w	800a430 <_dtoa_r+0x6a0>
 800a6e8:	f1b8 0f00 	cmp.w	r8, #0
 800a6ec:	d005      	beq.n	800a6fa <_dtoa_r+0x96a>
 800a6ee:	45b8      	cmp	r8, r7
 800a6f0:	d003      	beq.n	800a6fa <_dtoa_r+0x96a>
 800a6f2:	4641      	mov	r1, r8
 800a6f4:	4620      	mov	r0, r4
 800a6f6:	f000 f993 	bl	800aa20 <_Bfree>
 800a6fa:	4639      	mov	r1, r7
 800a6fc:	4620      	mov	r0, r4
 800a6fe:	f000 f98f 	bl	800aa20 <_Bfree>
 800a702:	e695      	b.n	800a430 <_dtoa_r+0x6a0>
 800a704:	2600      	movs	r6, #0
 800a706:	4637      	mov	r7, r6
 800a708:	e7e1      	b.n	800a6ce <_dtoa_r+0x93e>
 800a70a:	9700      	str	r7, [sp, #0]
 800a70c:	4637      	mov	r7, r6
 800a70e:	e599      	b.n	800a244 <_dtoa_r+0x4b4>
 800a710:	40240000 	.word	0x40240000
 800a714:	9b08      	ldr	r3, [sp, #32]
 800a716:	2b00      	cmp	r3, #0
 800a718:	f000 80ca 	beq.w	800a8b0 <_dtoa_r+0xb20>
 800a71c:	9b03      	ldr	r3, [sp, #12]
 800a71e:	9302      	str	r3, [sp, #8]
 800a720:	2d00      	cmp	r5, #0
 800a722:	dd05      	ble.n	800a730 <_dtoa_r+0x9a0>
 800a724:	4639      	mov	r1, r7
 800a726:	462a      	mov	r2, r5
 800a728:	4620      	mov	r0, r4
 800a72a:	f000 fb4b 	bl	800adc4 <__lshift>
 800a72e:	4607      	mov	r7, r0
 800a730:	f1b8 0f00 	cmp.w	r8, #0
 800a734:	d05b      	beq.n	800a7ee <_dtoa_r+0xa5e>
 800a736:	6879      	ldr	r1, [r7, #4]
 800a738:	4620      	mov	r0, r4
 800a73a:	f000 f931 	bl	800a9a0 <_Balloc>
 800a73e:	4605      	mov	r5, r0
 800a740:	b928      	cbnz	r0, 800a74e <_dtoa_r+0x9be>
 800a742:	4b87      	ldr	r3, [pc, #540]	; (800a960 <_dtoa_r+0xbd0>)
 800a744:	4602      	mov	r2, r0
 800a746:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a74a:	f7ff bb3b 	b.w	8009dc4 <_dtoa_r+0x34>
 800a74e:	693a      	ldr	r2, [r7, #16]
 800a750:	3202      	adds	r2, #2
 800a752:	0092      	lsls	r2, r2, #2
 800a754:	f107 010c 	add.w	r1, r7, #12
 800a758:	300c      	adds	r0, #12
 800a75a:	f000 f913 	bl	800a984 <memcpy>
 800a75e:	2201      	movs	r2, #1
 800a760:	4629      	mov	r1, r5
 800a762:	4620      	mov	r0, r4
 800a764:	f000 fb2e 	bl	800adc4 <__lshift>
 800a768:	9b01      	ldr	r3, [sp, #4]
 800a76a:	f103 0901 	add.w	r9, r3, #1
 800a76e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a772:	4413      	add	r3, r2
 800a774:	9305      	str	r3, [sp, #20]
 800a776:	f00a 0301 	and.w	r3, sl, #1
 800a77a:	46b8      	mov	r8, r7
 800a77c:	9304      	str	r3, [sp, #16]
 800a77e:	4607      	mov	r7, r0
 800a780:	4631      	mov	r1, r6
 800a782:	ee18 0a10 	vmov	r0, s16
 800a786:	f7ff fa75 	bl	8009c74 <quorem>
 800a78a:	4641      	mov	r1, r8
 800a78c:	9002      	str	r0, [sp, #8]
 800a78e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a792:	ee18 0a10 	vmov	r0, s16
 800a796:	f000 fb85 	bl	800aea4 <__mcmp>
 800a79a:	463a      	mov	r2, r7
 800a79c:	9003      	str	r0, [sp, #12]
 800a79e:	4631      	mov	r1, r6
 800a7a0:	4620      	mov	r0, r4
 800a7a2:	f000 fb9b 	bl	800aedc <__mdiff>
 800a7a6:	68c2      	ldr	r2, [r0, #12]
 800a7a8:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800a7ac:	4605      	mov	r5, r0
 800a7ae:	bb02      	cbnz	r2, 800a7f2 <_dtoa_r+0xa62>
 800a7b0:	4601      	mov	r1, r0
 800a7b2:	ee18 0a10 	vmov	r0, s16
 800a7b6:	f000 fb75 	bl	800aea4 <__mcmp>
 800a7ba:	4602      	mov	r2, r0
 800a7bc:	4629      	mov	r1, r5
 800a7be:	4620      	mov	r0, r4
 800a7c0:	9207      	str	r2, [sp, #28]
 800a7c2:	f000 f92d 	bl	800aa20 <_Bfree>
 800a7c6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a7ca:	ea43 0102 	orr.w	r1, r3, r2
 800a7ce:	9b04      	ldr	r3, [sp, #16]
 800a7d0:	430b      	orrs	r3, r1
 800a7d2:	464d      	mov	r5, r9
 800a7d4:	d10f      	bne.n	800a7f6 <_dtoa_r+0xa66>
 800a7d6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a7da:	d02a      	beq.n	800a832 <_dtoa_r+0xaa2>
 800a7dc:	9b03      	ldr	r3, [sp, #12]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	dd02      	ble.n	800a7e8 <_dtoa_r+0xa58>
 800a7e2:	9b02      	ldr	r3, [sp, #8]
 800a7e4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a7e8:	f88b a000 	strb.w	sl, [fp]
 800a7ec:	e775      	b.n	800a6da <_dtoa_r+0x94a>
 800a7ee:	4638      	mov	r0, r7
 800a7f0:	e7ba      	b.n	800a768 <_dtoa_r+0x9d8>
 800a7f2:	2201      	movs	r2, #1
 800a7f4:	e7e2      	b.n	800a7bc <_dtoa_r+0xa2c>
 800a7f6:	9b03      	ldr	r3, [sp, #12]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	db04      	blt.n	800a806 <_dtoa_r+0xa76>
 800a7fc:	9906      	ldr	r1, [sp, #24]
 800a7fe:	430b      	orrs	r3, r1
 800a800:	9904      	ldr	r1, [sp, #16]
 800a802:	430b      	orrs	r3, r1
 800a804:	d122      	bne.n	800a84c <_dtoa_r+0xabc>
 800a806:	2a00      	cmp	r2, #0
 800a808:	ddee      	ble.n	800a7e8 <_dtoa_r+0xa58>
 800a80a:	ee18 1a10 	vmov	r1, s16
 800a80e:	2201      	movs	r2, #1
 800a810:	4620      	mov	r0, r4
 800a812:	f000 fad7 	bl	800adc4 <__lshift>
 800a816:	4631      	mov	r1, r6
 800a818:	ee08 0a10 	vmov	s16, r0
 800a81c:	f000 fb42 	bl	800aea4 <__mcmp>
 800a820:	2800      	cmp	r0, #0
 800a822:	dc03      	bgt.n	800a82c <_dtoa_r+0xa9c>
 800a824:	d1e0      	bne.n	800a7e8 <_dtoa_r+0xa58>
 800a826:	f01a 0f01 	tst.w	sl, #1
 800a82a:	d0dd      	beq.n	800a7e8 <_dtoa_r+0xa58>
 800a82c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a830:	d1d7      	bne.n	800a7e2 <_dtoa_r+0xa52>
 800a832:	2339      	movs	r3, #57	; 0x39
 800a834:	f88b 3000 	strb.w	r3, [fp]
 800a838:	462b      	mov	r3, r5
 800a83a:	461d      	mov	r5, r3
 800a83c:	3b01      	subs	r3, #1
 800a83e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a842:	2a39      	cmp	r2, #57	; 0x39
 800a844:	d071      	beq.n	800a92a <_dtoa_r+0xb9a>
 800a846:	3201      	adds	r2, #1
 800a848:	701a      	strb	r2, [r3, #0]
 800a84a:	e746      	b.n	800a6da <_dtoa_r+0x94a>
 800a84c:	2a00      	cmp	r2, #0
 800a84e:	dd07      	ble.n	800a860 <_dtoa_r+0xad0>
 800a850:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a854:	d0ed      	beq.n	800a832 <_dtoa_r+0xaa2>
 800a856:	f10a 0301 	add.w	r3, sl, #1
 800a85a:	f88b 3000 	strb.w	r3, [fp]
 800a85e:	e73c      	b.n	800a6da <_dtoa_r+0x94a>
 800a860:	9b05      	ldr	r3, [sp, #20]
 800a862:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a866:	4599      	cmp	r9, r3
 800a868:	d047      	beq.n	800a8fa <_dtoa_r+0xb6a>
 800a86a:	ee18 1a10 	vmov	r1, s16
 800a86e:	2300      	movs	r3, #0
 800a870:	220a      	movs	r2, #10
 800a872:	4620      	mov	r0, r4
 800a874:	f000 f8f6 	bl	800aa64 <__multadd>
 800a878:	45b8      	cmp	r8, r7
 800a87a:	ee08 0a10 	vmov	s16, r0
 800a87e:	f04f 0300 	mov.w	r3, #0
 800a882:	f04f 020a 	mov.w	r2, #10
 800a886:	4641      	mov	r1, r8
 800a888:	4620      	mov	r0, r4
 800a88a:	d106      	bne.n	800a89a <_dtoa_r+0xb0a>
 800a88c:	f000 f8ea 	bl	800aa64 <__multadd>
 800a890:	4680      	mov	r8, r0
 800a892:	4607      	mov	r7, r0
 800a894:	f109 0901 	add.w	r9, r9, #1
 800a898:	e772      	b.n	800a780 <_dtoa_r+0x9f0>
 800a89a:	f000 f8e3 	bl	800aa64 <__multadd>
 800a89e:	4639      	mov	r1, r7
 800a8a0:	4680      	mov	r8, r0
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	220a      	movs	r2, #10
 800a8a6:	4620      	mov	r0, r4
 800a8a8:	f000 f8dc 	bl	800aa64 <__multadd>
 800a8ac:	4607      	mov	r7, r0
 800a8ae:	e7f1      	b.n	800a894 <_dtoa_r+0xb04>
 800a8b0:	9b03      	ldr	r3, [sp, #12]
 800a8b2:	9302      	str	r3, [sp, #8]
 800a8b4:	9d01      	ldr	r5, [sp, #4]
 800a8b6:	ee18 0a10 	vmov	r0, s16
 800a8ba:	4631      	mov	r1, r6
 800a8bc:	f7ff f9da 	bl	8009c74 <quorem>
 800a8c0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a8c4:	9b01      	ldr	r3, [sp, #4]
 800a8c6:	f805 ab01 	strb.w	sl, [r5], #1
 800a8ca:	1aea      	subs	r2, r5, r3
 800a8cc:	9b02      	ldr	r3, [sp, #8]
 800a8ce:	4293      	cmp	r3, r2
 800a8d0:	dd09      	ble.n	800a8e6 <_dtoa_r+0xb56>
 800a8d2:	ee18 1a10 	vmov	r1, s16
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	220a      	movs	r2, #10
 800a8da:	4620      	mov	r0, r4
 800a8dc:	f000 f8c2 	bl	800aa64 <__multadd>
 800a8e0:	ee08 0a10 	vmov	s16, r0
 800a8e4:	e7e7      	b.n	800a8b6 <_dtoa_r+0xb26>
 800a8e6:	9b02      	ldr	r3, [sp, #8]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	bfc8      	it	gt
 800a8ec:	461d      	movgt	r5, r3
 800a8ee:	9b01      	ldr	r3, [sp, #4]
 800a8f0:	bfd8      	it	le
 800a8f2:	2501      	movle	r5, #1
 800a8f4:	441d      	add	r5, r3
 800a8f6:	f04f 0800 	mov.w	r8, #0
 800a8fa:	ee18 1a10 	vmov	r1, s16
 800a8fe:	2201      	movs	r2, #1
 800a900:	4620      	mov	r0, r4
 800a902:	f000 fa5f 	bl	800adc4 <__lshift>
 800a906:	4631      	mov	r1, r6
 800a908:	ee08 0a10 	vmov	s16, r0
 800a90c:	f000 faca 	bl	800aea4 <__mcmp>
 800a910:	2800      	cmp	r0, #0
 800a912:	dc91      	bgt.n	800a838 <_dtoa_r+0xaa8>
 800a914:	d102      	bne.n	800a91c <_dtoa_r+0xb8c>
 800a916:	f01a 0f01 	tst.w	sl, #1
 800a91a:	d18d      	bne.n	800a838 <_dtoa_r+0xaa8>
 800a91c:	462b      	mov	r3, r5
 800a91e:	461d      	mov	r5, r3
 800a920:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a924:	2a30      	cmp	r2, #48	; 0x30
 800a926:	d0fa      	beq.n	800a91e <_dtoa_r+0xb8e>
 800a928:	e6d7      	b.n	800a6da <_dtoa_r+0x94a>
 800a92a:	9a01      	ldr	r2, [sp, #4]
 800a92c:	429a      	cmp	r2, r3
 800a92e:	d184      	bne.n	800a83a <_dtoa_r+0xaaa>
 800a930:	9b00      	ldr	r3, [sp, #0]
 800a932:	3301      	adds	r3, #1
 800a934:	9300      	str	r3, [sp, #0]
 800a936:	2331      	movs	r3, #49	; 0x31
 800a938:	7013      	strb	r3, [r2, #0]
 800a93a:	e6ce      	b.n	800a6da <_dtoa_r+0x94a>
 800a93c:	4b09      	ldr	r3, [pc, #36]	; (800a964 <_dtoa_r+0xbd4>)
 800a93e:	f7ff ba95 	b.w	8009e6c <_dtoa_r+0xdc>
 800a942:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a944:	2b00      	cmp	r3, #0
 800a946:	f47f aa6e 	bne.w	8009e26 <_dtoa_r+0x96>
 800a94a:	4b07      	ldr	r3, [pc, #28]	; (800a968 <_dtoa_r+0xbd8>)
 800a94c:	f7ff ba8e 	b.w	8009e6c <_dtoa_r+0xdc>
 800a950:	9b02      	ldr	r3, [sp, #8]
 800a952:	2b00      	cmp	r3, #0
 800a954:	dcae      	bgt.n	800a8b4 <_dtoa_r+0xb24>
 800a956:	9b06      	ldr	r3, [sp, #24]
 800a958:	2b02      	cmp	r3, #2
 800a95a:	f73f aea8 	bgt.w	800a6ae <_dtoa_r+0x91e>
 800a95e:	e7a9      	b.n	800a8b4 <_dtoa_r+0xb24>
 800a960:	0800d4e7 	.word	0x0800d4e7
 800a964:	0800d444 	.word	0x0800d444
 800a968:	0800d468 	.word	0x0800d468

0800a96c <_localeconv_r>:
 800a96c:	4800      	ldr	r0, [pc, #0]	; (800a970 <_localeconv_r+0x4>)
 800a96e:	4770      	bx	lr
 800a970:	20000250 	.word	0x20000250

0800a974 <malloc>:
 800a974:	4b02      	ldr	r3, [pc, #8]	; (800a980 <malloc+0xc>)
 800a976:	4601      	mov	r1, r0
 800a978:	6818      	ldr	r0, [r3, #0]
 800a97a:	f000 bc17 	b.w	800b1ac <_malloc_r>
 800a97e:	bf00      	nop
 800a980:	200000fc 	.word	0x200000fc

0800a984 <memcpy>:
 800a984:	440a      	add	r2, r1
 800a986:	4291      	cmp	r1, r2
 800a988:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a98c:	d100      	bne.n	800a990 <memcpy+0xc>
 800a98e:	4770      	bx	lr
 800a990:	b510      	push	{r4, lr}
 800a992:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a996:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a99a:	4291      	cmp	r1, r2
 800a99c:	d1f9      	bne.n	800a992 <memcpy+0xe>
 800a99e:	bd10      	pop	{r4, pc}

0800a9a0 <_Balloc>:
 800a9a0:	b570      	push	{r4, r5, r6, lr}
 800a9a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a9a4:	4604      	mov	r4, r0
 800a9a6:	460d      	mov	r5, r1
 800a9a8:	b976      	cbnz	r6, 800a9c8 <_Balloc+0x28>
 800a9aa:	2010      	movs	r0, #16
 800a9ac:	f7ff ffe2 	bl	800a974 <malloc>
 800a9b0:	4602      	mov	r2, r0
 800a9b2:	6260      	str	r0, [r4, #36]	; 0x24
 800a9b4:	b920      	cbnz	r0, 800a9c0 <_Balloc+0x20>
 800a9b6:	4b18      	ldr	r3, [pc, #96]	; (800aa18 <_Balloc+0x78>)
 800a9b8:	4818      	ldr	r0, [pc, #96]	; (800aa1c <_Balloc+0x7c>)
 800a9ba:	2166      	movs	r1, #102	; 0x66
 800a9bc:	f000 fdd6 	bl	800b56c <__assert_func>
 800a9c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a9c4:	6006      	str	r6, [r0, #0]
 800a9c6:	60c6      	str	r6, [r0, #12]
 800a9c8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a9ca:	68f3      	ldr	r3, [r6, #12]
 800a9cc:	b183      	cbz	r3, 800a9f0 <_Balloc+0x50>
 800a9ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a9d0:	68db      	ldr	r3, [r3, #12]
 800a9d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a9d6:	b9b8      	cbnz	r0, 800aa08 <_Balloc+0x68>
 800a9d8:	2101      	movs	r1, #1
 800a9da:	fa01 f605 	lsl.w	r6, r1, r5
 800a9de:	1d72      	adds	r2, r6, #5
 800a9e0:	0092      	lsls	r2, r2, #2
 800a9e2:	4620      	mov	r0, r4
 800a9e4:	f000 fb60 	bl	800b0a8 <_calloc_r>
 800a9e8:	b160      	cbz	r0, 800aa04 <_Balloc+0x64>
 800a9ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a9ee:	e00e      	b.n	800aa0e <_Balloc+0x6e>
 800a9f0:	2221      	movs	r2, #33	; 0x21
 800a9f2:	2104      	movs	r1, #4
 800a9f4:	4620      	mov	r0, r4
 800a9f6:	f000 fb57 	bl	800b0a8 <_calloc_r>
 800a9fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a9fc:	60f0      	str	r0, [r6, #12]
 800a9fe:	68db      	ldr	r3, [r3, #12]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d1e4      	bne.n	800a9ce <_Balloc+0x2e>
 800aa04:	2000      	movs	r0, #0
 800aa06:	bd70      	pop	{r4, r5, r6, pc}
 800aa08:	6802      	ldr	r2, [r0, #0]
 800aa0a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800aa0e:	2300      	movs	r3, #0
 800aa10:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aa14:	e7f7      	b.n	800aa06 <_Balloc+0x66>
 800aa16:	bf00      	nop
 800aa18:	0800d475 	.word	0x0800d475
 800aa1c:	0800d4f8 	.word	0x0800d4f8

0800aa20 <_Bfree>:
 800aa20:	b570      	push	{r4, r5, r6, lr}
 800aa22:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800aa24:	4605      	mov	r5, r0
 800aa26:	460c      	mov	r4, r1
 800aa28:	b976      	cbnz	r6, 800aa48 <_Bfree+0x28>
 800aa2a:	2010      	movs	r0, #16
 800aa2c:	f7ff ffa2 	bl	800a974 <malloc>
 800aa30:	4602      	mov	r2, r0
 800aa32:	6268      	str	r0, [r5, #36]	; 0x24
 800aa34:	b920      	cbnz	r0, 800aa40 <_Bfree+0x20>
 800aa36:	4b09      	ldr	r3, [pc, #36]	; (800aa5c <_Bfree+0x3c>)
 800aa38:	4809      	ldr	r0, [pc, #36]	; (800aa60 <_Bfree+0x40>)
 800aa3a:	218a      	movs	r1, #138	; 0x8a
 800aa3c:	f000 fd96 	bl	800b56c <__assert_func>
 800aa40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aa44:	6006      	str	r6, [r0, #0]
 800aa46:	60c6      	str	r6, [r0, #12]
 800aa48:	b13c      	cbz	r4, 800aa5a <_Bfree+0x3a>
 800aa4a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800aa4c:	6862      	ldr	r2, [r4, #4]
 800aa4e:	68db      	ldr	r3, [r3, #12]
 800aa50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aa54:	6021      	str	r1, [r4, #0]
 800aa56:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800aa5a:	bd70      	pop	{r4, r5, r6, pc}
 800aa5c:	0800d475 	.word	0x0800d475
 800aa60:	0800d4f8 	.word	0x0800d4f8

0800aa64 <__multadd>:
 800aa64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa68:	690d      	ldr	r5, [r1, #16]
 800aa6a:	4607      	mov	r7, r0
 800aa6c:	460c      	mov	r4, r1
 800aa6e:	461e      	mov	r6, r3
 800aa70:	f101 0c14 	add.w	ip, r1, #20
 800aa74:	2000      	movs	r0, #0
 800aa76:	f8dc 3000 	ldr.w	r3, [ip]
 800aa7a:	b299      	uxth	r1, r3
 800aa7c:	fb02 6101 	mla	r1, r2, r1, r6
 800aa80:	0c1e      	lsrs	r6, r3, #16
 800aa82:	0c0b      	lsrs	r3, r1, #16
 800aa84:	fb02 3306 	mla	r3, r2, r6, r3
 800aa88:	b289      	uxth	r1, r1
 800aa8a:	3001      	adds	r0, #1
 800aa8c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800aa90:	4285      	cmp	r5, r0
 800aa92:	f84c 1b04 	str.w	r1, [ip], #4
 800aa96:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800aa9a:	dcec      	bgt.n	800aa76 <__multadd+0x12>
 800aa9c:	b30e      	cbz	r6, 800aae2 <__multadd+0x7e>
 800aa9e:	68a3      	ldr	r3, [r4, #8]
 800aaa0:	42ab      	cmp	r3, r5
 800aaa2:	dc19      	bgt.n	800aad8 <__multadd+0x74>
 800aaa4:	6861      	ldr	r1, [r4, #4]
 800aaa6:	4638      	mov	r0, r7
 800aaa8:	3101      	adds	r1, #1
 800aaaa:	f7ff ff79 	bl	800a9a0 <_Balloc>
 800aaae:	4680      	mov	r8, r0
 800aab0:	b928      	cbnz	r0, 800aabe <__multadd+0x5a>
 800aab2:	4602      	mov	r2, r0
 800aab4:	4b0c      	ldr	r3, [pc, #48]	; (800aae8 <__multadd+0x84>)
 800aab6:	480d      	ldr	r0, [pc, #52]	; (800aaec <__multadd+0x88>)
 800aab8:	21b5      	movs	r1, #181	; 0xb5
 800aaba:	f000 fd57 	bl	800b56c <__assert_func>
 800aabe:	6922      	ldr	r2, [r4, #16]
 800aac0:	3202      	adds	r2, #2
 800aac2:	f104 010c 	add.w	r1, r4, #12
 800aac6:	0092      	lsls	r2, r2, #2
 800aac8:	300c      	adds	r0, #12
 800aaca:	f7ff ff5b 	bl	800a984 <memcpy>
 800aace:	4621      	mov	r1, r4
 800aad0:	4638      	mov	r0, r7
 800aad2:	f7ff ffa5 	bl	800aa20 <_Bfree>
 800aad6:	4644      	mov	r4, r8
 800aad8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800aadc:	3501      	adds	r5, #1
 800aade:	615e      	str	r6, [r3, #20]
 800aae0:	6125      	str	r5, [r4, #16]
 800aae2:	4620      	mov	r0, r4
 800aae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aae8:	0800d4e7 	.word	0x0800d4e7
 800aaec:	0800d4f8 	.word	0x0800d4f8

0800aaf0 <__hi0bits>:
 800aaf0:	0c03      	lsrs	r3, r0, #16
 800aaf2:	041b      	lsls	r3, r3, #16
 800aaf4:	b9d3      	cbnz	r3, 800ab2c <__hi0bits+0x3c>
 800aaf6:	0400      	lsls	r0, r0, #16
 800aaf8:	2310      	movs	r3, #16
 800aafa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800aafe:	bf04      	itt	eq
 800ab00:	0200      	lsleq	r0, r0, #8
 800ab02:	3308      	addeq	r3, #8
 800ab04:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ab08:	bf04      	itt	eq
 800ab0a:	0100      	lsleq	r0, r0, #4
 800ab0c:	3304      	addeq	r3, #4
 800ab0e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ab12:	bf04      	itt	eq
 800ab14:	0080      	lsleq	r0, r0, #2
 800ab16:	3302      	addeq	r3, #2
 800ab18:	2800      	cmp	r0, #0
 800ab1a:	db05      	blt.n	800ab28 <__hi0bits+0x38>
 800ab1c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ab20:	f103 0301 	add.w	r3, r3, #1
 800ab24:	bf08      	it	eq
 800ab26:	2320      	moveq	r3, #32
 800ab28:	4618      	mov	r0, r3
 800ab2a:	4770      	bx	lr
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	e7e4      	b.n	800aafa <__hi0bits+0xa>

0800ab30 <__lo0bits>:
 800ab30:	6803      	ldr	r3, [r0, #0]
 800ab32:	f013 0207 	ands.w	r2, r3, #7
 800ab36:	4601      	mov	r1, r0
 800ab38:	d00b      	beq.n	800ab52 <__lo0bits+0x22>
 800ab3a:	07da      	lsls	r2, r3, #31
 800ab3c:	d423      	bmi.n	800ab86 <__lo0bits+0x56>
 800ab3e:	0798      	lsls	r0, r3, #30
 800ab40:	bf49      	itett	mi
 800ab42:	085b      	lsrmi	r3, r3, #1
 800ab44:	089b      	lsrpl	r3, r3, #2
 800ab46:	2001      	movmi	r0, #1
 800ab48:	600b      	strmi	r3, [r1, #0]
 800ab4a:	bf5c      	itt	pl
 800ab4c:	600b      	strpl	r3, [r1, #0]
 800ab4e:	2002      	movpl	r0, #2
 800ab50:	4770      	bx	lr
 800ab52:	b298      	uxth	r0, r3
 800ab54:	b9a8      	cbnz	r0, 800ab82 <__lo0bits+0x52>
 800ab56:	0c1b      	lsrs	r3, r3, #16
 800ab58:	2010      	movs	r0, #16
 800ab5a:	b2da      	uxtb	r2, r3
 800ab5c:	b90a      	cbnz	r2, 800ab62 <__lo0bits+0x32>
 800ab5e:	3008      	adds	r0, #8
 800ab60:	0a1b      	lsrs	r3, r3, #8
 800ab62:	071a      	lsls	r2, r3, #28
 800ab64:	bf04      	itt	eq
 800ab66:	091b      	lsreq	r3, r3, #4
 800ab68:	3004      	addeq	r0, #4
 800ab6a:	079a      	lsls	r2, r3, #30
 800ab6c:	bf04      	itt	eq
 800ab6e:	089b      	lsreq	r3, r3, #2
 800ab70:	3002      	addeq	r0, #2
 800ab72:	07da      	lsls	r2, r3, #31
 800ab74:	d403      	bmi.n	800ab7e <__lo0bits+0x4e>
 800ab76:	085b      	lsrs	r3, r3, #1
 800ab78:	f100 0001 	add.w	r0, r0, #1
 800ab7c:	d005      	beq.n	800ab8a <__lo0bits+0x5a>
 800ab7e:	600b      	str	r3, [r1, #0]
 800ab80:	4770      	bx	lr
 800ab82:	4610      	mov	r0, r2
 800ab84:	e7e9      	b.n	800ab5a <__lo0bits+0x2a>
 800ab86:	2000      	movs	r0, #0
 800ab88:	4770      	bx	lr
 800ab8a:	2020      	movs	r0, #32
 800ab8c:	4770      	bx	lr
	...

0800ab90 <__i2b>:
 800ab90:	b510      	push	{r4, lr}
 800ab92:	460c      	mov	r4, r1
 800ab94:	2101      	movs	r1, #1
 800ab96:	f7ff ff03 	bl	800a9a0 <_Balloc>
 800ab9a:	4602      	mov	r2, r0
 800ab9c:	b928      	cbnz	r0, 800abaa <__i2b+0x1a>
 800ab9e:	4b05      	ldr	r3, [pc, #20]	; (800abb4 <__i2b+0x24>)
 800aba0:	4805      	ldr	r0, [pc, #20]	; (800abb8 <__i2b+0x28>)
 800aba2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800aba6:	f000 fce1 	bl	800b56c <__assert_func>
 800abaa:	2301      	movs	r3, #1
 800abac:	6144      	str	r4, [r0, #20]
 800abae:	6103      	str	r3, [r0, #16]
 800abb0:	bd10      	pop	{r4, pc}
 800abb2:	bf00      	nop
 800abb4:	0800d4e7 	.word	0x0800d4e7
 800abb8:	0800d4f8 	.word	0x0800d4f8

0800abbc <__multiply>:
 800abbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abc0:	4691      	mov	r9, r2
 800abc2:	690a      	ldr	r2, [r1, #16]
 800abc4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800abc8:	429a      	cmp	r2, r3
 800abca:	bfb8      	it	lt
 800abcc:	460b      	movlt	r3, r1
 800abce:	460c      	mov	r4, r1
 800abd0:	bfbc      	itt	lt
 800abd2:	464c      	movlt	r4, r9
 800abd4:	4699      	movlt	r9, r3
 800abd6:	6927      	ldr	r7, [r4, #16]
 800abd8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800abdc:	68a3      	ldr	r3, [r4, #8]
 800abde:	6861      	ldr	r1, [r4, #4]
 800abe0:	eb07 060a 	add.w	r6, r7, sl
 800abe4:	42b3      	cmp	r3, r6
 800abe6:	b085      	sub	sp, #20
 800abe8:	bfb8      	it	lt
 800abea:	3101      	addlt	r1, #1
 800abec:	f7ff fed8 	bl	800a9a0 <_Balloc>
 800abf0:	b930      	cbnz	r0, 800ac00 <__multiply+0x44>
 800abf2:	4602      	mov	r2, r0
 800abf4:	4b44      	ldr	r3, [pc, #272]	; (800ad08 <__multiply+0x14c>)
 800abf6:	4845      	ldr	r0, [pc, #276]	; (800ad0c <__multiply+0x150>)
 800abf8:	f240 115d 	movw	r1, #349	; 0x15d
 800abfc:	f000 fcb6 	bl	800b56c <__assert_func>
 800ac00:	f100 0514 	add.w	r5, r0, #20
 800ac04:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ac08:	462b      	mov	r3, r5
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	4543      	cmp	r3, r8
 800ac0e:	d321      	bcc.n	800ac54 <__multiply+0x98>
 800ac10:	f104 0314 	add.w	r3, r4, #20
 800ac14:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ac18:	f109 0314 	add.w	r3, r9, #20
 800ac1c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ac20:	9202      	str	r2, [sp, #8]
 800ac22:	1b3a      	subs	r2, r7, r4
 800ac24:	3a15      	subs	r2, #21
 800ac26:	f022 0203 	bic.w	r2, r2, #3
 800ac2a:	3204      	adds	r2, #4
 800ac2c:	f104 0115 	add.w	r1, r4, #21
 800ac30:	428f      	cmp	r7, r1
 800ac32:	bf38      	it	cc
 800ac34:	2204      	movcc	r2, #4
 800ac36:	9201      	str	r2, [sp, #4]
 800ac38:	9a02      	ldr	r2, [sp, #8]
 800ac3a:	9303      	str	r3, [sp, #12]
 800ac3c:	429a      	cmp	r2, r3
 800ac3e:	d80c      	bhi.n	800ac5a <__multiply+0x9e>
 800ac40:	2e00      	cmp	r6, #0
 800ac42:	dd03      	ble.n	800ac4c <__multiply+0x90>
 800ac44:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d05a      	beq.n	800ad02 <__multiply+0x146>
 800ac4c:	6106      	str	r6, [r0, #16]
 800ac4e:	b005      	add	sp, #20
 800ac50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac54:	f843 2b04 	str.w	r2, [r3], #4
 800ac58:	e7d8      	b.n	800ac0c <__multiply+0x50>
 800ac5a:	f8b3 a000 	ldrh.w	sl, [r3]
 800ac5e:	f1ba 0f00 	cmp.w	sl, #0
 800ac62:	d024      	beq.n	800acae <__multiply+0xf2>
 800ac64:	f104 0e14 	add.w	lr, r4, #20
 800ac68:	46a9      	mov	r9, r5
 800ac6a:	f04f 0c00 	mov.w	ip, #0
 800ac6e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ac72:	f8d9 1000 	ldr.w	r1, [r9]
 800ac76:	fa1f fb82 	uxth.w	fp, r2
 800ac7a:	b289      	uxth	r1, r1
 800ac7c:	fb0a 110b 	mla	r1, sl, fp, r1
 800ac80:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ac84:	f8d9 2000 	ldr.w	r2, [r9]
 800ac88:	4461      	add	r1, ip
 800ac8a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ac8e:	fb0a c20b 	mla	r2, sl, fp, ip
 800ac92:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ac96:	b289      	uxth	r1, r1
 800ac98:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ac9c:	4577      	cmp	r7, lr
 800ac9e:	f849 1b04 	str.w	r1, [r9], #4
 800aca2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800aca6:	d8e2      	bhi.n	800ac6e <__multiply+0xb2>
 800aca8:	9a01      	ldr	r2, [sp, #4]
 800acaa:	f845 c002 	str.w	ip, [r5, r2]
 800acae:	9a03      	ldr	r2, [sp, #12]
 800acb0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800acb4:	3304      	adds	r3, #4
 800acb6:	f1b9 0f00 	cmp.w	r9, #0
 800acba:	d020      	beq.n	800acfe <__multiply+0x142>
 800acbc:	6829      	ldr	r1, [r5, #0]
 800acbe:	f104 0c14 	add.w	ip, r4, #20
 800acc2:	46ae      	mov	lr, r5
 800acc4:	f04f 0a00 	mov.w	sl, #0
 800acc8:	f8bc b000 	ldrh.w	fp, [ip]
 800accc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800acd0:	fb09 220b 	mla	r2, r9, fp, r2
 800acd4:	4492      	add	sl, r2
 800acd6:	b289      	uxth	r1, r1
 800acd8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800acdc:	f84e 1b04 	str.w	r1, [lr], #4
 800ace0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ace4:	f8be 1000 	ldrh.w	r1, [lr]
 800ace8:	0c12      	lsrs	r2, r2, #16
 800acea:	fb09 1102 	mla	r1, r9, r2, r1
 800acee:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800acf2:	4567      	cmp	r7, ip
 800acf4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800acf8:	d8e6      	bhi.n	800acc8 <__multiply+0x10c>
 800acfa:	9a01      	ldr	r2, [sp, #4]
 800acfc:	50a9      	str	r1, [r5, r2]
 800acfe:	3504      	adds	r5, #4
 800ad00:	e79a      	b.n	800ac38 <__multiply+0x7c>
 800ad02:	3e01      	subs	r6, #1
 800ad04:	e79c      	b.n	800ac40 <__multiply+0x84>
 800ad06:	bf00      	nop
 800ad08:	0800d4e7 	.word	0x0800d4e7
 800ad0c:	0800d4f8 	.word	0x0800d4f8

0800ad10 <__pow5mult>:
 800ad10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad14:	4615      	mov	r5, r2
 800ad16:	f012 0203 	ands.w	r2, r2, #3
 800ad1a:	4606      	mov	r6, r0
 800ad1c:	460f      	mov	r7, r1
 800ad1e:	d007      	beq.n	800ad30 <__pow5mult+0x20>
 800ad20:	4c25      	ldr	r4, [pc, #148]	; (800adb8 <__pow5mult+0xa8>)
 800ad22:	3a01      	subs	r2, #1
 800ad24:	2300      	movs	r3, #0
 800ad26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ad2a:	f7ff fe9b 	bl	800aa64 <__multadd>
 800ad2e:	4607      	mov	r7, r0
 800ad30:	10ad      	asrs	r5, r5, #2
 800ad32:	d03d      	beq.n	800adb0 <__pow5mult+0xa0>
 800ad34:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ad36:	b97c      	cbnz	r4, 800ad58 <__pow5mult+0x48>
 800ad38:	2010      	movs	r0, #16
 800ad3a:	f7ff fe1b 	bl	800a974 <malloc>
 800ad3e:	4602      	mov	r2, r0
 800ad40:	6270      	str	r0, [r6, #36]	; 0x24
 800ad42:	b928      	cbnz	r0, 800ad50 <__pow5mult+0x40>
 800ad44:	4b1d      	ldr	r3, [pc, #116]	; (800adbc <__pow5mult+0xac>)
 800ad46:	481e      	ldr	r0, [pc, #120]	; (800adc0 <__pow5mult+0xb0>)
 800ad48:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ad4c:	f000 fc0e 	bl	800b56c <__assert_func>
 800ad50:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ad54:	6004      	str	r4, [r0, #0]
 800ad56:	60c4      	str	r4, [r0, #12]
 800ad58:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ad5c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ad60:	b94c      	cbnz	r4, 800ad76 <__pow5mult+0x66>
 800ad62:	f240 2171 	movw	r1, #625	; 0x271
 800ad66:	4630      	mov	r0, r6
 800ad68:	f7ff ff12 	bl	800ab90 <__i2b>
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	f8c8 0008 	str.w	r0, [r8, #8]
 800ad72:	4604      	mov	r4, r0
 800ad74:	6003      	str	r3, [r0, #0]
 800ad76:	f04f 0900 	mov.w	r9, #0
 800ad7a:	07eb      	lsls	r3, r5, #31
 800ad7c:	d50a      	bpl.n	800ad94 <__pow5mult+0x84>
 800ad7e:	4639      	mov	r1, r7
 800ad80:	4622      	mov	r2, r4
 800ad82:	4630      	mov	r0, r6
 800ad84:	f7ff ff1a 	bl	800abbc <__multiply>
 800ad88:	4639      	mov	r1, r7
 800ad8a:	4680      	mov	r8, r0
 800ad8c:	4630      	mov	r0, r6
 800ad8e:	f7ff fe47 	bl	800aa20 <_Bfree>
 800ad92:	4647      	mov	r7, r8
 800ad94:	106d      	asrs	r5, r5, #1
 800ad96:	d00b      	beq.n	800adb0 <__pow5mult+0xa0>
 800ad98:	6820      	ldr	r0, [r4, #0]
 800ad9a:	b938      	cbnz	r0, 800adac <__pow5mult+0x9c>
 800ad9c:	4622      	mov	r2, r4
 800ad9e:	4621      	mov	r1, r4
 800ada0:	4630      	mov	r0, r6
 800ada2:	f7ff ff0b 	bl	800abbc <__multiply>
 800ada6:	6020      	str	r0, [r4, #0]
 800ada8:	f8c0 9000 	str.w	r9, [r0]
 800adac:	4604      	mov	r4, r0
 800adae:	e7e4      	b.n	800ad7a <__pow5mult+0x6a>
 800adb0:	4638      	mov	r0, r7
 800adb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800adb6:	bf00      	nop
 800adb8:	0800d648 	.word	0x0800d648
 800adbc:	0800d475 	.word	0x0800d475
 800adc0:	0800d4f8 	.word	0x0800d4f8

0800adc4 <__lshift>:
 800adc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800adc8:	460c      	mov	r4, r1
 800adca:	6849      	ldr	r1, [r1, #4]
 800adcc:	6923      	ldr	r3, [r4, #16]
 800adce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800add2:	68a3      	ldr	r3, [r4, #8]
 800add4:	4607      	mov	r7, r0
 800add6:	4691      	mov	r9, r2
 800add8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800addc:	f108 0601 	add.w	r6, r8, #1
 800ade0:	42b3      	cmp	r3, r6
 800ade2:	db0b      	blt.n	800adfc <__lshift+0x38>
 800ade4:	4638      	mov	r0, r7
 800ade6:	f7ff fddb 	bl	800a9a0 <_Balloc>
 800adea:	4605      	mov	r5, r0
 800adec:	b948      	cbnz	r0, 800ae02 <__lshift+0x3e>
 800adee:	4602      	mov	r2, r0
 800adf0:	4b2a      	ldr	r3, [pc, #168]	; (800ae9c <__lshift+0xd8>)
 800adf2:	482b      	ldr	r0, [pc, #172]	; (800aea0 <__lshift+0xdc>)
 800adf4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800adf8:	f000 fbb8 	bl	800b56c <__assert_func>
 800adfc:	3101      	adds	r1, #1
 800adfe:	005b      	lsls	r3, r3, #1
 800ae00:	e7ee      	b.n	800ade0 <__lshift+0x1c>
 800ae02:	2300      	movs	r3, #0
 800ae04:	f100 0114 	add.w	r1, r0, #20
 800ae08:	f100 0210 	add.w	r2, r0, #16
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	4553      	cmp	r3, sl
 800ae10:	db37      	blt.n	800ae82 <__lshift+0xbe>
 800ae12:	6920      	ldr	r0, [r4, #16]
 800ae14:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ae18:	f104 0314 	add.w	r3, r4, #20
 800ae1c:	f019 091f 	ands.w	r9, r9, #31
 800ae20:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ae24:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ae28:	d02f      	beq.n	800ae8a <__lshift+0xc6>
 800ae2a:	f1c9 0e20 	rsb	lr, r9, #32
 800ae2e:	468a      	mov	sl, r1
 800ae30:	f04f 0c00 	mov.w	ip, #0
 800ae34:	681a      	ldr	r2, [r3, #0]
 800ae36:	fa02 f209 	lsl.w	r2, r2, r9
 800ae3a:	ea42 020c 	orr.w	r2, r2, ip
 800ae3e:	f84a 2b04 	str.w	r2, [sl], #4
 800ae42:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae46:	4298      	cmp	r0, r3
 800ae48:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ae4c:	d8f2      	bhi.n	800ae34 <__lshift+0x70>
 800ae4e:	1b03      	subs	r3, r0, r4
 800ae50:	3b15      	subs	r3, #21
 800ae52:	f023 0303 	bic.w	r3, r3, #3
 800ae56:	3304      	adds	r3, #4
 800ae58:	f104 0215 	add.w	r2, r4, #21
 800ae5c:	4290      	cmp	r0, r2
 800ae5e:	bf38      	it	cc
 800ae60:	2304      	movcc	r3, #4
 800ae62:	f841 c003 	str.w	ip, [r1, r3]
 800ae66:	f1bc 0f00 	cmp.w	ip, #0
 800ae6a:	d001      	beq.n	800ae70 <__lshift+0xac>
 800ae6c:	f108 0602 	add.w	r6, r8, #2
 800ae70:	3e01      	subs	r6, #1
 800ae72:	4638      	mov	r0, r7
 800ae74:	612e      	str	r6, [r5, #16]
 800ae76:	4621      	mov	r1, r4
 800ae78:	f7ff fdd2 	bl	800aa20 <_Bfree>
 800ae7c:	4628      	mov	r0, r5
 800ae7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae82:	f842 0f04 	str.w	r0, [r2, #4]!
 800ae86:	3301      	adds	r3, #1
 800ae88:	e7c1      	b.n	800ae0e <__lshift+0x4a>
 800ae8a:	3904      	subs	r1, #4
 800ae8c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae90:	f841 2f04 	str.w	r2, [r1, #4]!
 800ae94:	4298      	cmp	r0, r3
 800ae96:	d8f9      	bhi.n	800ae8c <__lshift+0xc8>
 800ae98:	e7ea      	b.n	800ae70 <__lshift+0xac>
 800ae9a:	bf00      	nop
 800ae9c:	0800d4e7 	.word	0x0800d4e7
 800aea0:	0800d4f8 	.word	0x0800d4f8

0800aea4 <__mcmp>:
 800aea4:	b530      	push	{r4, r5, lr}
 800aea6:	6902      	ldr	r2, [r0, #16]
 800aea8:	690c      	ldr	r4, [r1, #16]
 800aeaa:	1b12      	subs	r2, r2, r4
 800aeac:	d10e      	bne.n	800aecc <__mcmp+0x28>
 800aeae:	f100 0314 	add.w	r3, r0, #20
 800aeb2:	3114      	adds	r1, #20
 800aeb4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800aeb8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800aebc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800aec0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800aec4:	42a5      	cmp	r5, r4
 800aec6:	d003      	beq.n	800aed0 <__mcmp+0x2c>
 800aec8:	d305      	bcc.n	800aed6 <__mcmp+0x32>
 800aeca:	2201      	movs	r2, #1
 800aecc:	4610      	mov	r0, r2
 800aece:	bd30      	pop	{r4, r5, pc}
 800aed0:	4283      	cmp	r3, r0
 800aed2:	d3f3      	bcc.n	800aebc <__mcmp+0x18>
 800aed4:	e7fa      	b.n	800aecc <__mcmp+0x28>
 800aed6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aeda:	e7f7      	b.n	800aecc <__mcmp+0x28>

0800aedc <__mdiff>:
 800aedc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aee0:	460c      	mov	r4, r1
 800aee2:	4606      	mov	r6, r0
 800aee4:	4611      	mov	r1, r2
 800aee6:	4620      	mov	r0, r4
 800aee8:	4690      	mov	r8, r2
 800aeea:	f7ff ffdb 	bl	800aea4 <__mcmp>
 800aeee:	1e05      	subs	r5, r0, #0
 800aef0:	d110      	bne.n	800af14 <__mdiff+0x38>
 800aef2:	4629      	mov	r1, r5
 800aef4:	4630      	mov	r0, r6
 800aef6:	f7ff fd53 	bl	800a9a0 <_Balloc>
 800aefa:	b930      	cbnz	r0, 800af0a <__mdiff+0x2e>
 800aefc:	4b3a      	ldr	r3, [pc, #232]	; (800afe8 <__mdiff+0x10c>)
 800aefe:	4602      	mov	r2, r0
 800af00:	f240 2132 	movw	r1, #562	; 0x232
 800af04:	4839      	ldr	r0, [pc, #228]	; (800afec <__mdiff+0x110>)
 800af06:	f000 fb31 	bl	800b56c <__assert_func>
 800af0a:	2301      	movs	r3, #1
 800af0c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800af10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af14:	bfa4      	itt	ge
 800af16:	4643      	movge	r3, r8
 800af18:	46a0      	movge	r8, r4
 800af1a:	4630      	mov	r0, r6
 800af1c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800af20:	bfa6      	itte	ge
 800af22:	461c      	movge	r4, r3
 800af24:	2500      	movge	r5, #0
 800af26:	2501      	movlt	r5, #1
 800af28:	f7ff fd3a 	bl	800a9a0 <_Balloc>
 800af2c:	b920      	cbnz	r0, 800af38 <__mdiff+0x5c>
 800af2e:	4b2e      	ldr	r3, [pc, #184]	; (800afe8 <__mdiff+0x10c>)
 800af30:	4602      	mov	r2, r0
 800af32:	f44f 7110 	mov.w	r1, #576	; 0x240
 800af36:	e7e5      	b.n	800af04 <__mdiff+0x28>
 800af38:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800af3c:	6926      	ldr	r6, [r4, #16]
 800af3e:	60c5      	str	r5, [r0, #12]
 800af40:	f104 0914 	add.w	r9, r4, #20
 800af44:	f108 0514 	add.w	r5, r8, #20
 800af48:	f100 0e14 	add.w	lr, r0, #20
 800af4c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800af50:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800af54:	f108 0210 	add.w	r2, r8, #16
 800af58:	46f2      	mov	sl, lr
 800af5a:	2100      	movs	r1, #0
 800af5c:	f859 3b04 	ldr.w	r3, [r9], #4
 800af60:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800af64:	fa1f f883 	uxth.w	r8, r3
 800af68:	fa11 f18b 	uxtah	r1, r1, fp
 800af6c:	0c1b      	lsrs	r3, r3, #16
 800af6e:	eba1 0808 	sub.w	r8, r1, r8
 800af72:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800af76:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800af7a:	fa1f f888 	uxth.w	r8, r8
 800af7e:	1419      	asrs	r1, r3, #16
 800af80:	454e      	cmp	r6, r9
 800af82:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800af86:	f84a 3b04 	str.w	r3, [sl], #4
 800af8a:	d8e7      	bhi.n	800af5c <__mdiff+0x80>
 800af8c:	1b33      	subs	r3, r6, r4
 800af8e:	3b15      	subs	r3, #21
 800af90:	f023 0303 	bic.w	r3, r3, #3
 800af94:	3304      	adds	r3, #4
 800af96:	3415      	adds	r4, #21
 800af98:	42a6      	cmp	r6, r4
 800af9a:	bf38      	it	cc
 800af9c:	2304      	movcc	r3, #4
 800af9e:	441d      	add	r5, r3
 800afa0:	4473      	add	r3, lr
 800afa2:	469e      	mov	lr, r3
 800afa4:	462e      	mov	r6, r5
 800afa6:	4566      	cmp	r6, ip
 800afa8:	d30e      	bcc.n	800afc8 <__mdiff+0xec>
 800afaa:	f10c 0203 	add.w	r2, ip, #3
 800afae:	1b52      	subs	r2, r2, r5
 800afb0:	f022 0203 	bic.w	r2, r2, #3
 800afb4:	3d03      	subs	r5, #3
 800afb6:	45ac      	cmp	ip, r5
 800afb8:	bf38      	it	cc
 800afba:	2200      	movcc	r2, #0
 800afbc:	441a      	add	r2, r3
 800afbe:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800afc2:	b17b      	cbz	r3, 800afe4 <__mdiff+0x108>
 800afc4:	6107      	str	r7, [r0, #16]
 800afc6:	e7a3      	b.n	800af10 <__mdiff+0x34>
 800afc8:	f856 8b04 	ldr.w	r8, [r6], #4
 800afcc:	fa11 f288 	uxtah	r2, r1, r8
 800afd0:	1414      	asrs	r4, r2, #16
 800afd2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800afd6:	b292      	uxth	r2, r2
 800afd8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800afdc:	f84e 2b04 	str.w	r2, [lr], #4
 800afe0:	1421      	asrs	r1, r4, #16
 800afe2:	e7e0      	b.n	800afa6 <__mdiff+0xca>
 800afe4:	3f01      	subs	r7, #1
 800afe6:	e7ea      	b.n	800afbe <__mdiff+0xe2>
 800afe8:	0800d4e7 	.word	0x0800d4e7
 800afec:	0800d4f8 	.word	0x0800d4f8

0800aff0 <__d2b>:
 800aff0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aff4:	4689      	mov	r9, r1
 800aff6:	2101      	movs	r1, #1
 800aff8:	ec57 6b10 	vmov	r6, r7, d0
 800affc:	4690      	mov	r8, r2
 800affe:	f7ff fccf 	bl	800a9a0 <_Balloc>
 800b002:	4604      	mov	r4, r0
 800b004:	b930      	cbnz	r0, 800b014 <__d2b+0x24>
 800b006:	4602      	mov	r2, r0
 800b008:	4b25      	ldr	r3, [pc, #148]	; (800b0a0 <__d2b+0xb0>)
 800b00a:	4826      	ldr	r0, [pc, #152]	; (800b0a4 <__d2b+0xb4>)
 800b00c:	f240 310a 	movw	r1, #778	; 0x30a
 800b010:	f000 faac 	bl	800b56c <__assert_func>
 800b014:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b018:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b01c:	bb35      	cbnz	r5, 800b06c <__d2b+0x7c>
 800b01e:	2e00      	cmp	r6, #0
 800b020:	9301      	str	r3, [sp, #4]
 800b022:	d028      	beq.n	800b076 <__d2b+0x86>
 800b024:	4668      	mov	r0, sp
 800b026:	9600      	str	r6, [sp, #0]
 800b028:	f7ff fd82 	bl	800ab30 <__lo0bits>
 800b02c:	9900      	ldr	r1, [sp, #0]
 800b02e:	b300      	cbz	r0, 800b072 <__d2b+0x82>
 800b030:	9a01      	ldr	r2, [sp, #4]
 800b032:	f1c0 0320 	rsb	r3, r0, #32
 800b036:	fa02 f303 	lsl.w	r3, r2, r3
 800b03a:	430b      	orrs	r3, r1
 800b03c:	40c2      	lsrs	r2, r0
 800b03e:	6163      	str	r3, [r4, #20]
 800b040:	9201      	str	r2, [sp, #4]
 800b042:	9b01      	ldr	r3, [sp, #4]
 800b044:	61a3      	str	r3, [r4, #24]
 800b046:	2b00      	cmp	r3, #0
 800b048:	bf14      	ite	ne
 800b04a:	2202      	movne	r2, #2
 800b04c:	2201      	moveq	r2, #1
 800b04e:	6122      	str	r2, [r4, #16]
 800b050:	b1d5      	cbz	r5, 800b088 <__d2b+0x98>
 800b052:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b056:	4405      	add	r5, r0
 800b058:	f8c9 5000 	str.w	r5, [r9]
 800b05c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b060:	f8c8 0000 	str.w	r0, [r8]
 800b064:	4620      	mov	r0, r4
 800b066:	b003      	add	sp, #12
 800b068:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b06c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b070:	e7d5      	b.n	800b01e <__d2b+0x2e>
 800b072:	6161      	str	r1, [r4, #20]
 800b074:	e7e5      	b.n	800b042 <__d2b+0x52>
 800b076:	a801      	add	r0, sp, #4
 800b078:	f7ff fd5a 	bl	800ab30 <__lo0bits>
 800b07c:	9b01      	ldr	r3, [sp, #4]
 800b07e:	6163      	str	r3, [r4, #20]
 800b080:	2201      	movs	r2, #1
 800b082:	6122      	str	r2, [r4, #16]
 800b084:	3020      	adds	r0, #32
 800b086:	e7e3      	b.n	800b050 <__d2b+0x60>
 800b088:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b08c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b090:	f8c9 0000 	str.w	r0, [r9]
 800b094:	6918      	ldr	r0, [r3, #16]
 800b096:	f7ff fd2b 	bl	800aaf0 <__hi0bits>
 800b09a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b09e:	e7df      	b.n	800b060 <__d2b+0x70>
 800b0a0:	0800d4e7 	.word	0x0800d4e7
 800b0a4:	0800d4f8 	.word	0x0800d4f8

0800b0a8 <_calloc_r>:
 800b0a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b0aa:	fba1 2402 	umull	r2, r4, r1, r2
 800b0ae:	b94c      	cbnz	r4, 800b0c4 <_calloc_r+0x1c>
 800b0b0:	4611      	mov	r1, r2
 800b0b2:	9201      	str	r2, [sp, #4]
 800b0b4:	f000 f87a 	bl	800b1ac <_malloc_r>
 800b0b8:	9a01      	ldr	r2, [sp, #4]
 800b0ba:	4605      	mov	r5, r0
 800b0bc:	b930      	cbnz	r0, 800b0cc <_calloc_r+0x24>
 800b0be:	4628      	mov	r0, r5
 800b0c0:	b003      	add	sp, #12
 800b0c2:	bd30      	pop	{r4, r5, pc}
 800b0c4:	220c      	movs	r2, #12
 800b0c6:	6002      	str	r2, [r0, #0]
 800b0c8:	2500      	movs	r5, #0
 800b0ca:	e7f8      	b.n	800b0be <_calloc_r+0x16>
 800b0cc:	4621      	mov	r1, r4
 800b0ce:	f7fe f92b 	bl	8009328 <memset>
 800b0d2:	e7f4      	b.n	800b0be <_calloc_r+0x16>

0800b0d4 <_free_r>:
 800b0d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b0d6:	2900      	cmp	r1, #0
 800b0d8:	d044      	beq.n	800b164 <_free_r+0x90>
 800b0da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b0de:	9001      	str	r0, [sp, #4]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	f1a1 0404 	sub.w	r4, r1, #4
 800b0e6:	bfb8      	it	lt
 800b0e8:	18e4      	addlt	r4, r4, r3
 800b0ea:	f000 fa9b 	bl	800b624 <__malloc_lock>
 800b0ee:	4a1e      	ldr	r2, [pc, #120]	; (800b168 <_free_r+0x94>)
 800b0f0:	9801      	ldr	r0, [sp, #4]
 800b0f2:	6813      	ldr	r3, [r2, #0]
 800b0f4:	b933      	cbnz	r3, 800b104 <_free_r+0x30>
 800b0f6:	6063      	str	r3, [r4, #4]
 800b0f8:	6014      	str	r4, [r2, #0]
 800b0fa:	b003      	add	sp, #12
 800b0fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b100:	f000 ba96 	b.w	800b630 <__malloc_unlock>
 800b104:	42a3      	cmp	r3, r4
 800b106:	d908      	bls.n	800b11a <_free_r+0x46>
 800b108:	6825      	ldr	r5, [r4, #0]
 800b10a:	1961      	adds	r1, r4, r5
 800b10c:	428b      	cmp	r3, r1
 800b10e:	bf01      	itttt	eq
 800b110:	6819      	ldreq	r1, [r3, #0]
 800b112:	685b      	ldreq	r3, [r3, #4]
 800b114:	1949      	addeq	r1, r1, r5
 800b116:	6021      	streq	r1, [r4, #0]
 800b118:	e7ed      	b.n	800b0f6 <_free_r+0x22>
 800b11a:	461a      	mov	r2, r3
 800b11c:	685b      	ldr	r3, [r3, #4]
 800b11e:	b10b      	cbz	r3, 800b124 <_free_r+0x50>
 800b120:	42a3      	cmp	r3, r4
 800b122:	d9fa      	bls.n	800b11a <_free_r+0x46>
 800b124:	6811      	ldr	r1, [r2, #0]
 800b126:	1855      	adds	r5, r2, r1
 800b128:	42a5      	cmp	r5, r4
 800b12a:	d10b      	bne.n	800b144 <_free_r+0x70>
 800b12c:	6824      	ldr	r4, [r4, #0]
 800b12e:	4421      	add	r1, r4
 800b130:	1854      	adds	r4, r2, r1
 800b132:	42a3      	cmp	r3, r4
 800b134:	6011      	str	r1, [r2, #0]
 800b136:	d1e0      	bne.n	800b0fa <_free_r+0x26>
 800b138:	681c      	ldr	r4, [r3, #0]
 800b13a:	685b      	ldr	r3, [r3, #4]
 800b13c:	6053      	str	r3, [r2, #4]
 800b13e:	4421      	add	r1, r4
 800b140:	6011      	str	r1, [r2, #0]
 800b142:	e7da      	b.n	800b0fa <_free_r+0x26>
 800b144:	d902      	bls.n	800b14c <_free_r+0x78>
 800b146:	230c      	movs	r3, #12
 800b148:	6003      	str	r3, [r0, #0]
 800b14a:	e7d6      	b.n	800b0fa <_free_r+0x26>
 800b14c:	6825      	ldr	r5, [r4, #0]
 800b14e:	1961      	adds	r1, r4, r5
 800b150:	428b      	cmp	r3, r1
 800b152:	bf04      	itt	eq
 800b154:	6819      	ldreq	r1, [r3, #0]
 800b156:	685b      	ldreq	r3, [r3, #4]
 800b158:	6063      	str	r3, [r4, #4]
 800b15a:	bf04      	itt	eq
 800b15c:	1949      	addeq	r1, r1, r5
 800b15e:	6021      	streq	r1, [r4, #0]
 800b160:	6054      	str	r4, [r2, #4]
 800b162:	e7ca      	b.n	800b0fa <_free_r+0x26>
 800b164:	b003      	add	sp, #12
 800b166:	bd30      	pop	{r4, r5, pc}
 800b168:	20002000 	.word	0x20002000

0800b16c <sbrk_aligned>:
 800b16c:	b570      	push	{r4, r5, r6, lr}
 800b16e:	4e0e      	ldr	r6, [pc, #56]	; (800b1a8 <sbrk_aligned+0x3c>)
 800b170:	460c      	mov	r4, r1
 800b172:	6831      	ldr	r1, [r6, #0]
 800b174:	4605      	mov	r5, r0
 800b176:	b911      	cbnz	r1, 800b17e <sbrk_aligned+0x12>
 800b178:	f000 f9e8 	bl	800b54c <_sbrk_r>
 800b17c:	6030      	str	r0, [r6, #0]
 800b17e:	4621      	mov	r1, r4
 800b180:	4628      	mov	r0, r5
 800b182:	f000 f9e3 	bl	800b54c <_sbrk_r>
 800b186:	1c43      	adds	r3, r0, #1
 800b188:	d00a      	beq.n	800b1a0 <sbrk_aligned+0x34>
 800b18a:	1cc4      	adds	r4, r0, #3
 800b18c:	f024 0403 	bic.w	r4, r4, #3
 800b190:	42a0      	cmp	r0, r4
 800b192:	d007      	beq.n	800b1a4 <sbrk_aligned+0x38>
 800b194:	1a21      	subs	r1, r4, r0
 800b196:	4628      	mov	r0, r5
 800b198:	f000 f9d8 	bl	800b54c <_sbrk_r>
 800b19c:	3001      	adds	r0, #1
 800b19e:	d101      	bne.n	800b1a4 <sbrk_aligned+0x38>
 800b1a0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b1a4:	4620      	mov	r0, r4
 800b1a6:	bd70      	pop	{r4, r5, r6, pc}
 800b1a8:	20002004 	.word	0x20002004

0800b1ac <_malloc_r>:
 800b1ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1b0:	1ccd      	adds	r5, r1, #3
 800b1b2:	f025 0503 	bic.w	r5, r5, #3
 800b1b6:	3508      	adds	r5, #8
 800b1b8:	2d0c      	cmp	r5, #12
 800b1ba:	bf38      	it	cc
 800b1bc:	250c      	movcc	r5, #12
 800b1be:	2d00      	cmp	r5, #0
 800b1c0:	4607      	mov	r7, r0
 800b1c2:	db01      	blt.n	800b1c8 <_malloc_r+0x1c>
 800b1c4:	42a9      	cmp	r1, r5
 800b1c6:	d905      	bls.n	800b1d4 <_malloc_r+0x28>
 800b1c8:	230c      	movs	r3, #12
 800b1ca:	603b      	str	r3, [r7, #0]
 800b1cc:	2600      	movs	r6, #0
 800b1ce:	4630      	mov	r0, r6
 800b1d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1d4:	4e2e      	ldr	r6, [pc, #184]	; (800b290 <_malloc_r+0xe4>)
 800b1d6:	f000 fa25 	bl	800b624 <__malloc_lock>
 800b1da:	6833      	ldr	r3, [r6, #0]
 800b1dc:	461c      	mov	r4, r3
 800b1de:	bb34      	cbnz	r4, 800b22e <_malloc_r+0x82>
 800b1e0:	4629      	mov	r1, r5
 800b1e2:	4638      	mov	r0, r7
 800b1e4:	f7ff ffc2 	bl	800b16c <sbrk_aligned>
 800b1e8:	1c43      	adds	r3, r0, #1
 800b1ea:	4604      	mov	r4, r0
 800b1ec:	d14d      	bne.n	800b28a <_malloc_r+0xde>
 800b1ee:	6834      	ldr	r4, [r6, #0]
 800b1f0:	4626      	mov	r6, r4
 800b1f2:	2e00      	cmp	r6, #0
 800b1f4:	d140      	bne.n	800b278 <_malloc_r+0xcc>
 800b1f6:	6823      	ldr	r3, [r4, #0]
 800b1f8:	4631      	mov	r1, r6
 800b1fa:	4638      	mov	r0, r7
 800b1fc:	eb04 0803 	add.w	r8, r4, r3
 800b200:	f000 f9a4 	bl	800b54c <_sbrk_r>
 800b204:	4580      	cmp	r8, r0
 800b206:	d13a      	bne.n	800b27e <_malloc_r+0xd2>
 800b208:	6821      	ldr	r1, [r4, #0]
 800b20a:	3503      	adds	r5, #3
 800b20c:	1a6d      	subs	r5, r5, r1
 800b20e:	f025 0503 	bic.w	r5, r5, #3
 800b212:	3508      	adds	r5, #8
 800b214:	2d0c      	cmp	r5, #12
 800b216:	bf38      	it	cc
 800b218:	250c      	movcc	r5, #12
 800b21a:	4629      	mov	r1, r5
 800b21c:	4638      	mov	r0, r7
 800b21e:	f7ff ffa5 	bl	800b16c <sbrk_aligned>
 800b222:	3001      	adds	r0, #1
 800b224:	d02b      	beq.n	800b27e <_malloc_r+0xd2>
 800b226:	6823      	ldr	r3, [r4, #0]
 800b228:	442b      	add	r3, r5
 800b22a:	6023      	str	r3, [r4, #0]
 800b22c:	e00e      	b.n	800b24c <_malloc_r+0xa0>
 800b22e:	6822      	ldr	r2, [r4, #0]
 800b230:	1b52      	subs	r2, r2, r5
 800b232:	d41e      	bmi.n	800b272 <_malloc_r+0xc6>
 800b234:	2a0b      	cmp	r2, #11
 800b236:	d916      	bls.n	800b266 <_malloc_r+0xba>
 800b238:	1961      	adds	r1, r4, r5
 800b23a:	42a3      	cmp	r3, r4
 800b23c:	6025      	str	r5, [r4, #0]
 800b23e:	bf18      	it	ne
 800b240:	6059      	strne	r1, [r3, #4]
 800b242:	6863      	ldr	r3, [r4, #4]
 800b244:	bf08      	it	eq
 800b246:	6031      	streq	r1, [r6, #0]
 800b248:	5162      	str	r2, [r4, r5]
 800b24a:	604b      	str	r3, [r1, #4]
 800b24c:	4638      	mov	r0, r7
 800b24e:	f104 060b 	add.w	r6, r4, #11
 800b252:	f000 f9ed 	bl	800b630 <__malloc_unlock>
 800b256:	f026 0607 	bic.w	r6, r6, #7
 800b25a:	1d23      	adds	r3, r4, #4
 800b25c:	1af2      	subs	r2, r6, r3
 800b25e:	d0b6      	beq.n	800b1ce <_malloc_r+0x22>
 800b260:	1b9b      	subs	r3, r3, r6
 800b262:	50a3      	str	r3, [r4, r2]
 800b264:	e7b3      	b.n	800b1ce <_malloc_r+0x22>
 800b266:	6862      	ldr	r2, [r4, #4]
 800b268:	42a3      	cmp	r3, r4
 800b26a:	bf0c      	ite	eq
 800b26c:	6032      	streq	r2, [r6, #0]
 800b26e:	605a      	strne	r2, [r3, #4]
 800b270:	e7ec      	b.n	800b24c <_malloc_r+0xa0>
 800b272:	4623      	mov	r3, r4
 800b274:	6864      	ldr	r4, [r4, #4]
 800b276:	e7b2      	b.n	800b1de <_malloc_r+0x32>
 800b278:	4634      	mov	r4, r6
 800b27a:	6876      	ldr	r6, [r6, #4]
 800b27c:	e7b9      	b.n	800b1f2 <_malloc_r+0x46>
 800b27e:	230c      	movs	r3, #12
 800b280:	603b      	str	r3, [r7, #0]
 800b282:	4638      	mov	r0, r7
 800b284:	f000 f9d4 	bl	800b630 <__malloc_unlock>
 800b288:	e7a1      	b.n	800b1ce <_malloc_r+0x22>
 800b28a:	6025      	str	r5, [r4, #0]
 800b28c:	e7de      	b.n	800b24c <_malloc_r+0xa0>
 800b28e:	bf00      	nop
 800b290:	20002000 	.word	0x20002000

0800b294 <__ssputs_r>:
 800b294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b298:	688e      	ldr	r6, [r1, #8]
 800b29a:	429e      	cmp	r6, r3
 800b29c:	4682      	mov	sl, r0
 800b29e:	460c      	mov	r4, r1
 800b2a0:	4690      	mov	r8, r2
 800b2a2:	461f      	mov	r7, r3
 800b2a4:	d838      	bhi.n	800b318 <__ssputs_r+0x84>
 800b2a6:	898a      	ldrh	r2, [r1, #12]
 800b2a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b2ac:	d032      	beq.n	800b314 <__ssputs_r+0x80>
 800b2ae:	6825      	ldr	r5, [r4, #0]
 800b2b0:	6909      	ldr	r1, [r1, #16]
 800b2b2:	eba5 0901 	sub.w	r9, r5, r1
 800b2b6:	6965      	ldr	r5, [r4, #20]
 800b2b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b2bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b2c0:	3301      	adds	r3, #1
 800b2c2:	444b      	add	r3, r9
 800b2c4:	106d      	asrs	r5, r5, #1
 800b2c6:	429d      	cmp	r5, r3
 800b2c8:	bf38      	it	cc
 800b2ca:	461d      	movcc	r5, r3
 800b2cc:	0553      	lsls	r3, r2, #21
 800b2ce:	d531      	bpl.n	800b334 <__ssputs_r+0xa0>
 800b2d0:	4629      	mov	r1, r5
 800b2d2:	f7ff ff6b 	bl	800b1ac <_malloc_r>
 800b2d6:	4606      	mov	r6, r0
 800b2d8:	b950      	cbnz	r0, 800b2f0 <__ssputs_r+0x5c>
 800b2da:	230c      	movs	r3, #12
 800b2dc:	f8ca 3000 	str.w	r3, [sl]
 800b2e0:	89a3      	ldrh	r3, [r4, #12]
 800b2e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2e6:	81a3      	strh	r3, [r4, #12]
 800b2e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b2ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2f0:	6921      	ldr	r1, [r4, #16]
 800b2f2:	464a      	mov	r2, r9
 800b2f4:	f7ff fb46 	bl	800a984 <memcpy>
 800b2f8:	89a3      	ldrh	r3, [r4, #12]
 800b2fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b2fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b302:	81a3      	strh	r3, [r4, #12]
 800b304:	6126      	str	r6, [r4, #16]
 800b306:	6165      	str	r5, [r4, #20]
 800b308:	444e      	add	r6, r9
 800b30a:	eba5 0509 	sub.w	r5, r5, r9
 800b30e:	6026      	str	r6, [r4, #0]
 800b310:	60a5      	str	r5, [r4, #8]
 800b312:	463e      	mov	r6, r7
 800b314:	42be      	cmp	r6, r7
 800b316:	d900      	bls.n	800b31a <__ssputs_r+0x86>
 800b318:	463e      	mov	r6, r7
 800b31a:	6820      	ldr	r0, [r4, #0]
 800b31c:	4632      	mov	r2, r6
 800b31e:	4641      	mov	r1, r8
 800b320:	f000 f966 	bl	800b5f0 <memmove>
 800b324:	68a3      	ldr	r3, [r4, #8]
 800b326:	1b9b      	subs	r3, r3, r6
 800b328:	60a3      	str	r3, [r4, #8]
 800b32a:	6823      	ldr	r3, [r4, #0]
 800b32c:	4433      	add	r3, r6
 800b32e:	6023      	str	r3, [r4, #0]
 800b330:	2000      	movs	r0, #0
 800b332:	e7db      	b.n	800b2ec <__ssputs_r+0x58>
 800b334:	462a      	mov	r2, r5
 800b336:	f000 f981 	bl	800b63c <_realloc_r>
 800b33a:	4606      	mov	r6, r0
 800b33c:	2800      	cmp	r0, #0
 800b33e:	d1e1      	bne.n	800b304 <__ssputs_r+0x70>
 800b340:	6921      	ldr	r1, [r4, #16]
 800b342:	4650      	mov	r0, sl
 800b344:	f7ff fec6 	bl	800b0d4 <_free_r>
 800b348:	e7c7      	b.n	800b2da <__ssputs_r+0x46>
	...

0800b34c <_svfiprintf_r>:
 800b34c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b350:	4698      	mov	r8, r3
 800b352:	898b      	ldrh	r3, [r1, #12]
 800b354:	061b      	lsls	r3, r3, #24
 800b356:	b09d      	sub	sp, #116	; 0x74
 800b358:	4607      	mov	r7, r0
 800b35a:	460d      	mov	r5, r1
 800b35c:	4614      	mov	r4, r2
 800b35e:	d50e      	bpl.n	800b37e <_svfiprintf_r+0x32>
 800b360:	690b      	ldr	r3, [r1, #16]
 800b362:	b963      	cbnz	r3, 800b37e <_svfiprintf_r+0x32>
 800b364:	2140      	movs	r1, #64	; 0x40
 800b366:	f7ff ff21 	bl	800b1ac <_malloc_r>
 800b36a:	6028      	str	r0, [r5, #0]
 800b36c:	6128      	str	r0, [r5, #16]
 800b36e:	b920      	cbnz	r0, 800b37a <_svfiprintf_r+0x2e>
 800b370:	230c      	movs	r3, #12
 800b372:	603b      	str	r3, [r7, #0]
 800b374:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b378:	e0d1      	b.n	800b51e <_svfiprintf_r+0x1d2>
 800b37a:	2340      	movs	r3, #64	; 0x40
 800b37c:	616b      	str	r3, [r5, #20]
 800b37e:	2300      	movs	r3, #0
 800b380:	9309      	str	r3, [sp, #36]	; 0x24
 800b382:	2320      	movs	r3, #32
 800b384:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b388:	f8cd 800c 	str.w	r8, [sp, #12]
 800b38c:	2330      	movs	r3, #48	; 0x30
 800b38e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b538 <_svfiprintf_r+0x1ec>
 800b392:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b396:	f04f 0901 	mov.w	r9, #1
 800b39a:	4623      	mov	r3, r4
 800b39c:	469a      	mov	sl, r3
 800b39e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b3a2:	b10a      	cbz	r2, 800b3a8 <_svfiprintf_r+0x5c>
 800b3a4:	2a25      	cmp	r2, #37	; 0x25
 800b3a6:	d1f9      	bne.n	800b39c <_svfiprintf_r+0x50>
 800b3a8:	ebba 0b04 	subs.w	fp, sl, r4
 800b3ac:	d00b      	beq.n	800b3c6 <_svfiprintf_r+0x7a>
 800b3ae:	465b      	mov	r3, fp
 800b3b0:	4622      	mov	r2, r4
 800b3b2:	4629      	mov	r1, r5
 800b3b4:	4638      	mov	r0, r7
 800b3b6:	f7ff ff6d 	bl	800b294 <__ssputs_r>
 800b3ba:	3001      	adds	r0, #1
 800b3bc:	f000 80aa 	beq.w	800b514 <_svfiprintf_r+0x1c8>
 800b3c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b3c2:	445a      	add	r2, fp
 800b3c4:	9209      	str	r2, [sp, #36]	; 0x24
 800b3c6:	f89a 3000 	ldrb.w	r3, [sl]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	f000 80a2 	beq.w	800b514 <_svfiprintf_r+0x1c8>
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b3d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b3da:	f10a 0a01 	add.w	sl, sl, #1
 800b3de:	9304      	str	r3, [sp, #16]
 800b3e0:	9307      	str	r3, [sp, #28]
 800b3e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b3e6:	931a      	str	r3, [sp, #104]	; 0x68
 800b3e8:	4654      	mov	r4, sl
 800b3ea:	2205      	movs	r2, #5
 800b3ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3f0:	4851      	ldr	r0, [pc, #324]	; (800b538 <_svfiprintf_r+0x1ec>)
 800b3f2:	f7f4 fefd 	bl	80001f0 <memchr>
 800b3f6:	9a04      	ldr	r2, [sp, #16]
 800b3f8:	b9d8      	cbnz	r0, 800b432 <_svfiprintf_r+0xe6>
 800b3fa:	06d0      	lsls	r0, r2, #27
 800b3fc:	bf44      	itt	mi
 800b3fe:	2320      	movmi	r3, #32
 800b400:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b404:	0711      	lsls	r1, r2, #28
 800b406:	bf44      	itt	mi
 800b408:	232b      	movmi	r3, #43	; 0x2b
 800b40a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b40e:	f89a 3000 	ldrb.w	r3, [sl]
 800b412:	2b2a      	cmp	r3, #42	; 0x2a
 800b414:	d015      	beq.n	800b442 <_svfiprintf_r+0xf6>
 800b416:	9a07      	ldr	r2, [sp, #28]
 800b418:	4654      	mov	r4, sl
 800b41a:	2000      	movs	r0, #0
 800b41c:	f04f 0c0a 	mov.w	ip, #10
 800b420:	4621      	mov	r1, r4
 800b422:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b426:	3b30      	subs	r3, #48	; 0x30
 800b428:	2b09      	cmp	r3, #9
 800b42a:	d94e      	bls.n	800b4ca <_svfiprintf_r+0x17e>
 800b42c:	b1b0      	cbz	r0, 800b45c <_svfiprintf_r+0x110>
 800b42e:	9207      	str	r2, [sp, #28]
 800b430:	e014      	b.n	800b45c <_svfiprintf_r+0x110>
 800b432:	eba0 0308 	sub.w	r3, r0, r8
 800b436:	fa09 f303 	lsl.w	r3, r9, r3
 800b43a:	4313      	orrs	r3, r2
 800b43c:	9304      	str	r3, [sp, #16]
 800b43e:	46a2      	mov	sl, r4
 800b440:	e7d2      	b.n	800b3e8 <_svfiprintf_r+0x9c>
 800b442:	9b03      	ldr	r3, [sp, #12]
 800b444:	1d19      	adds	r1, r3, #4
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	9103      	str	r1, [sp, #12]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	bfbb      	ittet	lt
 800b44e:	425b      	neglt	r3, r3
 800b450:	f042 0202 	orrlt.w	r2, r2, #2
 800b454:	9307      	strge	r3, [sp, #28]
 800b456:	9307      	strlt	r3, [sp, #28]
 800b458:	bfb8      	it	lt
 800b45a:	9204      	strlt	r2, [sp, #16]
 800b45c:	7823      	ldrb	r3, [r4, #0]
 800b45e:	2b2e      	cmp	r3, #46	; 0x2e
 800b460:	d10c      	bne.n	800b47c <_svfiprintf_r+0x130>
 800b462:	7863      	ldrb	r3, [r4, #1]
 800b464:	2b2a      	cmp	r3, #42	; 0x2a
 800b466:	d135      	bne.n	800b4d4 <_svfiprintf_r+0x188>
 800b468:	9b03      	ldr	r3, [sp, #12]
 800b46a:	1d1a      	adds	r2, r3, #4
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	9203      	str	r2, [sp, #12]
 800b470:	2b00      	cmp	r3, #0
 800b472:	bfb8      	it	lt
 800b474:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b478:	3402      	adds	r4, #2
 800b47a:	9305      	str	r3, [sp, #20]
 800b47c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b548 <_svfiprintf_r+0x1fc>
 800b480:	7821      	ldrb	r1, [r4, #0]
 800b482:	2203      	movs	r2, #3
 800b484:	4650      	mov	r0, sl
 800b486:	f7f4 feb3 	bl	80001f0 <memchr>
 800b48a:	b140      	cbz	r0, 800b49e <_svfiprintf_r+0x152>
 800b48c:	2340      	movs	r3, #64	; 0x40
 800b48e:	eba0 000a 	sub.w	r0, r0, sl
 800b492:	fa03 f000 	lsl.w	r0, r3, r0
 800b496:	9b04      	ldr	r3, [sp, #16]
 800b498:	4303      	orrs	r3, r0
 800b49a:	3401      	adds	r4, #1
 800b49c:	9304      	str	r3, [sp, #16]
 800b49e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4a2:	4826      	ldr	r0, [pc, #152]	; (800b53c <_svfiprintf_r+0x1f0>)
 800b4a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b4a8:	2206      	movs	r2, #6
 800b4aa:	f7f4 fea1 	bl	80001f0 <memchr>
 800b4ae:	2800      	cmp	r0, #0
 800b4b0:	d038      	beq.n	800b524 <_svfiprintf_r+0x1d8>
 800b4b2:	4b23      	ldr	r3, [pc, #140]	; (800b540 <_svfiprintf_r+0x1f4>)
 800b4b4:	bb1b      	cbnz	r3, 800b4fe <_svfiprintf_r+0x1b2>
 800b4b6:	9b03      	ldr	r3, [sp, #12]
 800b4b8:	3307      	adds	r3, #7
 800b4ba:	f023 0307 	bic.w	r3, r3, #7
 800b4be:	3308      	adds	r3, #8
 800b4c0:	9303      	str	r3, [sp, #12]
 800b4c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4c4:	4433      	add	r3, r6
 800b4c6:	9309      	str	r3, [sp, #36]	; 0x24
 800b4c8:	e767      	b.n	800b39a <_svfiprintf_r+0x4e>
 800b4ca:	fb0c 3202 	mla	r2, ip, r2, r3
 800b4ce:	460c      	mov	r4, r1
 800b4d0:	2001      	movs	r0, #1
 800b4d2:	e7a5      	b.n	800b420 <_svfiprintf_r+0xd4>
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	3401      	adds	r4, #1
 800b4d8:	9305      	str	r3, [sp, #20]
 800b4da:	4619      	mov	r1, r3
 800b4dc:	f04f 0c0a 	mov.w	ip, #10
 800b4e0:	4620      	mov	r0, r4
 800b4e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b4e6:	3a30      	subs	r2, #48	; 0x30
 800b4e8:	2a09      	cmp	r2, #9
 800b4ea:	d903      	bls.n	800b4f4 <_svfiprintf_r+0x1a8>
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d0c5      	beq.n	800b47c <_svfiprintf_r+0x130>
 800b4f0:	9105      	str	r1, [sp, #20]
 800b4f2:	e7c3      	b.n	800b47c <_svfiprintf_r+0x130>
 800b4f4:	fb0c 2101 	mla	r1, ip, r1, r2
 800b4f8:	4604      	mov	r4, r0
 800b4fa:	2301      	movs	r3, #1
 800b4fc:	e7f0      	b.n	800b4e0 <_svfiprintf_r+0x194>
 800b4fe:	ab03      	add	r3, sp, #12
 800b500:	9300      	str	r3, [sp, #0]
 800b502:	462a      	mov	r2, r5
 800b504:	4b0f      	ldr	r3, [pc, #60]	; (800b544 <_svfiprintf_r+0x1f8>)
 800b506:	a904      	add	r1, sp, #16
 800b508:	4638      	mov	r0, r7
 800b50a:	f7fd ffb5 	bl	8009478 <_printf_float>
 800b50e:	1c42      	adds	r2, r0, #1
 800b510:	4606      	mov	r6, r0
 800b512:	d1d6      	bne.n	800b4c2 <_svfiprintf_r+0x176>
 800b514:	89ab      	ldrh	r3, [r5, #12]
 800b516:	065b      	lsls	r3, r3, #25
 800b518:	f53f af2c 	bmi.w	800b374 <_svfiprintf_r+0x28>
 800b51c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b51e:	b01d      	add	sp, #116	; 0x74
 800b520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b524:	ab03      	add	r3, sp, #12
 800b526:	9300      	str	r3, [sp, #0]
 800b528:	462a      	mov	r2, r5
 800b52a:	4b06      	ldr	r3, [pc, #24]	; (800b544 <_svfiprintf_r+0x1f8>)
 800b52c:	a904      	add	r1, sp, #16
 800b52e:	4638      	mov	r0, r7
 800b530:	f7fe fa46 	bl	80099c0 <_printf_i>
 800b534:	e7eb      	b.n	800b50e <_svfiprintf_r+0x1c2>
 800b536:	bf00      	nop
 800b538:	0800d654 	.word	0x0800d654
 800b53c:	0800d65e 	.word	0x0800d65e
 800b540:	08009479 	.word	0x08009479
 800b544:	0800b295 	.word	0x0800b295
 800b548:	0800d65a 	.word	0x0800d65a

0800b54c <_sbrk_r>:
 800b54c:	b538      	push	{r3, r4, r5, lr}
 800b54e:	4d06      	ldr	r5, [pc, #24]	; (800b568 <_sbrk_r+0x1c>)
 800b550:	2300      	movs	r3, #0
 800b552:	4604      	mov	r4, r0
 800b554:	4608      	mov	r0, r1
 800b556:	602b      	str	r3, [r5, #0]
 800b558:	f7f6 fb44 	bl	8001be4 <_sbrk>
 800b55c:	1c43      	adds	r3, r0, #1
 800b55e:	d102      	bne.n	800b566 <_sbrk_r+0x1a>
 800b560:	682b      	ldr	r3, [r5, #0]
 800b562:	b103      	cbz	r3, 800b566 <_sbrk_r+0x1a>
 800b564:	6023      	str	r3, [r4, #0]
 800b566:	bd38      	pop	{r3, r4, r5, pc}
 800b568:	20002008 	.word	0x20002008

0800b56c <__assert_func>:
 800b56c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b56e:	4614      	mov	r4, r2
 800b570:	461a      	mov	r2, r3
 800b572:	4b09      	ldr	r3, [pc, #36]	; (800b598 <__assert_func+0x2c>)
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	4605      	mov	r5, r0
 800b578:	68d8      	ldr	r0, [r3, #12]
 800b57a:	b14c      	cbz	r4, 800b590 <__assert_func+0x24>
 800b57c:	4b07      	ldr	r3, [pc, #28]	; (800b59c <__assert_func+0x30>)
 800b57e:	9100      	str	r1, [sp, #0]
 800b580:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b584:	4906      	ldr	r1, [pc, #24]	; (800b5a0 <__assert_func+0x34>)
 800b586:	462b      	mov	r3, r5
 800b588:	f000 f80e 	bl	800b5a8 <fiprintf>
 800b58c:	f000 faac 	bl	800bae8 <abort>
 800b590:	4b04      	ldr	r3, [pc, #16]	; (800b5a4 <__assert_func+0x38>)
 800b592:	461c      	mov	r4, r3
 800b594:	e7f3      	b.n	800b57e <__assert_func+0x12>
 800b596:	bf00      	nop
 800b598:	200000fc 	.word	0x200000fc
 800b59c:	0800d665 	.word	0x0800d665
 800b5a0:	0800d672 	.word	0x0800d672
 800b5a4:	0800d6a0 	.word	0x0800d6a0

0800b5a8 <fiprintf>:
 800b5a8:	b40e      	push	{r1, r2, r3}
 800b5aa:	b503      	push	{r0, r1, lr}
 800b5ac:	4601      	mov	r1, r0
 800b5ae:	ab03      	add	r3, sp, #12
 800b5b0:	4805      	ldr	r0, [pc, #20]	; (800b5c8 <fiprintf+0x20>)
 800b5b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5b6:	6800      	ldr	r0, [r0, #0]
 800b5b8:	9301      	str	r3, [sp, #4]
 800b5ba:	f000 f897 	bl	800b6ec <_vfiprintf_r>
 800b5be:	b002      	add	sp, #8
 800b5c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b5c4:	b003      	add	sp, #12
 800b5c6:	4770      	bx	lr
 800b5c8:	200000fc 	.word	0x200000fc

0800b5cc <__ascii_mbtowc>:
 800b5cc:	b082      	sub	sp, #8
 800b5ce:	b901      	cbnz	r1, 800b5d2 <__ascii_mbtowc+0x6>
 800b5d0:	a901      	add	r1, sp, #4
 800b5d2:	b142      	cbz	r2, 800b5e6 <__ascii_mbtowc+0x1a>
 800b5d4:	b14b      	cbz	r3, 800b5ea <__ascii_mbtowc+0x1e>
 800b5d6:	7813      	ldrb	r3, [r2, #0]
 800b5d8:	600b      	str	r3, [r1, #0]
 800b5da:	7812      	ldrb	r2, [r2, #0]
 800b5dc:	1e10      	subs	r0, r2, #0
 800b5de:	bf18      	it	ne
 800b5e0:	2001      	movne	r0, #1
 800b5e2:	b002      	add	sp, #8
 800b5e4:	4770      	bx	lr
 800b5e6:	4610      	mov	r0, r2
 800b5e8:	e7fb      	b.n	800b5e2 <__ascii_mbtowc+0x16>
 800b5ea:	f06f 0001 	mvn.w	r0, #1
 800b5ee:	e7f8      	b.n	800b5e2 <__ascii_mbtowc+0x16>

0800b5f0 <memmove>:
 800b5f0:	4288      	cmp	r0, r1
 800b5f2:	b510      	push	{r4, lr}
 800b5f4:	eb01 0402 	add.w	r4, r1, r2
 800b5f8:	d902      	bls.n	800b600 <memmove+0x10>
 800b5fa:	4284      	cmp	r4, r0
 800b5fc:	4623      	mov	r3, r4
 800b5fe:	d807      	bhi.n	800b610 <memmove+0x20>
 800b600:	1e43      	subs	r3, r0, #1
 800b602:	42a1      	cmp	r1, r4
 800b604:	d008      	beq.n	800b618 <memmove+0x28>
 800b606:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b60a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b60e:	e7f8      	b.n	800b602 <memmove+0x12>
 800b610:	4402      	add	r2, r0
 800b612:	4601      	mov	r1, r0
 800b614:	428a      	cmp	r2, r1
 800b616:	d100      	bne.n	800b61a <memmove+0x2a>
 800b618:	bd10      	pop	{r4, pc}
 800b61a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b61e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b622:	e7f7      	b.n	800b614 <memmove+0x24>

0800b624 <__malloc_lock>:
 800b624:	4801      	ldr	r0, [pc, #4]	; (800b62c <__malloc_lock+0x8>)
 800b626:	f000 bc1f 	b.w	800be68 <__retarget_lock_acquire_recursive>
 800b62a:	bf00      	nop
 800b62c:	2000200c 	.word	0x2000200c

0800b630 <__malloc_unlock>:
 800b630:	4801      	ldr	r0, [pc, #4]	; (800b638 <__malloc_unlock+0x8>)
 800b632:	f000 bc1a 	b.w	800be6a <__retarget_lock_release_recursive>
 800b636:	bf00      	nop
 800b638:	2000200c 	.word	0x2000200c

0800b63c <_realloc_r>:
 800b63c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b640:	4680      	mov	r8, r0
 800b642:	4614      	mov	r4, r2
 800b644:	460e      	mov	r6, r1
 800b646:	b921      	cbnz	r1, 800b652 <_realloc_r+0x16>
 800b648:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b64c:	4611      	mov	r1, r2
 800b64e:	f7ff bdad 	b.w	800b1ac <_malloc_r>
 800b652:	b92a      	cbnz	r2, 800b660 <_realloc_r+0x24>
 800b654:	f7ff fd3e 	bl	800b0d4 <_free_r>
 800b658:	4625      	mov	r5, r4
 800b65a:	4628      	mov	r0, r5
 800b65c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b660:	f000 fc6a 	bl	800bf38 <_malloc_usable_size_r>
 800b664:	4284      	cmp	r4, r0
 800b666:	4607      	mov	r7, r0
 800b668:	d802      	bhi.n	800b670 <_realloc_r+0x34>
 800b66a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b66e:	d812      	bhi.n	800b696 <_realloc_r+0x5a>
 800b670:	4621      	mov	r1, r4
 800b672:	4640      	mov	r0, r8
 800b674:	f7ff fd9a 	bl	800b1ac <_malloc_r>
 800b678:	4605      	mov	r5, r0
 800b67a:	2800      	cmp	r0, #0
 800b67c:	d0ed      	beq.n	800b65a <_realloc_r+0x1e>
 800b67e:	42bc      	cmp	r4, r7
 800b680:	4622      	mov	r2, r4
 800b682:	4631      	mov	r1, r6
 800b684:	bf28      	it	cs
 800b686:	463a      	movcs	r2, r7
 800b688:	f7ff f97c 	bl	800a984 <memcpy>
 800b68c:	4631      	mov	r1, r6
 800b68e:	4640      	mov	r0, r8
 800b690:	f7ff fd20 	bl	800b0d4 <_free_r>
 800b694:	e7e1      	b.n	800b65a <_realloc_r+0x1e>
 800b696:	4635      	mov	r5, r6
 800b698:	e7df      	b.n	800b65a <_realloc_r+0x1e>

0800b69a <__sfputc_r>:
 800b69a:	6893      	ldr	r3, [r2, #8]
 800b69c:	3b01      	subs	r3, #1
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	b410      	push	{r4}
 800b6a2:	6093      	str	r3, [r2, #8]
 800b6a4:	da08      	bge.n	800b6b8 <__sfputc_r+0x1e>
 800b6a6:	6994      	ldr	r4, [r2, #24]
 800b6a8:	42a3      	cmp	r3, r4
 800b6aa:	db01      	blt.n	800b6b0 <__sfputc_r+0x16>
 800b6ac:	290a      	cmp	r1, #10
 800b6ae:	d103      	bne.n	800b6b8 <__sfputc_r+0x1e>
 800b6b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b6b4:	f000 b94a 	b.w	800b94c <__swbuf_r>
 800b6b8:	6813      	ldr	r3, [r2, #0]
 800b6ba:	1c58      	adds	r0, r3, #1
 800b6bc:	6010      	str	r0, [r2, #0]
 800b6be:	7019      	strb	r1, [r3, #0]
 800b6c0:	4608      	mov	r0, r1
 800b6c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b6c6:	4770      	bx	lr

0800b6c8 <__sfputs_r>:
 800b6c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6ca:	4606      	mov	r6, r0
 800b6cc:	460f      	mov	r7, r1
 800b6ce:	4614      	mov	r4, r2
 800b6d0:	18d5      	adds	r5, r2, r3
 800b6d2:	42ac      	cmp	r4, r5
 800b6d4:	d101      	bne.n	800b6da <__sfputs_r+0x12>
 800b6d6:	2000      	movs	r0, #0
 800b6d8:	e007      	b.n	800b6ea <__sfputs_r+0x22>
 800b6da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6de:	463a      	mov	r2, r7
 800b6e0:	4630      	mov	r0, r6
 800b6e2:	f7ff ffda 	bl	800b69a <__sfputc_r>
 800b6e6:	1c43      	adds	r3, r0, #1
 800b6e8:	d1f3      	bne.n	800b6d2 <__sfputs_r+0xa>
 800b6ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b6ec <_vfiprintf_r>:
 800b6ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6f0:	460d      	mov	r5, r1
 800b6f2:	b09d      	sub	sp, #116	; 0x74
 800b6f4:	4614      	mov	r4, r2
 800b6f6:	4698      	mov	r8, r3
 800b6f8:	4606      	mov	r6, r0
 800b6fa:	b118      	cbz	r0, 800b704 <_vfiprintf_r+0x18>
 800b6fc:	6983      	ldr	r3, [r0, #24]
 800b6fe:	b90b      	cbnz	r3, 800b704 <_vfiprintf_r+0x18>
 800b700:	f000 fb14 	bl	800bd2c <__sinit>
 800b704:	4b89      	ldr	r3, [pc, #548]	; (800b92c <_vfiprintf_r+0x240>)
 800b706:	429d      	cmp	r5, r3
 800b708:	d11b      	bne.n	800b742 <_vfiprintf_r+0x56>
 800b70a:	6875      	ldr	r5, [r6, #4]
 800b70c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b70e:	07d9      	lsls	r1, r3, #31
 800b710:	d405      	bmi.n	800b71e <_vfiprintf_r+0x32>
 800b712:	89ab      	ldrh	r3, [r5, #12]
 800b714:	059a      	lsls	r2, r3, #22
 800b716:	d402      	bmi.n	800b71e <_vfiprintf_r+0x32>
 800b718:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b71a:	f000 fba5 	bl	800be68 <__retarget_lock_acquire_recursive>
 800b71e:	89ab      	ldrh	r3, [r5, #12]
 800b720:	071b      	lsls	r3, r3, #28
 800b722:	d501      	bpl.n	800b728 <_vfiprintf_r+0x3c>
 800b724:	692b      	ldr	r3, [r5, #16]
 800b726:	b9eb      	cbnz	r3, 800b764 <_vfiprintf_r+0x78>
 800b728:	4629      	mov	r1, r5
 800b72a:	4630      	mov	r0, r6
 800b72c:	f000 f96e 	bl	800ba0c <__swsetup_r>
 800b730:	b1c0      	cbz	r0, 800b764 <_vfiprintf_r+0x78>
 800b732:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b734:	07dc      	lsls	r4, r3, #31
 800b736:	d50e      	bpl.n	800b756 <_vfiprintf_r+0x6a>
 800b738:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b73c:	b01d      	add	sp, #116	; 0x74
 800b73e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b742:	4b7b      	ldr	r3, [pc, #492]	; (800b930 <_vfiprintf_r+0x244>)
 800b744:	429d      	cmp	r5, r3
 800b746:	d101      	bne.n	800b74c <_vfiprintf_r+0x60>
 800b748:	68b5      	ldr	r5, [r6, #8]
 800b74a:	e7df      	b.n	800b70c <_vfiprintf_r+0x20>
 800b74c:	4b79      	ldr	r3, [pc, #484]	; (800b934 <_vfiprintf_r+0x248>)
 800b74e:	429d      	cmp	r5, r3
 800b750:	bf08      	it	eq
 800b752:	68f5      	ldreq	r5, [r6, #12]
 800b754:	e7da      	b.n	800b70c <_vfiprintf_r+0x20>
 800b756:	89ab      	ldrh	r3, [r5, #12]
 800b758:	0598      	lsls	r0, r3, #22
 800b75a:	d4ed      	bmi.n	800b738 <_vfiprintf_r+0x4c>
 800b75c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b75e:	f000 fb84 	bl	800be6a <__retarget_lock_release_recursive>
 800b762:	e7e9      	b.n	800b738 <_vfiprintf_r+0x4c>
 800b764:	2300      	movs	r3, #0
 800b766:	9309      	str	r3, [sp, #36]	; 0x24
 800b768:	2320      	movs	r3, #32
 800b76a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b76e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b772:	2330      	movs	r3, #48	; 0x30
 800b774:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b938 <_vfiprintf_r+0x24c>
 800b778:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b77c:	f04f 0901 	mov.w	r9, #1
 800b780:	4623      	mov	r3, r4
 800b782:	469a      	mov	sl, r3
 800b784:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b788:	b10a      	cbz	r2, 800b78e <_vfiprintf_r+0xa2>
 800b78a:	2a25      	cmp	r2, #37	; 0x25
 800b78c:	d1f9      	bne.n	800b782 <_vfiprintf_r+0x96>
 800b78e:	ebba 0b04 	subs.w	fp, sl, r4
 800b792:	d00b      	beq.n	800b7ac <_vfiprintf_r+0xc0>
 800b794:	465b      	mov	r3, fp
 800b796:	4622      	mov	r2, r4
 800b798:	4629      	mov	r1, r5
 800b79a:	4630      	mov	r0, r6
 800b79c:	f7ff ff94 	bl	800b6c8 <__sfputs_r>
 800b7a0:	3001      	adds	r0, #1
 800b7a2:	f000 80aa 	beq.w	800b8fa <_vfiprintf_r+0x20e>
 800b7a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b7a8:	445a      	add	r2, fp
 800b7aa:	9209      	str	r2, [sp, #36]	; 0x24
 800b7ac:	f89a 3000 	ldrb.w	r3, [sl]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	f000 80a2 	beq.w	800b8fa <_vfiprintf_r+0x20e>
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b7bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b7c0:	f10a 0a01 	add.w	sl, sl, #1
 800b7c4:	9304      	str	r3, [sp, #16]
 800b7c6:	9307      	str	r3, [sp, #28]
 800b7c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b7cc:	931a      	str	r3, [sp, #104]	; 0x68
 800b7ce:	4654      	mov	r4, sl
 800b7d0:	2205      	movs	r2, #5
 800b7d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7d6:	4858      	ldr	r0, [pc, #352]	; (800b938 <_vfiprintf_r+0x24c>)
 800b7d8:	f7f4 fd0a 	bl	80001f0 <memchr>
 800b7dc:	9a04      	ldr	r2, [sp, #16]
 800b7de:	b9d8      	cbnz	r0, 800b818 <_vfiprintf_r+0x12c>
 800b7e0:	06d1      	lsls	r1, r2, #27
 800b7e2:	bf44      	itt	mi
 800b7e4:	2320      	movmi	r3, #32
 800b7e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7ea:	0713      	lsls	r3, r2, #28
 800b7ec:	bf44      	itt	mi
 800b7ee:	232b      	movmi	r3, #43	; 0x2b
 800b7f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7f4:	f89a 3000 	ldrb.w	r3, [sl]
 800b7f8:	2b2a      	cmp	r3, #42	; 0x2a
 800b7fa:	d015      	beq.n	800b828 <_vfiprintf_r+0x13c>
 800b7fc:	9a07      	ldr	r2, [sp, #28]
 800b7fe:	4654      	mov	r4, sl
 800b800:	2000      	movs	r0, #0
 800b802:	f04f 0c0a 	mov.w	ip, #10
 800b806:	4621      	mov	r1, r4
 800b808:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b80c:	3b30      	subs	r3, #48	; 0x30
 800b80e:	2b09      	cmp	r3, #9
 800b810:	d94e      	bls.n	800b8b0 <_vfiprintf_r+0x1c4>
 800b812:	b1b0      	cbz	r0, 800b842 <_vfiprintf_r+0x156>
 800b814:	9207      	str	r2, [sp, #28]
 800b816:	e014      	b.n	800b842 <_vfiprintf_r+0x156>
 800b818:	eba0 0308 	sub.w	r3, r0, r8
 800b81c:	fa09 f303 	lsl.w	r3, r9, r3
 800b820:	4313      	orrs	r3, r2
 800b822:	9304      	str	r3, [sp, #16]
 800b824:	46a2      	mov	sl, r4
 800b826:	e7d2      	b.n	800b7ce <_vfiprintf_r+0xe2>
 800b828:	9b03      	ldr	r3, [sp, #12]
 800b82a:	1d19      	adds	r1, r3, #4
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	9103      	str	r1, [sp, #12]
 800b830:	2b00      	cmp	r3, #0
 800b832:	bfbb      	ittet	lt
 800b834:	425b      	neglt	r3, r3
 800b836:	f042 0202 	orrlt.w	r2, r2, #2
 800b83a:	9307      	strge	r3, [sp, #28]
 800b83c:	9307      	strlt	r3, [sp, #28]
 800b83e:	bfb8      	it	lt
 800b840:	9204      	strlt	r2, [sp, #16]
 800b842:	7823      	ldrb	r3, [r4, #0]
 800b844:	2b2e      	cmp	r3, #46	; 0x2e
 800b846:	d10c      	bne.n	800b862 <_vfiprintf_r+0x176>
 800b848:	7863      	ldrb	r3, [r4, #1]
 800b84a:	2b2a      	cmp	r3, #42	; 0x2a
 800b84c:	d135      	bne.n	800b8ba <_vfiprintf_r+0x1ce>
 800b84e:	9b03      	ldr	r3, [sp, #12]
 800b850:	1d1a      	adds	r2, r3, #4
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	9203      	str	r2, [sp, #12]
 800b856:	2b00      	cmp	r3, #0
 800b858:	bfb8      	it	lt
 800b85a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b85e:	3402      	adds	r4, #2
 800b860:	9305      	str	r3, [sp, #20]
 800b862:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b948 <_vfiprintf_r+0x25c>
 800b866:	7821      	ldrb	r1, [r4, #0]
 800b868:	2203      	movs	r2, #3
 800b86a:	4650      	mov	r0, sl
 800b86c:	f7f4 fcc0 	bl	80001f0 <memchr>
 800b870:	b140      	cbz	r0, 800b884 <_vfiprintf_r+0x198>
 800b872:	2340      	movs	r3, #64	; 0x40
 800b874:	eba0 000a 	sub.w	r0, r0, sl
 800b878:	fa03 f000 	lsl.w	r0, r3, r0
 800b87c:	9b04      	ldr	r3, [sp, #16]
 800b87e:	4303      	orrs	r3, r0
 800b880:	3401      	adds	r4, #1
 800b882:	9304      	str	r3, [sp, #16]
 800b884:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b888:	482c      	ldr	r0, [pc, #176]	; (800b93c <_vfiprintf_r+0x250>)
 800b88a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b88e:	2206      	movs	r2, #6
 800b890:	f7f4 fcae 	bl	80001f0 <memchr>
 800b894:	2800      	cmp	r0, #0
 800b896:	d03f      	beq.n	800b918 <_vfiprintf_r+0x22c>
 800b898:	4b29      	ldr	r3, [pc, #164]	; (800b940 <_vfiprintf_r+0x254>)
 800b89a:	bb1b      	cbnz	r3, 800b8e4 <_vfiprintf_r+0x1f8>
 800b89c:	9b03      	ldr	r3, [sp, #12]
 800b89e:	3307      	adds	r3, #7
 800b8a0:	f023 0307 	bic.w	r3, r3, #7
 800b8a4:	3308      	adds	r3, #8
 800b8a6:	9303      	str	r3, [sp, #12]
 800b8a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8aa:	443b      	add	r3, r7
 800b8ac:	9309      	str	r3, [sp, #36]	; 0x24
 800b8ae:	e767      	b.n	800b780 <_vfiprintf_r+0x94>
 800b8b0:	fb0c 3202 	mla	r2, ip, r2, r3
 800b8b4:	460c      	mov	r4, r1
 800b8b6:	2001      	movs	r0, #1
 800b8b8:	e7a5      	b.n	800b806 <_vfiprintf_r+0x11a>
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	3401      	adds	r4, #1
 800b8be:	9305      	str	r3, [sp, #20]
 800b8c0:	4619      	mov	r1, r3
 800b8c2:	f04f 0c0a 	mov.w	ip, #10
 800b8c6:	4620      	mov	r0, r4
 800b8c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b8cc:	3a30      	subs	r2, #48	; 0x30
 800b8ce:	2a09      	cmp	r2, #9
 800b8d0:	d903      	bls.n	800b8da <_vfiprintf_r+0x1ee>
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d0c5      	beq.n	800b862 <_vfiprintf_r+0x176>
 800b8d6:	9105      	str	r1, [sp, #20]
 800b8d8:	e7c3      	b.n	800b862 <_vfiprintf_r+0x176>
 800b8da:	fb0c 2101 	mla	r1, ip, r1, r2
 800b8de:	4604      	mov	r4, r0
 800b8e0:	2301      	movs	r3, #1
 800b8e2:	e7f0      	b.n	800b8c6 <_vfiprintf_r+0x1da>
 800b8e4:	ab03      	add	r3, sp, #12
 800b8e6:	9300      	str	r3, [sp, #0]
 800b8e8:	462a      	mov	r2, r5
 800b8ea:	4b16      	ldr	r3, [pc, #88]	; (800b944 <_vfiprintf_r+0x258>)
 800b8ec:	a904      	add	r1, sp, #16
 800b8ee:	4630      	mov	r0, r6
 800b8f0:	f7fd fdc2 	bl	8009478 <_printf_float>
 800b8f4:	4607      	mov	r7, r0
 800b8f6:	1c78      	adds	r0, r7, #1
 800b8f8:	d1d6      	bne.n	800b8a8 <_vfiprintf_r+0x1bc>
 800b8fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b8fc:	07d9      	lsls	r1, r3, #31
 800b8fe:	d405      	bmi.n	800b90c <_vfiprintf_r+0x220>
 800b900:	89ab      	ldrh	r3, [r5, #12]
 800b902:	059a      	lsls	r2, r3, #22
 800b904:	d402      	bmi.n	800b90c <_vfiprintf_r+0x220>
 800b906:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b908:	f000 faaf 	bl	800be6a <__retarget_lock_release_recursive>
 800b90c:	89ab      	ldrh	r3, [r5, #12]
 800b90e:	065b      	lsls	r3, r3, #25
 800b910:	f53f af12 	bmi.w	800b738 <_vfiprintf_r+0x4c>
 800b914:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b916:	e711      	b.n	800b73c <_vfiprintf_r+0x50>
 800b918:	ab03      	add	r3, sp, #12
 800b91a:	9300      	str	r3, [sp, #0]
 800b91c:	462a      	mov	r2, r5
 800b91e:	4b09      	ldr	r3, [pc, #36]	; (800b944 <_vfiprintf_r+0x258>)
 800b920:	a904      	add	r1, sp, #16
 800b922:	4630      	mov	r0, r6
 800b924:	f7fe f84c 	bl	80099c0 <_printf_i>
 800b928:	e7e4      	b.n	800b8f4 <_vfiprintf_r+0x208>
 800b92a:	bf00      	nop
 800b92c:	0800d7cc 	.word	0x0800d7cc
 800b930:	0800d7ec 	.word	0x0800d7ec
 800b934:	0800d7ac 	.word	0x0800d7ac
 800b938:	0800d654 	.word	0x0800d654
 800b93c:	0800d65e 	.word	0x0800d65e
 800b940:	08009479 	.word	0x08009479
 800b944:	0800b6c9 	.word	0x0800b6c9
 800b948:	0800d65a 	.word	0x0800d65a

0800b94c <__swbuf_r>:
 800b94c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b94e:	460e      	mov	r6, r1
 800b950:	4614      	mov	r4, r2
 800b952:	4605      	mov	r5, r0
 800b954:	b118      	cbz	r0, 800b95e <__swbuf_r+0x12>
 800b956:	6983      	ldr	r3, [r0, #24]
 800b958:	b90b      	cbnz	r3, 800b95e <__swbuf_r+0x12>
 800b95a:	f000 f9e7 	bl	800bd2c <__sinit>
 800b95e:	4b21      	ldr	r3, [pc, #132]	; (800b9e4 <__swbuf_r+0x98>)
 800b960:	429c      	cmp	r4, r3
 800b962:	d12b      	bne.n	800b9bc <__swbuf_r+0x70>
 800b964:	686c      	ldr	r4, [r5, #4]
 800b966:	69a3      	ldr	r3, [r4, #24]
 800b968:	60a3      	str	r3, [r4, #8]
 800b96a:	89a3      	ldrh	r3, [r4, #12]
 800b96c:	071a      	lsls	r2, r3, #28
 800b96e:	d52f      	bpl.n	800b9d0 <__swbuf_r+0x84>
 800b970:	6923      	ldr	r3, [r4, #16]
 800b972:	b36b      	cbz	r3, 800b9d0 <__swbuf_r+0x84>
 800b974:	6923      	ldr	r3, [r4, #16]
 800b976:	6820      	ldr	r0, [r4, #0]
 800b978:	1ac0      	subs	r0, r0, r3
 800b97a:	6963      	ldr	r3, [r4, #20]
 800b97c:	b2f6      	uxtb	r6, r6
 800b97e:	4283      	cmp	r3, r0
 800b980:	4637      	mov	r7, r6
 800b982:	dc04      	bgt.n	800b98e <__swbuf_r+0x42>
 800b984:	4621      	mov	r1, r4
 800b986:	4628      	mov	r0, r5
 800b988:	f000 f93c 	bl	800bc04 <_fflush_r>
 800b98c:	bb30      	cbnz	r0, 800b9dc <__swbuf_r+0x90>
 800b98e:	68a3      	ldr	r3, [r4, #8]
 800b990:	3b01      	subs	r3, #1
 800b992:	60a3      	str	r3, [r4, #8]
 800b994:	6823      	ldr	r3, [r4, #0]
 800b996:	1c5a      	adds	r2, r3, #1
 800b998:	6022      	str	r2, [r4, #0]
 800b99a:	701e      	strb	r6, [r3, #0]
 800b99c:	6963      	ldr	r3, [r4, #20]
 800b99e:	3001      	adds	r0, #1
 800b9a0:	4283      	cmp	r3, r0
 800b9a2:	d004      	beq.n	800b9ae <__swbuf_r+0x62>
 800b9a4:	89a3      	ldrh	r3, [r4, #12]
 800b9a6:	07db      	lsls	r3, r3, #31
 800b9a8:	d506      	bpl.n	800b9b8 <__swbuf_r+0x6c>
 800b9aa:	2e0a      	cmp	r6, #10
 800b9ac:	d104      	bne.n	800b9b8 <__swbuf_r+0x6c>
 800b9ae:	4621      	mov	r1, r4
 800b9b0:	4628      	mov	r0, r5
 800b9b2:	f000 f927 	bl	800bc04 <_fflush_r>
 800b9b6:	b988      	cbnz	r0, 800b9dc <__swbuf_r+0x90>
 800b9b8:	4638      	mov	r0, r7
 800b9ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b9bc:	4b0a      	ldr	r3, [pc, #40]	; (800b9e8 <__swbuf_r+0x9c>)
 800b9be:	429c      	cmp	r4, r3
 800b9c0:	d101      	bne.n	800b9c6 <__swbuf_r+0x7a>
 800b9c2:	68ac      	ldr	r4, [r5, #8]
 800b9c4:	e7cf      	b.n	800b966 <__swbuf_r+0x1a>
 800b9c6:	4b09      	ldr	r3, [pc, #36]	; (800b9ec <__swbuf_r+0xa0>)
 800b9c8:	429c      	cmp	r4, r3
 800b9ca:	bf08      	it	eq
 800b9cc:	68ec      	ldreq	r4, [r5, #12]
 800b9ce:	e7ca      	b.n	800b966 <__swbuf_r+0x1a>
 800b9d0:	4621      	mov	r1, r4
 800b9d2:	4628      	mov	r0, r5
 800b9d4:	f000 f81a 	bl	800ba0c <__swsetup_r>
 800b9d8:	2800      	cmp	r0, #0
 800b9da:	d0cb      	beq.n	800b974 <__swbuf_r+0x28>
 800b9dc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b9e0:	e7ea      	b.n	800b9b8 <__swbuf_r+0x6c>
 800b9e2:	bf00      	nop
 800b9e4:	0800d7cc 	.word	0x0800d7cc
 800b9e8:	0800d7ec 	.word	0x0800d7ec
 800b9ec:	0800d7ac 	.word	0x0800d7ac

0800b9f0 <__ascii_wctomb>:
 800b9f0:	b149      	cbz	r1, 800ba06 <__ascii_wctomb+0x16>
 800b9f2:	2aff      	cmp	r2, #255	; 0xff
 800b9f4:	bf85      	ittet	hi
 800b9f6:	238a      	movhi	r3, #138	; 0x8a
 800b9f8:	6003      	strhi	r3, [r0, #0]
 800b9fa:	700a      	strbls	r2, [r1, #0]
 800b9fc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800ba00:	bf98      	it	ls
 800ba02:	2001      	movls	r0, #1
 800ba04:	4770      	bx	lr
 800ba06:	4608      	mov	r0, r1
 800ba08:	4770      	bx	lr
	...

0800ba0c <__swsetup_r>:
 800ba0c:	4b32      	ldr	r3, [pc, #200]	; (800bad8 <__swsetup_r+0xcc>)
 800ba0e:	b570      	push	{r4, r5, r6, lr}
 800ba10:	681d      	ldr	r5, [r3, #0]
 800ba12:	4606      	mov	r6, r0
 800ba14:	460c      	mov	r4, r1
 800ba16:	b125      	cbz	r5, 800ba22 <__swsetup_r+0x16>
 800ba18:	69ab      	ldr	r3, [r5, #24]
 800ba1a:	b913      	cbnz	r3, 800ba22 <__swsetup_r+0x16>
 800ba1c:	4628      	mov	r0, r5
 800ba1e:	f000 f985 	bl	800bd2c <__sinit>
 800ba22:	4b2e      	ldr	r3, [pc, #184]	; (800badc <__swsetup_r+0xd0>)
 800ba24:	429c      	cmp	r4, r3
 800ba26:	d10f      	bne.n	800ba48 <__swsetup_r+0x3c>
 800ba28:	686c      	ldr	r4, [r5, #4]
 800ba2a:	89a3      	ldrh	r3, [r4, #12]
 800ba2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ba30:	0719      	lsls	r1, r3, #28
 800ba32:	d42c      	bmi.n	800ba8e <__swsetup_r+0x82>
 800ba34:	06dd      	lsls	r5, r3, #27
 800ba36:	d411      	bmi.n	800ba5c <__swsetup_r+0x50>
 800ba38:	2309      	movs	r3, #9
 800ba3a:	6033      	str	r3, [r6, #0]
 800ba3c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ba40:	81a3      	strh	r3, [r4, #12]
 800ba42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ba46:	e03e      	b.n	800bac6 <__swsetup_r+0xba>
 800ba48:	4b25      	ldr	r3, [pc, #148]	; (800bae0 <__swsetup_r+0xd4>)
 800ba4a:	429c      	cmp	r4, r3
 800ba4c:	d101      	bne.n	800ba52 <__swsetup_r+0x46>
 800ba4e:	68ac      	ldr	r4, [r5, #8]
 800ba50:	e7eb      	b.n	800ba2a <__swsetup_r+0x1e>
 800ba52:	4b24      	ldr	r3, [pc, #144]	; (800bae4 <__swsetup_r+0xd8>)
 800ba54:	429c      	cmp	r4, r3
 800ba56:	bf08      	it	eq
 800ba58:	68ec      	ldreq	r4, [r5, #12]
 800ba5a:	e7e6      	b.n	800ba2a <__swsetup_r+0x1e>
 800ba5c:	0758      	lsls	r0, r3, #29
 800ba5e:	d512      	bpl.n	800ba86 <__swsetup_r+0x7a>
 800ba60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ba62:	b141      	cbz	r1, 800ba76 <__swsetup_r+0x6a>
 800ba64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ba68:	4299      	cmp	r1, r3
 800ba6a:	d002      	beq.n	800ba72 <__swsetup_r+0x66>
 800ba6c:	4630      	mov	r0, r6
 800ba6e:	f7ff fb31 	bl	800b0d4 <_free_r>
 800ba72:	2300      	movs	r3, #0
 800ba74:	6363      	str	r3, [r4, #52]	; 0x34
 800ba76:	89a3      	ldrh	r3, [r4, #12]
 800ba78:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ba7c:	81a3      	strh	r3, [r4, #12]
 800ba7e:	2300      	movs	r3, #0
 800ba80:	6063      	str	r3, [r4, #4]
 800ba82:	6923      	ldr	r3, [r4, #16]
 800ba84:	6023      	str	r3, [r4, #0]
 800ba86:	89a3      	ldrh	r3, [r4, #12]
 800ba88:	f043 0308 	orr.w	r3, r3, #8
 800ba8c:	81a3      	strh	r3, [r4, #12]
 800ba8e:	6923      	ldr	r3, [r4, #16]
 800ba90:	b94b      	cbnz	r3, 800baa6 <__swsetup_r+0x9a>
 800ba92:	89a3      	ldrh	r3, [r4, #12]
 800ba94:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ba98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ba9c:	d003      	beq.n	800baa6 <__swsetup_r+0x9a>
 800ba9e:	4621      	mov	r1, r4
 800baa0:	4630      	mov	r0, r6
 800baa2:	f000 fa09 	bl	800beb8 <__smakebuf_r>
 800baa6:	89a0      	ldrh	r0, [r4, #12]
 800baa8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800baac:	f010 0301 	ands.w	r3, r0, #1
 800bab0:	d00a      	beq.n	800bac8 <__swsetup_r+0xbc>
 800bab2:	2300      	movs	r3, #0
 800bab4:	60a3      	str	r3, [r4, #8]
 800bab6:	6963      	ldr	r3, [r4, #20]
 800bab8:	425b      	negs	r3, r3
 800baba:	61a3      	str	r3, [r4, #24]
 800babc:	6923      	ldr	r3, [r4, #16]
 800babe:	b943      	cbnz	r3, 800bad2 <__swsetup_r+0xc6>
 800bac0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bac4:	d1ba      	bne.n	800ba3c <__swsetup_r+0x30>
 800bac6:	bd70      	pop	{r4, r5, r6, pc}
 800bac8:	0781      	lsls	r1, r0, #30
 800baca:	bf58      	it	pl
 800bacc:	6963      	ldrpl	r3, [r4, #20]
 800bace:	60a3      	str	r3, [r4, #8]
 800bad0:	e7f4      	b.n	800babc <__swsetup_r+0xb0>
 800bad2:	2000      	movs	r0, #0
 800bad4:	e7f7      	b.n	800bac6 <__swsetup_r+0xba>
 800bad6:	bf00      	nop
 800bad8:	200000fc 	.word	0x200000fc
 800badc:	0800d7cc 	.word	0x0800d7cc
 800bae0:	0800d7ec 	.word	0x0800d7ec
 800bae4:	0800d7ac 	.word	0x0800d7ac

0800bae8 <abort>:
 800bae8:	b508      	push	{r3, lr}
 800baea:	2006      	movs	r0, #6
 800baec:	f000 fa54 	bl	800bf98 <raise>
 800baf0:	2001      	movs	r0, #1
 800baf2:	f7f5 ffff 	bl	8001af4 <_exit>
	...

0800baf8 <__sflush_r>:
 800baf8:	898a      	ldrh	r2, [r1, #12]
 800bafa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bafe:	4605      	mov	r5, r0
 800bb00:	0710      	lsls	r0, r2, #28
 800bb02:	460c      	mov	r4, r1
 800bb04:	d458      	bmi.n	800bbb8 <__sflush_r+0xc0>
 800bb06:	684b      	ldr	r3, [r1, #4]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	dc05      	bgt.n	800bb18 <__sflush_r+0x20>
 800bb0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	dc02      	bgt.n	800bb18 <__sflush_r+0x20>
 800bb12:	2000      	movs	r0, #0
 800bb14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bb1a:	2e00      	cmp	r6, #0
 800bb1c:	d0f9      	beq.n	800bb12 <__sflush_r+0x1a>
 800bb1e:	2300      	movs	r3, #0
 800bb20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bb24:	682f      	ldr	r7, [r5, #0]
 800bb26:	602b      	str	r3, [r5, #0]
 800bb28:	d032      	beq.n	800bb90 <__sflush_r+0x98>
 800bb2a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bb2c:	89a3      	ldrh	r3, [r4, #12]
 800bb2e:	075a      	lsls	r2, r3, #29
 800bb30:	d505      	bpl.n	800bb3e <__sflush_r+0x46>
 800bb32:	6863      	ldr	r3, [r4, #4]
 800bb34:	1ac0      	subs	r0, r0, r3
 800bb36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bb38:	b10b      	cbz	r3, 800bb3e <__sflush_r+0x46>
 800bb3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bb3c:	1ac0      	subs	r0, r0, r3
 800bb3e:	2300      	movs	r3, #0
 800bb40:	4602      	mov	r2, r0
 800bb42:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bb44:	6a21      	ldr	r1, [r4, #32]
 800bb46:	4628      	mov	r0, r5
 800bb48:	47b0      	blx	r6
 800bb4a:	1c43      	adds	r3, r0, #1
 800bb4c:	89a3      	ldrh	r3, [r4, #12]
 800bb4e:	d106      	bne.n	800bb5e <__sflush_r+0x66>
 800bb50:	6829      	ldr	r1, [r5, #0]
 800bb52:	291d      	cmp	r1, #29
 800bb54:	d82c      	bhi.n	800bbb0 <__sflush_r+0xb8>
 800bb56:	4a2a      	ldr	r2, [pc, #168]	; (800bc00 <__sflush_r+0x108>)
 800bb58:	40ca      	lsrs	r2, r1
 800bb5a:	07d6      	lsls	r6, r2, #31
 800bb5c:	d528      	bpl.n	800bbb0 <__sflush_r+0xb8>
 800bb5e:	2200      	movs	r2, #0
 800bb60:	6062      	str	r2, [r4, #4]
 800bb62:	04d9      	lsls	r1, r3, #19
 800bb64:	6922      	ldr	r2, [r4, #16]
 800bb66:	6022      	str	r2, [r4, #0]
 800bb68:	d504      	bpl.n	800bb74 <__sflush_r+0x7c>
 800bb6a:	1c42      	adds	r2, r0, #1
 800bb6c:	d101      	bne.n	800bb72 <__sflush_r+0x7a>
 800bb6e:	682b      	ldr	r3, [r5, #0]
 800bb70:	b903      	cbnz	r3, 800bb74 <__sflush_r+0x7c>
 800bb72:	6560      	str	r0, [r4, #84]	; 0x54
 800bb74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bb76:	602f      	str	r7, [r5, #0]
 800bb78:	2900      	cmp	r1, #0
 800bb7a:	d0ca      	beq.n	800bb12 <__sflush_r+0x1a>
 800bb7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bb80:	4299      	cmp	r1, r3
 800bb82:	d002      	beq.n	800bb8a <__sflush_r+0x92>
 800bb84:	4628      	mov	r0, r5
 800bb86:	f7ff faa5 	bl	800b0d4 <_free_r>
 800bb8a:	2000      	movs	r0, #0
 800bb8c:	6360      	str	r0, [r4, #52]	; 0x34
 800bb8e:	e7c1      	b.n	800bb14 <__sflush_r+0x1c>
 800bb90:	6a21      	ldr	r1, [r4, #32]
 800bb92:	2301      	movs	r3, #1
 800bb94:	4628      	mov	r0, r5
 800bb96:	47b0      	blx	r6
 800bb98:	1c41      	adds	r1, r0, #1
 800bb9a:	d1c7      	bne.n	800bb2c <__sflush_r+0x34>
 800bb9c:	682b      	ldr	r3, [r5, #0]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d0c4      	beq.n	800bb2c <__sflush_r+0x34>
 800bba2:	2b1d      	cmp	r3, #29
 800bba4:	d001      	beq.n	800bbaa <__sflush_r+0xb2>
 800bba6:	2b16      	cmp	r3, #22
 800bba8:	d101      	bne.n	800bbae <__sflush_r+0xb6>
 800bbaa:	602f      	str	r7, [r5, #0]
 800bbac:	e7b1      	b.n	800bb12 <__sflush_r+0x1a>
 800bbae:	89a3      	ldrh	r3, [r4, #12]
 800bbb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bbb4:	81a3      	strh	r3, [r4, #12]
 800bbb6:	e7ad      	b.n	800bb14 <__sflush_r+0x1c>
 800bbb8:	690f      	ldr	r7, [r1, #16]
 800bbba:	2f00      	cmp	r7, #0
 800bbbc:	d0a9      	beq.n	800bb12 <__sflush_r+0x1a>
 800bbbe:	0793      	lsls	r3, r2, #30
 800bbc0:	680e      	ldr	r6, [r1, #0]
 800bbc2:	bf08      	it	eq
 800bbc4:	694b      	ldreq	r3, [r1, #20]
 800bbc6:	600f      	str	r7, [r1, #0]
 800bbc8:	bf18      	it	ne
 800bbca:	2300      	movne	r3, #0
 800bbcc:	eba6 0807 	sub.w	r8, r6, r7
 800bbd0:	608b      	str	r3, [r1, #8]
 800bbd2:	f1b8 0f00 	cmp.w	r8, #0
 800bbd6:	dd9c      	ble.n	800bb12 <__sflush_r+0x1a>
 800bbd8:	6a21      	ldr	r1, [r4, #32]
 800bbda:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bbdc:	4643      	mov	r3, r8
 800bbde:	463a      	mov	r2, r7
 800bbe0:	4628      	mov	r0, r5
 800bbe2:	47b0      	blx	r6
 800bbe4:	2800      	cmp	r0, #0
 800bbe6:	dc06      	bgt.n	800bbf6 <__sflush_r+0xfe>
 800bbe8:	89a3      	ldrh	r3, [r4, #12]
 800bbea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bbee:	81a3      	strh	r3, [r4, #12]
 800bbf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bbf4:	e78e      	b.n	800bb14 <__sflush_r+0x1c>
 800bbf6:	4407      	add	r7, r0
 800bbf8:	eba8 0800 	sub.w	r8, r8, r0
 800bbfc:	e7e9      	b.n	800bbd2 <__sflush_r+0xda>
 800bbfe:	bf00      	nop
 800bc00:	20400001 	.word	0x20400001

0800bc04 <_fflush_r>:
 800bc04:	b538      	push	{r3, r4, r5, lr}
 800bc06:	690b      	ldr	r3, [r1, #16]
 800bc08:	4605      	mov	r5, r0
 800bc0a:	460c      	mov	r4, r1
 800bc0c:	b913      	cbnz	r3, 800bc14 <_fflush_r+0x10>
 800bc0e:	2500      	movs	r5, #0
 800bc10:	4628      	mov	r0, r5
 800bc12:	bd38      	pop	{r3, r4, r5, pc}
 800bc14:	b118      	cbz	r0, 800bc1e <_fflush_r+0x1a>
 800bc16:	6983      	ldr	r3, [r0, #24]
 800bc18:	b90b      	cbnz	r3, 800bc1e <_fflush_r+0x1a>
 800bc1a:	f000 f887 	bl	800bd2c <__sinit>
 800bc1e:	4b14      	ldr	r3, [pc, #80]	; (800bc70 <_fflush_r+0x6c>)
 800bc20:	429c      	cmp	r4, r3
 800bc22:	d11b      	bne.n	800bc5c <_fflush_r+0x58>
 800bc24:	686c      	ldr	r4, [r5, #4]
 800bc26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d0ef      	beq.n	800bc0e <_fflush_r+0xa>
 800bc2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bc30:	07d0      	lsls	r0, r2, #31
 800bc32:	d404      	bmi.n	800bc3e <_fflush_r+0x3a>
 800bc34:	0599      	lsls	r1, r3, #22
 800bc36:	d402      	bmi.n	800bc3e <_fflush_r+0x3a>
 800bc38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc3a:	f000 f915 	bl	800be68 <__retarget_lock_acquire_recursive>
 800bc3e:	4628      	mov	r0, r5
 800bc40:	4621      	mov	r1, r4
 800bc42:	f7ff ff59 	bl	800baf8 <__sflush_r>
 800bc46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bc48:	07da      	lsls	r2, r3, #31
 800bc4a:	4605      	mov	r5, r0
 800bc4c:	d4e0      	bmi.n	800bc10 <_fflush_r+0xc>
 800bc4e:	89a3      	ldrh	r3, [r4, #12]
 800bc50:	059b      	lsls	r3, r3, #22
 800bc52:	d4dd      	bmi.n	800bc10 <_fflush_r+0xc>
 800bc54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc56:	f000 f908 	bl	800be6a <__retarget_lock_release_recursive>
 800bc5a:	e7d9      	b.n	800bc10 <_fflush_r+0xc>
 800bc5c:	4b05      	ldr	r3, [pc, #20]	; (800bc74 <_fflush_r+0x70>)
 800bc5e:	429c      	cmp	r4, r3
 800bc60:	d101      	bne.n	800bc66 <_fflush_r+0x62>
 800bc62:	68ac      	ldr	r4, [r5, #8]
 800bc64:	e7df      	b.n	800bc26 <_fflush_r+0x22>
 800bc66:	4b04      	ldr	r3, [pc, #16]	; (800bc78 <_fflush_r+0x74>)
 800bc68:	429c      	cmp	r4, r3
 800bc6a:	bf08      	it	eq
 800bc6c:	68ec      	ldreq	r4, [r5, #12]
 800bc6e:	e7da      	b.n	800bc26 <_fflush_r+0x22>
 800bc70:	0800d7cc 	.word	0x0800d7cc
 800bc74:	0800d7ec 	.word	0x0800d7ec
 800bc78:	0800d7ac 	.word	0x0800d7ac

0800bc7c <std>:
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	b510      	push	{r4, lr}
 800bc80:	4604      	mov	r4, r0
 800bc82:	e9c0 3300 	strd	r3, r3, [r0]
 800bc86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bc8a:	6083      	str	r3, [r0, #8]
 800bc8c:	8181      	strh	r1, [r0, #12]
 800bc8e:	6643      	str	r3, [r0, #100]	; 0x64
 800bc90:	81c2      	strh	r2, [r0, #14]
 800bc92:	6183      	str	r3, [r0, #24]
 800bc94:	4619      	mov	r1, r3
 800bc96:	2208      	movs	r2, #8
 800bc98:	305c      	adds	r0, #92	; 0x5c
 800bc9a:	f7fd fb45 	bl	8009328 <memset>
 800bc9e:	4b05      	ldr	r3, [pc, #20]	; (800bcb4 <std+0x38>)
 800bca0:	6263      	str	r3, [r4, #36]	; 0x24
 800bca2:	4b05      	ldr	r3, [pc, #20]	; (800bcb8 <std+0x3c>)
 800bca4:	62a3      	str	r3, [r4, #40]	; 0x28
 800bca6:	4b05      	ldr	r3, [pc, #20]	; (800bcbc <std+0x40>)
 800bca8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bcaa:	4b05      	ldr	r3, [pc, #20]	; (800bcc0 <std+0x44>)
 800bcac:	6224      	str	r4, [r4, #32]
 800bcae:	6323      	str	r3, [r4, #48]	; 0x30
 800bcb0:	bd10      	pop	{r4, pc}
 800bcb2:	bf00      	nop
 800bcb4:	0800bfd1 	.word	0x0800bfd1
 800bcb8:	0800bff3 	.word	0x0800bff3
 800bcbc:	0800c02b 	.word	0x0800c02b
 800bcc0:	0800c04f 	.word	0x0800c04f

0800bcc4 <_cleanup_r>:
 800bcc4:	4901      	ldr	r1, [pc, #4]	; (800bccc <_cleanup_r+0x8>)
 800bcc6:	f000 b8af 	b.w	800be28 <_fwalk_reent>
 800bcca:	bf00      	nop
 800bccc:	0800bc05 	.word	0x0800bc05

0800bcd0 <__sfmoreglue>:
 800bcd0:	b570      	push	{r4, r5, r6, lr}
 800bcd2:	2268      	movs	r2, #104	; 0x68
 800bcd4:	1e4d      	subs	r5, r1, #1
 800bcd6:	4355      	muls	r5, r2
 800bcd8:	460e      	mov	r6, r1
 800bcda:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bcde:	f7ff fa65 	bl	800b1ac <_malloc_r>
 800bce2:	4604      	mov	r4, r0
 800bce4:	b140      	cbz	r0, 800bcf8 <__sfmoreglue+0x28>
 800bce6:	2100      	movs	r1, #0
 800bce8:	e9c0 1600 	strd	r1, r6, [r0]
 800bcec:	300c      	adds	r0, #12
 800bcee:	60a0      	str	r0, [r4, #8]
 800bcf0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bcf4:	f7fd fb18 	bl	8009328 <memset>
 800bcf8:	4620      	mov	r0, r4
 800bcfa:	bd70      	pop	{r4, r5, r6, pc}

0800bcfc <__sfp_lock_acquire>:
 800bcfc:	4801      	ldr	r0, [pc, #4]	; (800bd04 <__sfp_lock_acquire+0x8>)
 800bcfe:	f000 b8b3 	b.w	800be68 <__retarget_lock_acquire_recursive>
 800bd02:	bf00      	nop
 800bd04:	2000200d 	.word	0x2000200d

0800bd08 <__sfp_lock_release>:
 800bd08:	4801      	ldr	r0, [pc, #4]	; (800bd10 <__sfp_lock_release+0x8>)
 800bd0a:	f000 b8ae 	b.w	800be6a <__retarget_lock_release_recursive>
 800bd0e:	bf00      	nop
 800bd10:	2000200d 	.word	0x2000200d

0800bd14 <__sinit_lock_acquire>:
 800bd14:	4801      	ldr	r0, [pc, #4]	; (800bd1c <__sinit_lock_acquire+0x8>)
 800bd16:	f000 b8a7 	b.w	800be68 <__retarget_lock_acquire_recursive>
 800bd1a:	bf00      	nop
 800bd1c:	2000200e 	.word	0x2000200e

0800bd20 <__sinit_lock_release>:
 800bd20:	4801      	ldr	r0, [pc, #4]	; (800bd28 <__sinit_lock_release+0x8>)
 800bd22:	f000 b8a2 	b.w	800be6a <__retarget_lock_release_recursive>
 800bd26:	bf00      	nop
 800bd28:	2000200e 	.word	0x2000200e

0800bd2c <__sinit>:
 800bd2c:	b510      	push	{r4, lr}
 800bd2e:	4604      	mov	r4, r0
 800bd30:	f7ff fff0 	bl	800bd14 <__sinit_lock_acquire>
 800bd34:	69a3      	ldr	r3, [r4, #24]
 800bd36:	b11b      	cbz	r3, 800bd40 <__sinit+0x14>
 800bd38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd3c:	f7ff bff0 	b.w	800bd20 <__sinit_lock_release>
 800bd40:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bd44:	6523      	str	r3, [r4, #80]	; 0x50
 800bd46:	4b13      	ldr	r3, [pc, #76]	; (800bd94 <__sinit+0x68>)
 800bd48:	4a13      	ldr	r2, [pc, #76]	; (800bd98 <__sinit+0x6c>)
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	62a2      	str	r2, [r4, #40]	; 0x28
 800bd4e:	42a3      	cmp	r3, r4
 800bd50:	bf04      	itt	eq
 800bd52:	2301      	moveq	r3, #1
 800bd54:	61a3      	streq	r3, [r4, #24]
 800bd56:	4620      	mov	r0, r4
 800bd58:	f000 f820 	bl	800bd9c <__sfp>
 800bd5c:	6060      	str	r0, [r4, #4]
 800bd5e:	4620      	mov	r0, r4
 800bd60:	f000 f81c 	bl	800bd9c <__sfp>
 800bd64:	60a0      	str	r0, [r4, #8]
 800bd66:	4620      	mov	r0, r4
 800bd68:	f000 f818 	bl	800bd9c <__sfp>
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	60e0      	str	r0, [r4, #12]
 800bd70:	2104      	movs	r1, #4
 800bd72:	6860      	ldr	r0, [r4, #4]
 800bd74:	f7ff ff82 	bl	800bc7c <std>
 800bd78:	68a0      	ldr	r0, [r4, #8]
 800bd7a:	2201      	movs	r2, #1
 800bd7c:	2109      	movs	r1, #9
 800bd7e:	f7ff ff7d 	bl	800bc7c <std>
 800bd82:	68e0      	ldr	r0, [r4, #12]
 800bd84:	2202      	movs	r2, #2
 800bd86:	2112      	movs	r1, #18
 800bd88:	f7ff ff78 	bl	800bc7c <std>
 800bd8c:	2301      	movs	r3, #1
 800bd8e:	61a3      	str	r3, [r4, #24]
 800bd90:	e7d2      	b.n	800bd38 <__sinit+0xc>
 800bd92:	bf00      	nop
 800bd94:	0800d430 	.word	0x0800d430
 800bd98:	0800bcc5 	.word	0x0800bcc5

0800bd9c <__sfp>:
 800bd9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd9e:	4607      	mov	r7, r0
 800bda0:	f7ff ffac 	bl	800bcfc <__sfp_lock_acquire>
 800bda4:	4b1e      	ldr	r3, [pc, #120]	; (800be20 <__sfp+0x84>)
 800bda6:	681e      	ldr	r6, [r3, #0]
 800bda8:	69b3      	ldr	r3, [r6, #24]
 800bdaa:	b913      	cbnz	r3, 800bdb2 <__sfp+0x16>
 800bdac:	4630      	mov	r0, r6
 800bdae:	f7ff ffbd 	bl	800bd2c <__sinit>
 800bdb2:	3648      	adds	r6, #72	; 0x48
 800bdb4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bdb8:	3b01      	subs	r3, #1
 800bdba:	d503      	bpl.n	800bdc4 <__sfp+0x28>
 800bdbc:	6833      	ldr	r3, [r6, #0]
 800bdbe:	b30b      	cbz	r3, 800be04 <__sfp+0x68>
 800bdc0:	6836      	ldr	r6, [r6, #0]
 800bdc2:	e7f7      	b.n	800bdb4 <__sfp+0x18>
 800bdc4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bdc8:	b9d5      	cbnz	r5, 800be00 <__sfp+0x64>
 800bdca:	4b16      	ldr	r3, [pc, #88]	; (800be24 <__sfp+0x88>)
 800bdcc:	60e3      	str	r3, [r4, #12]
 800bdce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bdd2:	6665      	str	r5, [r4, #100]	; 0x64
 800bdd4:	f000 f847 	bl	800be66 <__retarget_lock_init_recursive>
 800bdd8:	f7ff ff96 	bl	800bd08 <__sfp_lock_release>
 800bddc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bde0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bde4:	6025      	str	r5, [r4, #0]
 800bde6:	61a5      	str	r5, [r4, #24]
 800bde8:	2208      	movs	r2, #8
 800bdea:	4629      	mov	r1, r5
 800bdec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bdf0:	f7fd fa9a 	bl	8009328 <memset>
 800bdf4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bdf8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bdfc:	4620      	mov	r0, r4
 800bdfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be00:	3468      	adds	r4, #104	; 0x68
 800be02:	e7d9      	b.n	800bdb8 <__sfp+0x1c>
 800be04:	2104      	movs	r1, #4
 800be06:	4638      	mov	r0, r7
 800be08:	f7ff ff62 	bl	800bcd0 <__sfmoreglue>
 800be0c:	4604      	mov	r4, r0
 800be0e:	6030      	str	r0, [r6, #0]
 800be10:	2800      	cmp	r0, #0
 800be12:	d1d5      	bne.n	800bdc0 <__sfp+0x24>
 800be14:	f7ff ff78 	bl	800bd08 <__sfp_lock_release>
 800be18:	230c      	movs	r3, #12
 800be1a:	603b      	str	r3, [r7, #0]
 800be1c:	e7ee      	b.n	800bdfc <__sfp+0x60>
 800be1e:	bf00      	nop
 800be20:	0800d430 	.word	0x0800d430
 800be24:	ffff0001 	.word	0xffff0001

0800be28 <_fwalk_reent>:
 800be28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be2c:	4606      	mov	r6, r0
 800be2e:	4688      	mov	r8, r1
 800be30:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800be34:	2700      	movs	r7, #0
 800be36:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800be3a:	f1b9 0901 	subs.w	r9, r9, #1
 800be3e:	d505      	bpl.n	800be4c <_fwalk_reent+0x24>
 800be40:	6824      	ldr	r4, [r4, #0]
 800be42:	2c00      	cmp	r4, #0
 800be44:	d1f7      	bne.n	800be36 <_fwalk_reent+0xe>
 800be46:	4638      	mov	r0, r7
 800be48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be4c:	89ab      	ldrh	r3, [r5, #12]
 800be4e:	2b01      	cmp	r3, #1
 800be50:	d907      	bls.n	800be62 <_fwalk_reent+0x3a>
 800be52:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800be56:	3301      	adds	r3, #1
 800be58:	d003      	beq.n	800be62 <_fwalk_reent+0x3a>
 800be5a:	4629      	mov	r1, r5
 800be5c:	4630      	mov	r0, r6
 800be5e:	47c0      	blx	r8
 800be60:	4307      	orrs	r7, r0
 800be62:	3568      	adds	r5, #104	; 0x68
 800be64:	e7e9      	b.n	800be3a <_fwalk_reent+0x12>

0800be66 <__retarget_lock_init_recursive>:
 800be66:	4770      	bx	lr

0800be68 <__retarget_lock_acquire_recursive>:
 800be68:	4770      	bx	lr

0800be6a <__retarget_lock_release_recursive>:
 800be6a:	4770      	bx	lr

0800be6c <__swhatbuf_r>:
 800be6c:	b570      	push	{r4, r5, r6, lr}
 800be6e:	460e      	mov	r6, r1
 800be70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be74:	2900      	cmp	r1, #0
 800be76:	b096      	sub	sp, #88	; 0x58
 800be78:	4614      	mov	r4, r2
 800be7a:	461d      	mov	r5, r3
 800be7c:	da08      	bge.n	800be90 <__swhatbuf_r+0x24>
 800be7e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800be82:	2200      	movs	r2, #0
 800be84:	602a      	str	r2, [r5, #0]
 800be86:	061a      	lsls	r2, r3, #24
 800be88:	d410      	bmi.n	800beac <__swhatbuf_r+0x40>
 800be8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be8e:	e00e      	b.n	800beae <__swhatbuf_r+0x42>
 800be90:	466a      	mov	r2, sp
 800be92:	f000 f903 	bl	800c09c <_fstat_r>
 800be96:	2800      	cmp	r0, #0
 800be98:	dbf1      	blt.n	800be7e <__swhatbuf_r+0x12>
 800be9a:	9a01      	ldr	r2, [sp, #4]
 800be9c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bea0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bea4:	425a      	negs	r2, r3
 800bea6:	415a      	adcs	r2, r3
 800bea8:	602a      	str	r2, [r5, #0]
 800beaa:	e7ee      	b.n	800be8a <__swhatbuf_r+0x1e>
 800beac:	2340      	movs	r3, #64	; 0x40
 800beae:	2000      	movs	r0, #0
 800beb0:	6023      	str	r3, [r4, #0]
 800beb2:	b016      	add	sp, #88	; 0x58
 800beb4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800beb8 <__smakebuf_r>:
 800beb8:	898b      	ldrh	r3, [r1, #12]
 800beba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bebc:	079d      	lsls	r5, r3, #30
 800bebe:	4606      	mov	r6, r0
 800bec0:	460c      	mov	r4, r1
 800bec2:	d507      	bpl.n	800bed4 <__smakebuf_r+0x1c>
 800bec4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bec8:	6023      	str	r3, [r4, #0]
 800beca:	6123      	str	r3, [r4, #16]
 800becc:	2301      	movs	r3, #1
 800bece:	6163      	str	r3, [r4, #20]
 800bed0:	b002      	add	sp, #8
 800bed2:	bd70      	pop	{r4, r5, r6, pc}
 800bed4:	ab01      	add	r3, sp, #4
 800bed6:	466a      	mov	r2, sp
 800bed8:	f7ff ffc8 	bl	800be6c <__swhatbuf_r>
 800bedc:	9900      	ldr	r1, [sp, #0]
 800bede:	4605      	mov	r5, r0
 800bee0:	4630      	mov	r0, r6
 800bee2:	f7ff f963 	bl	800b1ac <_malloc_r>
 800bee6:	b948      	cbnz	r0, 800befc <__smakebuf_r+0x44>
 800bee8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800beec:	059a      	lsls	r2, r3, #22
 800beee:	d4ef      	bmi.n	800bed0 <__smakebuf_r+0x18>
 800bef0:	f023 0303 	bic.w	r3, r3, #3
 800bef4:	f043 0302 	orr.w	r3, r3, #2
 800bef8:	81a3      	strh	r3, [r4, #12]
 800befa:	e7e3      	b.n	800bec4 <__smakebuf_r+0xc>
 800befc:	4b0d      	ldr	r3, [pc, #52]	; (800bf34 <__smakebuf_r+0x7c>)
 800befe:	62b3      	str	r3, [r6, #40]	; 0x28
 800bf00:	89a3      	ldrh	r3, [r4, #12]
 800bf02:	6020      	str	r0, [r4, #0]
 800bf04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf08:	81a3      	strh	r3, [r4, #12]
 800bf0a:	9b00      	ldr	r3, [sp, #0]
 800bf0c:	6163      	str	r3, [r4, #20]
 800bf0e:	9b01      	ldr	r3, [sp, #4]
 800bf10:	6120      	str	r0, [r4, #16]
 800bf12:	b15b      	cbz	r3, 800bf2c <__smakebuf_r+0x74>
 800bf14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf18:	4630      	mov	r0, r6
 800bf1a:	f000 f8d1 	bl	800c0c0 <_isatty_r>
 800bf1e:	b128      	cbz	r0, 800bf2c <__smakebuf_r+0x74>
 800bf20:	89a3      	ldrh	r3, [r4, #12]
 800bf22:	f023 0303 	bic.w	r3, r3, #3
 800bf26:	f043 0301 	orr.w	r3, r3, #1
 800bf2a:	81a3      	strh	r3, [r4, #12]
 800bf2c:	89a0      	ldrh	r0, [r4, #12]
 800bf2e:	4305      	orrs	r5, r0
 800bf30:	81a5      	strh	r5, [r4, #12]
 800bf32:	e7cd      	b.n	800bed0 <__smakebuf_r+0x18>
 800bf34:	0800bcc5 	.word	0x0800bcc5

0800bf38 <_malloc_usable_size_r>:
 800bf38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf3c:	1f18      	subs	r0, r3, #4
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	bfbc      	itt	lt
 800bf42:	580b      	ldrlt	r3, [r1, r0]
 800bf44:	18c0      	addlt	r0, r0, r3
 800bf46:	4770      	bx	lr

0800bf48 <_raise_r>:
 800bf48:	291f      	cmp	r1, #31
 800bf4a:	b538      	push	{r3, r4, r5, lr}
 800bf4c:	4604      	mov	r4, r0
 800bf4e:	460d      	mov	r5, r1
 800bf50:	d904      	bls.n	800bf5c <_raise_r+0x14>
 800bf52:	2316      	movs	r3, #22
 800bf54:	6003      	str	r3, [r0, #0]
 800bf56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bf5a:	bd38      	pop	{r3, r4, r5, pc}
 800bf5c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bf5e:	b112      	cbz	r2, 800bf66 <_raise_r+0x1e>
 800bf60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bf64:	b94b      	cbnz	r3, 800bf7a <_raise_r+0x32>
 800bf66:	4620      	mov	r0, r4
 800bf68:	f000 f830 	bl	800bfcc <_getpid_r>
 800bf6c:	462a      	mov	r2, r5
 800bf6e:	4601      	mov	r1, r0
 800bf70:	4620      	mov	r0, r4
 800bf72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bf76:	f000 b817 	b.w	800bfa8 <_kill_r>
 800bf7a:	2b01      	cmp	r3, #1
 800bf7c:	d00a      	beq.n	800bf94 <_raise_r+0x4c>
 800bf7e:	1c59      	adds	r1, r3, #1
 800bf80:	d103      	bne.n	800bf8a <_raise_r+0x42>
 800bf82:	2316      	movs	r3, #22
 800bf84:	6003      	str	r3, [r0, #0]
 800bf86:	2001      	movs	r0, #1
 800bf88:	e7e7      	b.n	800bf5a <_raise_r+0x12>
 800bf8a:	2400      	movs	r4, #0
 800bf8c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bf90:	4628      	mov	r0, r5
 800bf92:	4798      	blx	r3
 800bf94:	2000      	movs	r0, #0
 800bf96:	e7e0      	b.n	800bf5a <_raise_r+0x12>

0800bf98 <raise>:
 800bf98:	4b02      	ldr	r3, [pc, #8]	; (800bfa4 <raise+0xc>)
 800bf9a:	4601      	mov	r1, r0
 800bf9c:	6818      	ldr	r0, [r3, #0]
 800bf9e:	f7ff bfd3 	b.w	800bf48 <_raise_r>
 800bfa2:	bf00      	nop
 800bfa4:	200000fc 	.word	0x200000fc

0800bfa8 <_kill_r>:
 800bfa8:	b538      	push	{r3, r4, r5, lr}
 800bfaa:	4d07      	ldr	r5, [pc, #28]	; (800bfc8 <_kill_r+0x20>)
 800bfac:	2300      	movs	r3, #0
 800bfae:	4604      	mov	r4, r0
 800bfb0:	4608      	mov	r0, r1
 800bfb2:	4611      	mov	r1, r2
 800bfb4:	602b      	str	r3, [r5, #0]
 800bfb6:	f7f5 fd8d 	bl	8001ad4 <_kill>
 800bfba:	1c43      	adds	r3, r0, #1
 800bfbc:	d102      	bne.n	800bfc4 <_kill_r+0x1c>
 800bfbe:	682b      	ldr	r3, [r5, #0]
 800bfc0:	b103      	cbz	r3, 800bfc4 <_kill_r+0x1c>
 800bfc2:	6023      	str	r3, [r4, #0]
 800bfc4:	bd38      	pop	{r3, r4, r5, pc}
 800bfc6:	bf00      	nop
 800bfc8:	20002008 	.word	0x20002008

0800bfcc <_getpid_r>:
 800bfcc:	f7f5 bd7a 	b.w	8001ac4 <_getpid>

0800bfd0 <__sread>:
 800bfd0:	b510      	push	{r4, lr}
 800bfd2:	460c      	mov	r4, r1
 800bfd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfd8:	f000 f894 	bl	800c104 <_read_r>
 800bfdc:	2800      	cmp	r0, #0
 800bfde:	bfab      	itete	ge
 800bfe0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bfe2:	89a3      	ldrhlt	r3, [r4, #12]
 800bfe4:	181b      	addge	r3, r3, r0
 800bfe6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bfea:	bfac      	ite	ge
 800bfec:	6563      	strge	r3, [r4, #84]	; 0x54
 800bfee:	81a3      	strhlt	r3, [r4, #12]
 800bff0:	bd10      	pop	{r4, pc}

0800bff2 <__swrite>:
 800bff2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bff6:	461f      	mov	r7, r3
 800bff8:	898b      	ldrh	r3, [r1, #12]
 800bffa:	05db      	lsls	r3, r3, #23
 800bffc:	4605      	mov	r5, r0
 800bffe:	460c      	mov	r4, r1
 800c000:	4616      	mov	r6, r2
 800c002:	d505      	bpl.n	800c010 <__swrite+0x1e>
 800c004:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c008:	2302      	movs	r3, #2
 800c00a:	2200      	movs	r2, #0
 800c00c:	f000 f868 	bl	800c0e0 <_lseek_r>
 800c010:	89a3      	ldrh	r3, [r4, #12]
 800c012:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c016:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c01a:	81a3      	strh	r3, [r4, #12]
 800c01c:	4632      	mov	r2, r6
 800c01e:	463b      	mov	r3, r7
 800c020:	4628      	mov	r0, r5
 800c022:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c026:	f000 b817 	b.w	800c058 <_write_r>

0800c02a <__sseek>:
 800c02a:	b510      	push	{r4, lr}
 800c02c:	460c      	mov	r4, r1
 800c02e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c032:	f000 f855 	bl	800c0e0 <_lseek_r>
 800c036:	1c43      	adds	r3, r0, #1
 800c038:	89a3      	ldrh	r3, [r4, #12]
 800c03a:	bf15      	itete	ne
 800c03c:	6560      	strne	r0, [r4, #84]	; 0x54
 800c03e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c042:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c046:	81a3      	strheq	r3, [r4, #12]
 800c048:	bf18      	it	ne
 800c04a:	81a3      	strhne	r3, [r4, #12]
 800c04c:	bd10      	pop	{r4, pc}

0800c04e <__sclose>:
 800c04e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c052:	f000 b813 	b.w	800c07c <_close_r>
	...

0800c058 <_write_r>:
 800c058:	b538      	push	{r3, r4, r5, lr}
 800c05a:	4d07      	ldr	r5, [pc, #28]	; (800c078 <_write_r+0x20>)
 800c05c:	4604      	mov	r4, r0
 800c05e:	4608      	mov	r0, r1
 800c060:	4611      	mov	r1, r2
 800c062:	2200      	movs	r2, #0
 800c064:	602a      	str	r2, [r5, #0]
 800c066:	461a      	mov	r2, r3
 800c068:	f7f5 fd6b 	bl	8001b42 <_write>
 800c06c:	1c43      	adds	r3, r0, #1
 800c06e:	d102      	bne.n	800c076 <_write_r+0x1e>
 800c070:	682b      	ldr	r3, [r5, #0]
 800c072:	b103      	cbz	r3, 800c076 <_write_r+0x1e>
 800c074:	6023      	str	r3, [r4, #0]
 800c076:	bd38      	pop	{r3, r4, r5, pc}
 800c078:	20002008 	.word	0x20002008

0800c07c <_close_r>:
 800c07c:	b538      	push	{r3, r4, r5, lr}
 800c07e:	4d06      	ldr	r5, [pc, #24]	; (800c098 <_close_r+0x1c>)
 800c080:	2300      	movs	r3, #0
 800c082:	4604      	mov	r4, r0
 800c084:	4608      	mov	r0, r1
 800c086:	602b      	str	r3, [r5, #0]
 800c088:	f7f5 fd77 	bl	8001b7a <_close>
 800c08c:	1c43      	adds	r3, r0, #1
 800c08e:	d102      	bne.n	800c096 <_close_r+0x1a>
 800c090:	682b      	ldr	r3, [r5, #0]
 800c092:	b103      	cbz	r3, 800c096 <_close_r+0x1a>
 800c094:	6023      	str	r3, [r4, #0]
 800c096:	bd38      	pop	{r3, r4, r5, pc}
 800c098:	20002008 	.word	0x20002008

0800c09c <_fstat_r>:
 800c09c:	b538      	push	{r3, r4, r5, lr}
 800c09e:	4d07      	ldr	r5, [pc, #28]	; (800c0bc <_fstat_r+0x20>)
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	4604      	mov	r4, r0
 800c0a4:	4608      	mov	r0, r1
 800c0a6:	4611      	mov	r1, r2
 800c0a8:	602b      	str	r3, [r5, #0]
 800c0aa:	f7f5 fd72 	bl	8001b92 <_fstat>
 800c0ae:	1c43      	adds	r3, r0, #1
 800c0b0:	d102      	bne.n	800c0b8 <_fstat_r+0x1c>
 800c0b2:	682b      	ldr	r3, [r5, #0]
 800c0b4:	b103      	cbz	r3, 800c0b8 <_fstat_r+0x1c>
 800c0b6:	6023      	str	r3, [r4, #0]
 800c0b8:	bd38      	pop	{r3, r4, r5, pc}
 800c0ba:	bf00      	nop
 800c0bc:	20002008 	.word	0x20002008

0800c0c0 <_isatty_r>:
 800c0c0:	b538      	push	{r3, r4, r5, lr}
 800c0c2:	4d06      	ldr	r5, [pc, #24]	; (800c0dc <_isatty_r+0x1c>)
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	4604      	mov	r4, r0
 800c0c8:	4608      	mov	r0, r1
 800c0ca:	602b      	str	r3, [r5, #0]
 800c0cc:	f7f5 fd71 	bl	8001bb2 <_isatty>
 800c0d0:	1c43      	adds	r3, r0, #1
 800c0d2:	d102      	bne.n	800c0da <_isatty_r+0x1a>
 800c0d4:	682b      	ldr	r3, [r5, #0]
 800c0d6:	b103      	cbz	r3, 800c0da <_isatty_r+0x1a>
 800c0d8:	6023      	str	r3, [r4, #0]
 800c0da:	bd38      	pop	{r3, r4, r5, pc}
 800c0dc:	20002008 	.word	0x20002008

0800c0e0 <_lseek_r>:
 800c0e0:	b538      	push	{r3, r4, r5, lr}
 800c0e2:	4d07      	ldr	r5, [pc, #28]	; (800c100 <_lseek_r+0x20>)
 800c0e4:	4604      	mov	r4, r0
 800c0e6:	4608      	mov	r0, r1
 800c0e8:	4611      	mov	r1, r2
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	602a      	str	r2, [r5, #0]
 800c0ee:	461a      	mov	r2, r3
 800c0f0:	f7f5 fd6a 	bl	8001bc8 <_lseek>
 800c0f4:	1c43      	adds	r3, r0, #1
 800c0f6:	d102      	bne.n	800c0fe <_lseek_r+0x1e>
 800c0f8:	682b      	ldr	r3, [r5, #0]
 800c0fa:	b103      	cbz	r3, 800c0fe <_lseek_r+0x1e>
 800c0fc:	6023      	str	r3, [r4, #0]
 800c0fe:	bd38      	pop	{r3, r4, r5, pc}
 800c100:	20002008 	.word	0x20002008

0800c104 <_read_r>:
 800c104:	b538      	push	{r3, r4, r5, lr}
 800c106:	4d07      	ldr	r5, [pc, #28]	; (800c124 <_read_r+0x20>)
 800c108:	4604      	mov	r4, r0
 800c10a:	4608      	mov	r0, r1
 800c10c:	4611      	mov	r1, r2
 800c10e:	2200      	movs	r2, #0
 800c110:	602a      	str	r2, [r5, #0]
 800c112:	461a      	mov	r2, r3
 800c114:	f7f5 fcf8 	bl	8001b08 <_read>
 800c118:	1c43      	adds	r3, r0, #1
 800c11a:	d102      	bne.n	800c122 <_read_r+0x1e>
 800c11c:	682b      	ldr	r3, [r5, #0]
 800c11e:	b103      	cbz	r3, 800c122 <_read_r+0x1e>
 800c120:	6023      	str	r3, [r4, #0]
 800c122:	bd38      	pop	{r3, r4, r5, pc}
 800c124:	20002008 	.word	0x20002008

0800c128 <cosf>:
 800c128:	ee10 3a10 	vmov	r3, s0
 800c12c:	b507      	push	{r0, r1, r2, lr}
 800c12e:	4a1e      	ldr	r2, [pc, #120]	; (800c1a8 <cosf+0x80>)
 800c130:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c134:	4293      	cmp	r3, r2
 800c136:	dc06      	bgt.n	800c146 <cosf+0x1e>
 800c138:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800c1ac <cosf+0x84>
 800c13c:	b003      	add	sp, #12
 800c13e:	f85d eb04 	ldr.w	lr, [sp], #4
 800c142:	f000 bb9b 	b.w	800c87c <__kernel_cosf>
 800c146:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c14a:	db04      	blt.n	800c156 <cosf+0x2e>
 800c14c:	ee30 0a40 	vsub.f32	s0, s0, s0
 800c150:	b003      	add	sp, #12
 800c152:	f85d fb04 	ldr.w	pc, [sp], #4
 800c156:	4668      	mov	r0, sp
 800c158:	f000 fa50 	bl	800c5fc <__ieee754_rem_pio2f>
 800c15c:	f000 0003 	and.w	r0, r0, #3
 800c160:	2801      	cmp	r0, #1
 800c162:	d009      	beq.n	800c178 <cosf+0x50>
 800c164:	2802      	cmp	r0, #2
 800c166:	d010      	beq.n	800c18a <cosf+0x62>
 800c168:	b9b0      	cbnz	r0, 800c198 <cosf+0x70>
 800c16a:	eddd 0a01 	vldr	s1, [sp, #4]
 800c16e:	ed9d 0a00 	vldr	s0, [sp]
 800c172:	f000 fb83 	bl	800c87c <__kernel_cosf>
 800c176:	e7eb      	b.n	800c150 <cosf+0x28>
 800c178:	eddd 0a01 	vldr	s1, [sp, #4]
 800c17c:	ed9d 0a00 	vldr	s0, [sp]
 800c180:	f000 fe52 	bl	800ce28 <__kernel_sinf>
 800c184:	eeb1 0a40 	vneg.f32	s0, s0
 800c188:	e7e2      	b.n	800c150 <cosf+0x28>
 800c18a:	eddd 0a01 	vldr	s1, [sp, #4]
 800c18e:	ed9d 0a00 	vldr	s0, [sp]
 800c192:	f000 fb73 	bl	800c87c <__kernel_cosf>
 800c196:	e7f5      	b.n	800c184 <cosf+0x5c>
 800c198:	eddd 0a01 	vldr	s1, [sp, #4]
 800c19c:	ed9d 0a00 	vldr	s0, [sp]
 800c1a0:	2001      	movs	r0, #1
 800c1a2:	f000 fe41 	bl	800ce28 <__kernel_sinf>
 800c1a6:	e7d3      	b.n	800c150 <cosf+0x28>
 800c1a8:	3f490fd8 	.word	0x3f490fd8
 800c1ac:	00000000 	.word	0x00000000

0800c1b0 <sinf>:
 800c1b0:	ee10 3a10 	vmov	r3, s0
 800c1b4:	b507      	push	{r0, r1, r2, lr}
 800c1b6:	4a1f      	ldr	r2, [pc, #124]	; (800c234 <sinf+0x84>)
 800c1b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c1bc:	4293      	cmp	r3, r2
 800c1be:	dc07      	bgt.n	800c1d0 <sinf+0x20>
 800c1c0:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800c238 <sinf+0x88>
 800c1c4:	2000      	movs	r0, #0
 800c1c6:	b003      	add	sp, #12
 800c1c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c1cc:	f000 be2c 	b.w	800ce28 <__kernel_sinf>
 800c1d0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c1d4:	db04      	blt.n	800c1e0 <sinf+0x30>
 800c1d6:	ee30 0a40 	vsub.f32	s0, s0, s0
 800c1da:	b003      	add	sp, #12
 800c1dc:	f85d fb04 	ldr.w	pc, [sp], #4
 800c1e0:	4668      	mov	r0, sp
 800c1e2:	f000 fa0b 	bl	800c5fc <__ieee754_rem_pio2f>
 800c1e6:	f000 0003 	and.w	r0, r0, #3
 800c1ea:	2801      	cmp	r0, #1
 800c1ec:	d00a      	beq.n	800c204 <sinf+0x54>
 800c1ee:	2802      	cmp	r0, #2
 800c1f0:	d00f      	beq.n	800c212 <sinf+0x62>
 800c1f2:	b9c0      	cbnz	r0, 800c226 <sinf+0x76>
 800c1f4:	eddd 0a01 	vldr	s1, [sp, #4]
 800c1f8:	ed9d 0a00 	vldr	s0, [sp]
 800c1fc:	2001      	movs	r0, #1
 800c1fe:	f000 fe13 	bl	800ce28 <__kernel_sinf>
 800c202:	e7ea      	b.n	800c1da <sinf+0x2a>
 800c204:	eddd 0a01 	vldr	s1, [sp, #4]
 800c208:	ed9d 0a00 	vldr	s0, [sp]
 800c20c:	f000 fb36 	bl	800c87c <__kernel_cosf>
 800c210:	e7e3      	b.n	800c1da <sinf+0x2a>
 800c212:	eddd 0a01 	vldr	s1, [sp, #4]
 800c216:	ed9d 0a00 	vldr	s0, [sp]
 800c21a:	2001      	movs	r0, #1
 800c21c:	f000 fe04 	bl	800ce28 <__kernel_sinf>
 800c220:	eeb1 0a40 	vneg.f32	s0, s0
 800c224:	e7d9      	b.n	800c1da <sinf+0x2a>
 800c226:	eddd 0a01 	vldr	s1, [sp, #4]
 800c22a:	ed9d 0a00 	vldr	s0, [sp]
 800c22e:	f000 fb25 	bl	800c87c <__kernel_cosf>
 800c232:	e7f5      	b.n	800c220 <sinf+0x70>
 800c234:	3f490fd8 	.word	0x3f490fd8
 800c238:	00000000 	.word	0x00000000

0800c23c <tanf>:
 800c23c:	ee10 3a10 	vmov	r3, s0
 800c240:	b507      	push	{r0, r1, r2, lr}
 800c242:	4a12      	ldr	r2, [pc, #72]	; (800c28c <tanf+0x50>)
 800c244:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c248:	4293      	cmp	r3, r2
 800c24a:	dc07      	bgt.n	800c25c <tanf+0x20>
 800c24c:	eddf 0a10 	vldr	s1, [pc, #64]	; 800c290 <tanf+0x54>
 800c250:	2001      	movs	r0, #1
 800c252:	b003      	add	sp, #12
 800c254:	f85d eb04 	ldr.w	lr, [sp], #4
 800c258:	f000 be2e 	b.w	800ceb8 <__kernel_tanf>
 800c25c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c260:	db04      	blt.n	800c26c <tanf+0x30>
 800c262:	ee30 0a40 	vsub.f32	s0, s0, s0
 800c266:	b003      	add	sp, #12
 800c268:	f85d fb04 	ldr.w	pc, [sp], #4
 800c26c:	4668      	mov	r0, sp
 800c26e:	f000 f9c5 	bl	800c5fc <__ieee754_rem_pio2f>
 800c272:	0040      	lsls	r0, r0, #1
 800c274:	f000 0002 	and.w	r0, r0, #2
 800c278:	eddd 0a01 	vldr	s1, [sp, #4]
 800c27c:	ed9d 0a00 	vldr	s0, [sp]
 800c280:	f1c0 0001 	rsb	r0, r0, #1
 800c284:	f000 fe18 	bl	800ceb8 <__kernel_tanf>
 800c288:	e7ed      	b.n	800c266 <tanf+0x2a>
 800c28a:	bf00      	nop
 800c28c:	3f490fda 	.word	0x3f490fda
 800c290:	00000000 	.word	0x00000000

0800c294 <asinf>:
 800c294:	b508      	push	{r3, lr}
 800c296:	ed2d 8b02 	vpush	{d8}
 800c29a:	eeb0 8a40 	vmov.f32	s16, s0
 800c29e:	f000 f827 	bl	800c2f0 <__ieee754_asinf>
 800c2a2:	eeb4 8a48 	vcmp.f32	s16, s16
 800c2a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2aa:	eef0 8a40 	vmov.f32	s17, s0
 800c2ae:	d615      	bvs.n	800c2dc <asinf+0x48>
 800c2b0:	eeb0 0a48 	vmov.f32	s0, s16
 800c2b4:	f000 ffb4 	bl	800d220 <fabsf>
 800c2b8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c2bc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800c2c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2c4:	dd0a      	ble.n	800c2dc <asinf+0x48>
 800c2c6:	f7fd f805 	bl	80092d4 <__errno>
 800c2ca:	ecbd 8b02 	vpop	{d8}
 800c2ce:	2321      	movs	r3, #33	; 0x21
 800c2d0:	6003      	str	r3, [r0, #0]
 800c2d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c2d6:	4804      	ldr	r0, [pc, #16]	; (800c2e8 <asinf+0x54>)
 800c2d8:	f000 bfec 	b.w	800d2b4 <nanf>
 800c2dc:	eeb0 0a68 	vmov.f32	s0, s17
 800c2e0:	ecbd 8b02 	vpop	{d8}
 800c2e4:	bd08      	pop	{r3, pc}
 800c2e6:	bf00      	nop
 800c2e8:	0800d6a0 	.word	0x0800d6a0

0800c2ec <atan2f>:
 800c2ec:	f000 b8e6 	b.w	800c4bc <__ieee754_atan2f>

0800c2f0 <__ieee754_asinf>:
 800c2f0:	b538      	push	{r3, r4, r5, lr}
 800c2f2:	ee10 5a10 	vmov	r5, s0
 800c2f6:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800c2fa:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800c2fe:	ed2d 8b04 	vpush	{d8-d9}
 800c302:	d10c      	bne.n	800c31e <__ieee754_asinf+0x2e>
 800c304:	eddf 7a5d 	vldr	s15, [pc, #372]	; 800c47c <__ieee754_asinf+0x18c>
 800c308:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 800c480 <__ieee754_asinf+0x190>
 800c30c:	ee60 7a27 	vmul.f32	s15, s0, s15
 800c310:	eee0 7a07 	vfma.f32	s15, s0, s14
 800c314:	eeb0 0a67 	vmov.f32	s0, s15
 800c318:	ecbd 8b04 	vpop	{d8-d9}
 800c31c:	bd38      	pop	{r3, r4, r5, pc}
 800c31e:	dd04      	ble.n	800c32a <__ieee754_asinf+0x3a>
 800c320:	ee70 7a40 	vsub.f32	s15, s0, s0
 800c324:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800c328:	e7f6      	b.n	800c318 <__ieee754_asinf+0x28>
 800c32a:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800c32e:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800c332:	da0b      	bge.n	800c34c <__ieee754_asinf+0x5c>
 800c334:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800c338:	da52      	bge.n	800c3e0 <__ieee754_asinf+0xf0>
 800c33a:	eddf 7a52 	vldr	s15, [pc, #328]	; 800c484 <__ieee754_asinf+0x194>
 800c33e:	ee70 7a27 	vadd.f32	s15, s0, s15
 800c342:	eef4 7ae8 	vcmpe.f32	s15, s17
 800c346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c34a:	dce5      	bgt.n	800c318 <__ieee754_asinf+0x28>
 800c34c:	f000 ff68 	bl	800d220 <fabsf>
 800c350:	ee38 0ac0 	vsub.f32	s0, s17, s0
 800c354:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800c358:	ee20 8a08 	vmul.f32	s16, s0, s16
 800c35c:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800c488 <__ieee754_asinf+0x198>
 800c360:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800c48c <__ieee754_asinf+0x19c>
 800c364:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 800c490 <__ieee754_asinf+0x1a0>
 800c368:	eea8 7a27 	vfma.f32	s14, s16, s15
 800c36c:	eddf 7a49 	vldr	s15, [pc, #292]	; 800c494 <__ieee754_asinf+0x1a4>
 800c370:	eee7 7a08 	vfma.f32	s15, s14, s16
 800c374:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800c498 <__ieee754_asinf+0x1a8>
 800c378:	eea7 7a88 	vfma.f32	s14, s15, s16
 800c37c:	eddf 7a47 	vldr	s15, [pc, #284]	; 800c49c <__ieee754_asinf+0x1ac>
 800c380:	eee7 7a08 	vfma.f32	s15, s14, s16
 800c384:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800c4a0 <__ieee754_asinf+0x1b0>
 800c388:	eea7 9a88 	vfma.f32	s18, s15, s16
 800c38c:	eddf 7a45 	vldr	s15, [pc, #276]	; 800c4a4 <__ieee754_asinf+0x1b4>
 800c390:	eee8 7a07 	vfma.f32	s15, s16, s14
 800c394:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800c4a8 <__ieee754_asinf+0x1b8>
 800c398:	eea7 7a88 	vfma.f32	s14, s15, s16
 800c39c:	eddf 7a43 	vldr	s15, [pc, #268]	; 800c4ac <__ieee754_asinf+0x1bc>
 800c3a0:	eee7 7a08 	vfma.f32	s15, s14, s16
 800c3a4:	eeb0 0a48 	vmov.f32	s0, s16
 800c3a8:	eee7 8a88 	vfma.f32	s17, s15, s16
 800c3ac:	f000 fa62 	bl	800c874 <__ieee754_sqrtf>
 800c3b0:	4b3f      	ldr	r3, [pc, #252]	; (800c4b0 <__ieee754_asinf+0x1c0>)
 800c3b2:	ee29 9a08 	vmul.f32	s18, s18, s16
 800c3b6:	429c      	cmp	r4, r3
 800c3b8:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800c3bc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800c3c0:	dd3d      	ble.n	800c43e <__ieee754_asinf+0x14e>
 800c3c2:	eea0 0a06 	vfma.f32	s0, s0, s12
 800c3c6:	eddf 7a3b 	vldr	s15, [pc, #236]	; 800c4b4 <__ieee754_asinf+0x1c4>
 800c3ca:	eee0 7a26 	vfma.f32	s15, s0, s13
 800c3ce:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800c480 <__ieee754_asinf+0x190>
 800c3d2:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c3d6:	2d00      	cmp	r5, #0
 800c3d8:	bfd8      	it	le
 800c3da:	eeb1 0a40 	vnegle.f32	s0, s0
 800c3de:	e79b      	b.n	800c318 <__ieee754_asinf+0x28>
 800c3e0:	ee60 7a00 	vmul.f32	s15, s0, s0
 800c3e4:	eddf 6a28 	vldr	s13, [pc, #160]	; 800c488 <__ieee754_asinf+0x198>
 800c3e8:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800c48c <__ieee754_asinf+0x19c>
 800c3ec:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 800c4a0 <__ieee754_asinf+0x1b0>
 800c3f0:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800c3f4:	eddf 6a27 	vldr	s13, [pc, #156]	; 800c494 <__ieee754_asinf+0x1a4>
 800c3f8:	eee7 6a27 	vfma.f32	s13, s14, s15
 800c3fc:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800c498 <__ieee754_asinf+0x1a8>
 800c400:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c404:	eddf 6a25 	vldr	s13, [pc, #148]	; 800c49c <__ieee754_asinf+0x1ac>
 800c408:	eee7 6a27 	vfma.f32	s13, s14, s15
 800c40c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800c490 <__ieee754_asinf+0x1a0>
 800c410:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c414:	eddf 6a23 	vldr	s13, [pc, #140]	; 800c4a4 <__ieee754_asinf+0x1b4>
 800c418:	eee7 6a86 	vfma.f32	s13, s15, s12
 800c41c:	ed9f 6a22 	vldr	s12, [pc, #136]	; 800c4a8 <__ieee754_asinf+0x1b8>
 800c420:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800c424:	eddf 6a21 	vldr	s13, [pc, #132]	; 800c4ac <__ieee754_asinf+0x1bc>
 800c428:	eee6 6a27 	vfma.f32	s13, s12, s15
 800c42c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c430:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800c434:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800c438:	eea0 0a27 	vfma.f32	s0, s0, s15
 800c43c:	e76c      	b.n	800c318 <__ieee754_asinf+0x28>
 800c43e:	ee10 3a10 	vmov	r3, s0
 800c442:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800c446:	f023 030f 	bic.w	r3, r3, #15
 800c44a:	ee07 3a10 	vmov	s14, r3
 800c44e:	eea7 8a47 	vfms.f32	s16, s14, s14
 800c452:	ee70 7a07 	vadd.f32	s15, s0, s14
 800c456:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c45a:	eec8 5a27 	vdiv.f32	s11, s16, s15
 800c45e:	eddf 7a07 	vldr	s15, [pc, #28]	; 800c47c <__ieee754_asinf+0x18c>
 800c462:	eee5 7ae6 	vfms.f32	s15, s11, s13
 800c466:	eed0 7a06 	vfnms.f32	s15, s0, s12
 800c46a:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800c4b8 <__ieee754_asinf+0x1c8>
 800c46e:	eeb0 6a40 	vmov.f32	s12, s0
 800c472:	eea7 6a66 	vfms.f32	s12, s14, s13
 800c476:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800c47a:	e7aa      	b.n	800c3d2 <__ieee754_asinf+0xe2>
 800c47c:	b33bbd2e 	.word	0xb33bbd2e
 800c480:	3fc90fdb 	.word	0x3fc90fdb
 800c484:	7149f2ca 	.word	0x7149f2ca
 800c488:	3811ef08 	.word	0x3811ef08
 800c48c:	3a4f7f04 	.word	0x3a4f7f04
 800c490:	3e2aaaab 	.word	0x3e2aaaab
 800c494:	bd241146 	.word	0xbd241146
 800c498:	3e4e0aa8 	.word	0x3e4e0aa8
 800c49c:	bea6b090 	.word	0xbea6b090
 800c4a0:	3d9dc62e 	.word	0x3d9dc62e
 800c4a4:	bf303361 	.word	0xbf303361
 800c4a8:	4001572d 	.word	0x4001572d
 800c4ac:	c019d139 	.word	0xc019d139
 800c4b0:	3f799999 	.word	0x3f799999
 800c4b4:	333bbd2e 	.word	0x333bbd2e
 800c4b8:	3f490fdb 	.word	0x3f490fdb

0800c4bc <__ieee754_atan2f>:
 800c4bc:	ee10 2a90 	vmov	r2, s1
 800c4c0:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800c4c4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800c4c8:	b510      	push	{r4, lr}
 800c4ca:	eef0 7a40 	vmov.f32	s15, s0
 800c4ce:	dc06      	bgt.n	800c4de <__ieee754_atan2f+0x22>
 800c4d0:	ee10 0a10 	vmov	r0, s0
 800c4d4:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800c4d8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c4dc:	dd04      	ble.n	800c4e8 <__ieee754_atan2f+0x2c>
 800c4de:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800c4e2:	eeb0 0a67 	vmov.f32	s0, s15
 800c4e6:	bd10      	pop	{r4, pc}
 800c4e8:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800c4ec:	d103      	bne.n	800c4f6 <__ieee754_atan2f+0x3a>
 800c4ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c4f2:	f000 bdc1 	b.w	800d078 <atanf>
 800c4f6:	1794      	asrs	r4, r2, #30
 800c4f8:	f004 0402 	and.w	r4, r4, #2
 800c4fc:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800c500:	b943      	cbnz	r3, 800c514 <__ieee754_atan2f+0x58>
 800c502:	2c02      	cmp	r4, #2
 800c504:	d05e      	beq.n	800c5c4 <__ieee754_atan2f+0x108>
 800c506:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800c5d8 <__ieee754_atan2f+0x11c>
 800c50a:	2c03      	cmp	r4, #3
 800c50c:	bf08      	it	eq
 800c50e:	eef0 7a47 	vmoveq.f32	s15, s14
 800c512:	e7e6      	b.n	800c4e2 <__ieee754_atan2f+0x26>
 800c514:	b941      	cbnz	r1, 800c528 <__ieee754_atan2f+0x6c>
 800c516:	eddf 7a31 	vldr	s15, [pc, #196]	; 800c5dc <__ieee754_atan2f+0x120>
 800c51a:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800c5e0 <__ieee754_atan2f+0x124>
 800c51e:	2800      	cmp	r0, #0
 800c520:	bfb8      	it	lt
 800c522:	eef0 7a40 	vmovlt.f32	s15, s0
 800c526:	e7dc      	b.n	800c4e2 <__ieee754_atan2f+0x26>
 800c528:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800c52c:	d110      	bne.n	800c550 <__ieee754_atan2f+0x94>
 800c52e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c532:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800c536:	d107      	bne.n	800c548 <__ieee754_atan2f+0x8c>
 800c538:	2c02      	cmp	r4, #2
 800c53a:	d846      	bhi.n	800c5ca <__ieee754_atan2f+0x10e>
 800c53c:	4b29      	ldr	r3, [pc, #164]	; (800c5e4 <__ieee754_atan2f+0x128>)
 800c53e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c542:	edd4 7a00 	vldr	s15, [r4]
 800c546:	e7cc      	b.n	800c4e2 <__ieee754_atan2f+0x26>
 800c548:	2c02      	cmp	r4, #2
 800c54a:	d841      	bhi.n	800c5d0 <__ieee754_atan2f+0x114>
 800c54c:	4b26      	ldr	r3, [pc, #152]	; (800c5e8 <__ieee754_atan2f+0x12c>)
 800c54e:	e7f6      	b.n	800c53e <__ieee754_atan2f+0x82>
 800c550:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c554:	d0df      	beq.n	800c516 <__ieee754_atan2f+0x5a>
 800c556:	1a5b      	subs	r3, r3, r1
 800c558:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800c55c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800c560:	da1a      	bge.n	800c598 <__ieee754_atan2f+0xdc>
 800c562:	2a00      	cmp	r2, #0
 800c564:	da01      	bge.n	800c56a <__ieee754_atan2f+0xae>
 800c566:	313c      	adds	r1, #60	; 0x3c
 800c568:	db19      	blt.n	800c59e <__ieee754_atan2f+0xe2>
 800c56a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800c56e:	f000 fe57 	bl	800d220 <fabsf>
 800c572:	f000 fd81 	bl	800d078 <atanf>
 800c576:	eef0 7a40 	vmov.f32	s15, s0
 800c57a:	2c01      	cmp	r4, #1
 800c57c:	d012      	beq.n	800c5a4 <__ieee754_atan2f+0xe8>
 800c57e:	2c02      	cmp	r4, #2
 800c580:	d017      	beq.n	800c5b2 <__ieee754_atan2f+0xf6>
 800c582:	2c00      	cmp	r4, #0
 800c584:	d0ad      	beq.n	800c4e2 <__ieee754_atan2f+0x26>
 800c586:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800c5ec <__ieee754_atan2f+0x130>
 800c58a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800c58e:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800c5f0 <__ieee754_atan2f+0x134>
 800c592:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800c596:	e7a4      	b.n	800c4e2 <__ieee754_atan2f+0x26>
 800c598:	eddf 7a10 	vldr	s15, [pc, #64]	; 800c5dc <__ieee754_atan2f+0x120>
 800c59c:	e7ed      	b.n	800c57a <__ieee754_atan2f+0xbe>
 800c59e:	eddf 7a15 	vldr	s15, [pc, #84]	; 800c5f4 <__ieee754_atan2f+0x138>
 800c5a2:	e7ea      	b.n	800c57a <__ieee754_atan2f+0xbe>
 800c5a4:	ee17 3a90 	vmov	r3, s15
 800c5a8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c5ac:	ee07 3a90 	vmov	s15, r3
 800c5b0:	e797      	b.n	800c4e2 <__ieee754_atan2f+0x26>
 800c5b2:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800c5ec <__ieee754_atan2f+0x130>
 800c5b6:	ee77 7a80 	vadd.f32	s15, s15, s0
 800c5ba:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800c5f0 <__ieee754_atan2f+0x134>
 800c5be:	ee70 7a67 	vsub.f32	s15, s0, s15
 800c5c2:	e78e      	b.n	800c4e2 <__ieee754_atan2f+0x26>
 800c5c4:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800c5f0 <__ieee754_atan2f+0x134>
 800c5c8:	e78b      	b.n	800c4e2 <__ieee754_atan2f+0x26>
 800c5ca:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800c5f8 <__ieee754_atan2f+0x13c>
 800c5ce:	e788      	b.n	800c4e2 <__ieee754_atan2f+0x26>
 800c5d0:	eddf 7a08 	vldr	s15, [pc, #32]	; 800c5f4 <__ieee754_atan2f+0x138>
 800c5d4:	e785      	b.n	800c4e2 <__ieee754_atan2f+0x26>
 800c5d6:	bf00      	nop
 800c5d8:	c0490fdb 	.word	0xc0490fdb
 800c5dc:	3fc90fdb 	.word	0x3fc90fdb
 800c5e0:	bfc90fdb 	.word	0xbfc90fdb
 800c5e4:	0800d80c 	.word	0x0800d80c
 800c5e8:	0800d818 	.word	0x0800d818
 800c5ec:	33bbbd2e 	.word	0x33bbbd2e
 800c5f0:	40490fdb 	.word	0x40490fdb
 800c5f4:	00000000 	.word	0x00000000
 800c5f8:	3f490fdb 	.word	0x3f490fdb

0800c5fc <__ieee754_rem_pio2f>:
 800c5fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5fe:	ee10 6a10 	vmov	r6, s0
 800c602:	4b8e      	ldr	r3, [pc, #568]	; (800c83c <__ieee754_rem_pio2f+0x240>)
 800c604:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800c608:	429d      	cmp	r5, r3
 800c60a:	b087      	sub	sp, #28
 800c60c:	eef0 7a40 	vmov.f32	s15, s0
 800c610:	4604      	mov	r4, r0
 800c612:	dc05      	bgt.n	800c620 <__ieee754_rem_pio2f+0x24>
 800c614:	2300      	movs	r3, #0
 800c616:	ed80 0a00 	vstr	s0, [r0]
 800c61a:	6043      	str	r3, [r0, #4]
 800c61c:	2000      	movs	r0, #0
 800c61e:	e01a      	b.n	800c656 <__ieee754_rem_pio2f+0x5a>
 800c620:	4b87      	ldr	r3, [pc, #540]	; (800c840 <__ieee754_rem_pio2f+0x244>)
 800c622:	429d      	cmp	r5, r3
 800c624:	dc46      	bgt.n	800c6b4 <__ieee754_rem_pio2f+0xb8>
 800c626:	2e00      	cmp	r6, #0
 800c628:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800c844 <__ieee754_rem_pio2f+0x248>
 800c62c:	4b86      	ldr	r3, [pc, #536]	; (800c848 <__ieee754_rem_pio2f+0x24c>)
 800c62e:	f025 050f 	bic.w	r5, r5, #15
 800c632:	dd1f      	ble.n	800c674 <__ieee754_rem_pio2f+0x78>
 800c634:	429d      	cmp	r5, r3
 800c636:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800c63a:	d00e      	beq.n	800c65a <__ieee754_rem_pio2f+0x5e>
 800c63c:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800c84c <__ieee754_rem_pio2f+0x250>
 800c640:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800c644:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800c648:	ed80 0a00 	vstr	s0, [r0]
 800c64c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c650:	2001      	movs	r0, #1
 800c652:	edc4 7a01 	vstr	s15, [r4, #4]
 800c656:	b007      	add	sp, #28
 800c658:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c65a:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800c850 <__ieee754_rem_pio2f+0x254>
 800c65e:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800c854 <__ieee754_rem_pio2f+0x258>
 800c662:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800c666:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800c66a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c66e:	edc0 6a00 	vstr	s13, [r0]
 800c672:	e7eb      	b.n	800c64c <__ieee754_rem_pio2f+0x50>
 800c674:	429d      	cmp	r5, r3
 800c676:	ee77 7a80 	vadd.f32	s15, s15, s0
 800c67a:	d00e      	beq.n	800c69a <__ieee754_rem_pio2f+0x9e>
 800c67c:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800c84c <__ieee754_rem_pio2f+0x250>
 800c680:	ee37 0a87 	vadd.f32	s0, s15, s14
 800c684:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800c688:	ed80 0a00 	vstr	s0, [r0]
 800c68c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c690:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c694:	edc4 7a01 	vstr	s15, [r4, #4]
 800c698:	e7dd      	b.n	800c656 <__ieee754_rem_pio2f+0x5a>
 800c69a:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800c850 <__ieee754_rem_pio2f+0x254>
 800c69e:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800c854 <__ieee754_rem_pio2f+0x258>
 800c6a2:	ee77 7a80 	vadd.f32	s15, s15, s0
 800c6a6:	ee77 6a87 	vadd.f32	s13, s15, s14
 800c6aa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c6ae:	edc0 6a00 	vstr	s13, [r0]
 800c6b2:	e7eb      	b.n	800c68c <__ieee754_rem_pio2f+0x90>
 800c6b4:	4b68      	ldr	r3, [pc, #416]	; (800c858 <__ieee754_rem_pio2f+0x25c>)
 800c6b6:	429d      	cmp	r5, r3
 800c6b8:	dc72      	bgt.n	800c7a0 <__ieee754_rem_pio2f+0x1a4>
 800c6ba:	f000 fdb1 	bl	800d220 <fabsf>
 800c6be:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800c85c <__ieee754_rem_pio2f+0x260>
 800c6c2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c6c6:	eee0 7a07 	vfma.f32	s15, s0, s14
 800c6ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c6ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c6d2:	ee17 0a90 	vmov	r0, s15
 800c6d6:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800c844 <__ieee754_rem_pio2f+0x248>
 800c6da:	eea7 0a67 	vfms.f32	s0, s14, s15
 800c6de:	281f      	cmp	r0, #31
 800c6e0:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800c84c <__ieee754_rem_pio2f+0x250>
 800c6e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c6e8:	eeb1 6a47 	vneg.f32	s12, s14
 800c6ec:	ee70 6a67 	vsub.f32	s13, s0, s15
 800c6f0:	ee16 2a90 	vmov	r2, s13
 800c6f4:	dc1c      	bgt.n	800c730 <__ieee754_rem_pio2f+0x134>
 800c6f6:	495a      	ldr	r1, [pc, #360]	; (800c860 <__ieee754_rem_pio2f+0x264>)
 800c6f8:	1e47      	subs	r7, r0, #1
 800c6fa:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800c6fe:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800c702:	428b      	cmp	r3, r1
 800c704:	d014      	beq.n	800c730 <__ieee754_rem_pio2f+0x134>
 800c706:	6022      	str	r2, [r4, #0]
 800c708:	ed94 7a00 	vldr	s14, [r4]
 800c70c:	ee30 0a47 	vsub.f32	s0, s0, s14
 800c710:	2e00      	cmp	r6, #0
 800c712:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c716:	ed84 0a01 	vstr	s0, [r4, #4]
 800c71a:	da9c      	bge.n	800c656 <__ieee754_rem_pio2f+0x5a>
 800c71c:	eeb1 7a47 	vneg.f32	s14, s14
 800c720:	eeb1 0a40 	vneg.f32	s0, s0
 800c724:	ed84 7a00 	vstr	s14, [r4]
 800c728:	ed84 0a01 	vstr	s0, [r4, #4]
 800c72c:	4240      	negs	r0, r0
 800c72e:	e792      	b.n	800c656 <__ieee754_rem_pio2f+0x5a>
 800c730:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800c734:	15eb      	asrs	r3, r5, #23
 800c736:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800c73a:	2d08      	cmp	r5, #8
 800c73c:	dde3      	ble.n	800c706 <__ieee754_rem_pio2f+0x10a>
 800c73e:	eddf 7a44 	vldr	s15, [pc, #272]	; 800c850 <__ieee754_rem_pio2f+0x254>
 800c742:	eddf 5a44 	vldr	s11, [pc, #272]	; 800c854 <__ieee754_rem_pio2f+0x258>
 800c746:	eef0 6a40 	vmov.f32	s13, s0
 800c74a:	eee6 6a27 	vfma.f32	s13, s12, s15
 800c74e:	ee30 0a66 	vsub.f32	s0, s0, s13
 800c752:	eea6 0a27 	vfma.f32	s0, s12, s15
 800c756:	eef0 7a40 	vmov.f32	s15, s0
 800c75a:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800c75e:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800c762:	ee15 2a90 	vmov	r2, s11
 800c766:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800c76a:	1a5b      	subs	r3, r3, r1
 800c76c:	2b19      	cmp	r3, #25
 800c76e:	dc04      	bgt.n	800c77a <__ieee754_rem_pio2f+0x17e>
 800c770:	edc4 5a00 	vstr	s11, [r4]
 800c774:	eeb0 0a66 	vmov.f32	s0, s13
 800c778:	e7c6      	b.n	800c708 <__ieee754_rem_pio2f+0x10c>
 800c77a:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800c864 <__ieee754_rem_pio2f+0x268>
 800c77e:	eeb0 0a66 	vmov.f32	s0, s13
 800c782:	eea6 0a25 	vfma.f32	s0, s12, s11
 800c786:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800c78a:	eddf 6a37 	vldr	s13, [pc, #220]	; 800c868 <__ieee754_rem_pio2f+0x26c>
 800c78e:	eee6 7a25 	vfma.f32	s15, s12, s11
 800c792:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800c796:	ee30 7a67 	vsub.f32	s14, s0, s15
 800c79a:	ed84 7a00 	vstr	s14, [r4]
 800c79e:	e7b3      	b.n	800c708 <__ieee754_rem_pio2f+0x10c>
 800c7a0:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800c7a4:	db06      	blt.n	800c7b4 <__ieee754_rem_pio2f+0x1b8>
 800c7a6:	ee70 7a40 	vsub.f32	s15, s0, s0
 800c7aa:	edc0 7a01 	vstr	s15, [r0, #4]
 800c7ae:	edc0 7a00 	vstr	s15, [r0]
 800c7b2:	e733      	b.n	800c61c <__ieee754_rem_pio2f+0x20>
 800c7b4:	15ea      	asrs	r2, r5, #23
 800c7b6:	3a86      	subs	r2, #134	; 0x86
 800c7b8:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800c7bc:	ee07 3a90 	vmov	s15, r3
 800c7c0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800c7c4:	eddf 6a29 	vldr	s13, [pc, #164]	; 800c86c <__ieee754_rem_pio2f+0x270>
 800c7c8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c7cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c7d0:	ed8d 7a03 	vstr	s14, [sp, #12]
 800c7d4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c7d8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800c7dc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c7e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c7e4:	ed8d 7a04 	vstr	s14, [sp, #16]
 800c7e8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c7ec:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c7f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7f4:	edcd 7a05 	vstr	s15, [sp, #20]
 800c7f8:	d11e      	bne.n	800c838 <__ieee754_rem_pio2f+0x23c>
 800c7fa:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800c7fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c802:	bf14      	ite	ne
 800c804:	2302      	movne	r3, #2
 800c806:	2301      	moveq	r3, #1
 800c808:	4919      	ldr	r1, [pc, #100]	; (800c870 <__ieee754_rem_pio2f+0x274>)
 800c80a:	9101      	str	r1, [sp, #4]
 800c80c:	2102      	movs	r1, #2
 800c80e:	9100      	str	r1, [sp, #0]
 800c810:	a803      	add	r0, sp, #12
 800c812:	4621      	mov	r1, r4
 800c814:	f000 f892 	bl	800c93c <__kernel_rem_pio2f>
 800c818:	2e00      	cmp	r6, #0
 800c81a:	f6bf af1c 	bge.w	800c656 <__ieee754_rem_pio2f+0x5a>
 800c81e:	edd4 7a00 	vldr	s15, [r4]
 800c822:	eef1 7a67 	vneg.f32	s15, s15
 800c826:	edc4 7a00 	vstr	s15, [r4]
 800c82a:	edd4 7a01 	vldr	s15, [r4, #4]
 800c82e:	eef1 7a67 	vneg.f32	s15, s15
 800c832:	edc4 7a01 	vstr	s15, [r4, #4]
 800c836:	e779      	b.n	800c72c <__ieee754_rem_pio2f+0x130>
 800c838:	2303      	movs	r3, #3
 800c83a:	e7e5      	b.n	800c808 <__ieee754_rem_pio2f+0x20c>
 800c83c:	3f490fd8 	.word	0x3f490fd8
 800c840:	4016cbe3 	.word	0x4016cbe3
 800c844:	3fc90f80 	.word	0x3fc90f80
 800c848:	3fc90fd0 	.word	0x3fc90fd0
 800c84c:	37354443 	.word	0x37354443
 800c850:	37354400 	.word	0x37354400
 800c854:	2e85a308 	.word	0x2e85a308
 800c858:	43490f80 	.word	0x43490f80
 800c85c:	3f22f984 	.word	0x3f22f984
 800c860:	0800d824 	.word	0x0800d824
 800c864:	2e85a300 	.word	0x2e85a300
 800c868:	248d3132 	.word	0x248d3132
 800c86c:	43800000 	.word	0x43800000
 800c870:	0800d8a4 	.word	0x0800d8a4

0800c874 <__ieee754_sqrtf>:
 800c874:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c878:	4770      	bx	lr
	...

0800c87c <__kernel_cosf>:
 800c87c:	ee10 3a10 	vmov	r3, s0
 800c880:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c884:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800c888:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800c88c:	da05      	bge.n	800c89a <__kernel_cosf+0x1e>
 800c88e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800c892:	ee17 2a90 	vmov	r2, s15
 800c896:	2a00      	cmp	r2, #0
 800c898:	d03d      	beq.n	800c916 <__kernel_cosf+0x9a>
 800c89a:	ee60 5a00 	vmul.f32	s11, s0, s0
 800c89e:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800c91c <__kernel_cosf+0xa0>
 800c8a2:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800c920 <__kernel_cosf+0xa4>
 800c8a6:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800c924 <__kernel_cosf+0xa8>
 800c8aa:	4a1f      	ldr	r2, [pc, #124]	; (800c928 <__kernel_cosf+0xac>)
 800c8ac:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800c8b0:	4293      	cmp	r3, r2
 800c8b2:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800c92c <__kernel_cosf+0xb0>
 800c8b6:	eee7 7a25 	vfma.f32	s15, s14, s11
 800c8ba:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800c930 <__kernel_cosf+0xb4>
 800c8be:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800c8c2:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800c934 <__kernel_cosf+0xb8>
 800c8c6:	eee7 7a25 	vfma.f32	s15, s14, s11
 800c8ca:	eeb0 7a66 	vmov.f32	s14, s13
 800c8ce:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800c8d2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800c8d6:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800c8da:	ee67 6a25 	vmul.f32	s13, s14, s11
 800c8de:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800c8e2:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800c8e6:	dc04      	bgt.n	800c8f2 <__kernel_cosf+0x76>
 800c8e8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800c8ec:	ee36 0a47 	vsub.f32	s0, s12, s14
 800c8f0:	4770      	bx	lr
 800c8f2:	4a11      	ldr	r2, [pc, #68]	; (800c938 <__kernel_cosf+0xbc>)
 800c8f4:	4293      	cmp	r3, r2
 800c8f6:	bfda      	itte	le
 800c8f8:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800c8fc:	ee06 3a90 	vmovle	s13, r3
 800c900:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 800c904:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c908:	ee36 0a66 	vsub.f32	s0, s12, s13
 800c90c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c910:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c914:	4770      	bx	lr
 800c916:	eeb0 0a46 	vmov.f32	s0, s12
 800c91a:	4770      	bx	lr
 800c91c:	ad47d74e 	.word	0xad47d74e
 800c920:	310f74f6 	.word	0x310f74f6
 800c924:	3d2aaaab 	.word	0x3d2aaaab
 800c928:	3e999999 	.word	0x3e999999
 800c92c:	b493f27c 	.word	0xb493f27c
 800c930:	37d00d01 	.word	0x37d00d01
 800c934:	bab60b61 	.word	0xbab60b61
 800c938:	3f480000 	.word	0x3f480000

0800c93c <__kernel_rem_pio2f>:
 800c93c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c940:	ed2d 8b04 	vpush	{d8-d9}
 800c944:	b0d9      	sub	sp, #356	; 0x164
 800c946:	4688      	mov	r8, r1
 800c948:	9002      	str	r0, [sp, #8]
 800c94a:	49bb      	ldr	r1, [pc, #748]	; (800cc38 <__kernel_rem_pio2f+0x2fc>)
 800c94c:	9866      	ldr	r0, [sp, #408]	; 0x198
 800c94e:	9301      	str	r3, [sp, #4]
 800c950:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800c954:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 800c958:	1e59      	subs	r1, r3, #1
 800c95a:	1d13      	adds	r3, r2, #4
 800c95c:	db27      	blt.n	800c9ae <__kernel_rem_pio2f+0x72>
 800c95e:	f1b2 0b03 	subs.w	fp, r2, #3
 800c962:	bf48      	it	mi
 800c964:	f102 0b04 	addmi.w	fp, r2, #4
 800c968:	ea4f 00eb 	mov.w	r0, fp, asr #3
 800c96c:	1c45      	adds	r5, r0, #1
 800c96e:	00ec      	lsls	r4, r5, #3
 800c970:	1a47      	subs	r7, r0, r1
 800c972:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 800cc48 <__kernel_rem_pio2f+0x30c>
 800c976:	9403      	str	r4, [sp, #12]
 800c978:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800c97c:	eb0a 0c01 	add.w	ip, sl, r1
 800c980:	ae1c      	add	r6, sp, #112	; 0x70
 800c982:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 800c986:	2400      	movs	r4, #0
 800c988:	4564      	cmp	r4, ip
 800c98a:	dd12      	ble.n	800c9b2 <__kernel_rem_pio2f+0x76>
 800c98c:	9b01      	ldr	r3, [sp, #4]
 800c98e:	ac1c      	add	r4, sp, #112	; 0x70
 800c990:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800c994:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 800c998:	f04f 0c00 	mov.w	ip, #0
 800c99c:	45d4      	cmp	ip, sl
 800c99e:	dc27      	bgt.n	800c9f0 <__kernel_rem_pio2f+0xb4>
 800c9a0:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800c9a4:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800cc48 <__kernel_rem_pio2f+0x30c>
 800c9a8:	4627      	mov	r7, r4
 800c9aa:	2600      	movs	r6, #0
 800c9ac:	e016      	b.n	800c9dc <__kernel_rem_pio2f+0xa0>
 800c9ae:	2000      	movs	r0, #0
 800c9b0:	e7dc      	b.n	800c96c <__kernel_rem_pio2f+0x30>
 800c9b2:	42e7      	cmn	r7, r4
 800c9b4:	bf5d      	ittte	pl
 800c9b6:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 800c9ba:	ee07 3a90 	vmovpl	s15, r3
 800c9be:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800c9c2:	eef0 7a47 	vmovmi.f32	s15, s14
 800c9c6:	ece6 7a01 	vstmia	r6!, {s15}
 800c9ca:	3401      	adds	r4, #1
 800c9cc:	e7dc      	b.n	800c988 <__kernel_rem_pio2f+0x4c>
 800c9ce:	ecf9 6a01 	vldmia	r9!, {s13}
 800c9d2:	ed97 7a00 	vldr	s14, [r7]
 800c9d6:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c9da:	3601      	adds	r6, #1
 800c9dc:	428e      	cmp	r6, r1
 800c9de:	f1a7 0704 	sub.w	r7, r7, #4
 800c9e2:	ddf4      	ble.n	800c9ce <__kernel_rem_pio2f+0x92>
 800c9e4:	eceb 7a01 	vstmia	fp!, {s15}
 800c9e8:	f10c 0c01 	add.w	ip, ip, #1
 800c9ec:	3404      	adds	r4, #4
 800c9ee:	e7d5      	b.n	800c99c <__kernel_rem_pio2f+0x60>
 800c9f0:	ab08      	add	r3, sp, #32
 800c9f2:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800c9f6:	eddf 8a93 	vldr	s17, [pc, #588]	; 800cc44 <__kernel_rem_pio2f+0x308>
 800c9fa:	ed9f 9a91 	vldr	s18, [pc, #580]	; 800cc40 <__kernel_rem_pio2f+0x304>
 800c9fe:	9304      	str	r3, [sp, #16]
 800ca00:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 800ca04:	4656      	mov	r6, sl
 800ca06:	00b3      	lsls	r3, r6, #2
 800ca08:	9305      	str	r3, [sp, #20]
 800ca0a:	ab58      	add	r3, sp, #352	; 0x160
 800ca0c:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800ca10:	ac08      	add	r4, sp, #32
 800ca12:	ab44      	add	r3, sp, #272	; 0x110
 800ca14:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800ca18:	46a4      	mov	ip, r4
 800ca1a:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800ca1e:	4637      	mov	r7, r6
 800ca20:	2f00      	cmp	r7, #0
 800ca22:	f1a0 0004 	sub.w	r0, r0, #4
 800ca26:	dc4f      	bgt.n	800cac8 <__kernel_rem_pio2f+0x18c>
 800ca28:	4628      	mov	r0, r5
 800ca2a:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800ca2e:	f000 fc47 	bl	800d2c0 <scalbnf>
 800ca32:	eeb0 8a40 	vmov.f32	s16, s0
 800ca36:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800ca3a:	ee28 0a00 	vmul.f32	s0, s16, s0
 800ca3e:	f000 fbf7 	bl	800d230 <floorf>
 800ca42:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800ca46:	eea0 8a67 	vfms.f32	s16, s0, s15
 800ca4a:	2d00      	cmp	r5, #0
 800ca4c:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800ca50:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800ca54:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800ca58:	ee17 9a90 	vmov	r9, s15
 800ca5c:	ee38 8a40 	vsub.f32	s16, s16, s0
 800ca60:	dd44      	ble.n	800caec <__kernel_rem_pio2f+0x1b0>
 800ca62:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800ca66:	ab08      	add	r3, sp, #32
 800ca68:	f1c5 0e08 	rsb	lr, r5, #8
 800ca6c:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800ca70:	fa47 f00e 	asr.w	r0, r7, lr
 800ca74:	4481      	add	r9, r0
 800ca76:	fa00 f00e 	lsl.w	r0, r0, lr
 800ca7a:	1a3f      	subs	r7, r7, r0
 800ca7c:	f1c5 0007 	rsb	r0, r5, #7
 800ca80:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800ca84:	4107      	asrs	r7, r0
 800ca86:	2f00      	cmp	r7, #0
 800ca88:	dd3f      	ble.n	800cb0a <__kernel_rem_pio2f+0x1ce>
 800ca8a:	f04f 0e00 	mov.w	lr, #0
 800ca8e:	f109 0901 	add.w	r9, r9, #1
 800ca92:	4673      	mov	r3, lr
 800ca94:	4576      	cmp	r6, lr
 800ca96:	dc6b      	bgt.n	800cb70 <__kernel_rem_pio2f+0x234>
 800ca98:	2d00      	cmp	r5, #0
 800ca9a:	dd04      	ble.n	800caa6 <__kernel_rem_pio2f+0x16a>
 800ca9c:	2d01      	cmp	r5, #1
 800ca9e:	d078      	beq.n	800cb92 <__kernel_rem_pio2f+0x256>
 800caa0:	2d02      	cmp	r5, #2
 800caa2:	f000 8081 	beq.w	800cba8 <__kernel_rem_pio2f+0x26c>
 800caa6:	2f02      	cmp	r7, #2
 800caa8:	d12f      	bne.n	800cb0a <__kernel_rem_pio2f+0x1ce>
 800caaa:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800caae:	ee30 8a48 	vsub.f32	s16, s0, s16
 800cab2:	b353      	cbz	r3, 800cb0a <__kernel_rem_pio2f+0x1ce>
 800cab4:	4628      	mov	r0, r5
 800cab6:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800caba:	f000 fc01 	bl	800d2c0 <scalbnf>
 800cabe:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800cac2:	ee38 8a40 	vsub.f32	s16, s16, s0
 800cac6:	e020      	b.n	800cb0a <__kernel_rem_pio2f+0x1ce>
 800cac8:	ee60 7a28 	vmul.f32	s15, s0, s17
 800cacc:	3f01      	subs	r7, #1
 800cace:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cad2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cad6:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800cada:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800cade:	ecac 0a01 	vstmia	ip!, {s0}
 800cae2:	ed90 0a00 	vldr	s0, [r0]
 800cae6:	ee37 0a80 	vadd.f32	s0, s15, s0
 800caea:	e799      	b.n	800ca20 <__kernel_rem_pio2f+0xe4>
 800caec:	d105      	bne.n	800cafa <__kernel_rem_pio2f+0x1be>
 800caee:	1e70      	subs	r0, r6, #1
 800caf0:	ab08      	add	r3, sp, #32
 800caf2:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800caf6:	11ff      	asrs	r7, r7, #7
 800caf8:	e7c5      	b.n	800ca86 <__kernel_rem_pio2f+0x14a>
 800cafa:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800cafe:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800cb02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb06:	da31      	bge.n	800cb6c <__kernel_rem_pio2f+0x230>
 800cb08:	2700      	movs	r7, #0
 800cb0a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800cb0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb12:	f040 809b 	bne.w	800cc4c <__kernel_rem_pio2f+0x310>
 800cb16:	1e74      	subs	r4, r6, #1
 800cb18:	46a4      	mov	ip, r4
 800cb1a:	2000      	movs	r0, #0
 800cb1c:	45d4      	cmp	ip, sl
 800cb1e:	da4a      	bge.n	800cbb6 <__kernel_rem_pio2f+0x27a>
 800cb20:	2800      	cmp	r0, #0
 800cb22:	d07a      	beq.n	800cc1a <__kernel_rem_pio2f+0x2de>
 800cb24:	ab08      	add	r3, sp, #32
 800cb26:	3d08      	subs	r5, #8
 800cb28:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	f000 8081 	beq.w	800cc34 <__kernel_rem_pio2f+0x2f8>
 800cb32:	4628      	mov	r0, r5
 800cb34:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800cb38:	00a5      	lsls	r5, r4, #2
 800cb3a:	f000 fbc1 	bl	800d2c0 <scalbnf>
 800cb3e:	aa44      	add	r2, sp, #272	; 0x110
 800cb40:	1d2b      	adds	r3, r5, #4
 800cb42:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800cc44 <__kernel_rem_pio2f+0x308>
 800cb46:	18d1      	adds	r1, r2, r3
 800cb48:	4622      	mov	r2, r4
 800cb4a:	2a00      	cmp	r2, #0
 800cb4c:	f280 80ae 	bge.w	800ccac <__kernel_rem_pio2f+0x370>
 800cb50:	4622      	mov	r2, r4
 800cb52:	2a00      	cmp	r2, #0
 800cb54:	f2c0 80cc 	blt.w	800ccf0 <__kernel_rem_pio2f+0x3b4>
 800cb58:	a944      	add	r1, sp, #272	; 0x110
 800cb5a:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800cb5e:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800cc3c <__kernel_rem_pio2f+0x300>
 800cb62:	eddf 7a39 	vldr	s15, [pc, #228]	; 800cc48 <__kernel_rem_pio2f+0x30c>
 800cb66:	2000      	movs	r0, #0
 800cb68:	1aa1      	subs	r1, r4, r2
 800cb6a:	e0b6      	b.n	800ccda <__kernel_rem_pio2f+0x39e>
 800cb6c:	2702      	movs	r7, #2
 800cb6e:	e78c      	b.n	800ca8a <__kernel_rem_pio2f+0x14e>
 800cb70:	6820      	ldr	r0, [r4, #0]
 800cb72:	b94b      	cbnz	r3, 800cb88 <__kernel_rem_pio2f+0x24c>
 800cb74:	b118      	cbz	r0, 800cb7e <__kernel_rem_pio2f+0x242>
 800cb76:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800cb7a:	6020      	str	r0, [r4, #0]
 800cb7c:	2001      	movs	r0, #1
 800cb7e:	f10e 0e01 	add.w	lr, lr, #1
 800cb82:	3404      	adds	r4, #4
 800cb84:	4603      	mov	r3, r0
 800cb86:	e785      	b.n	800ca94 <__kernel_rem_pio2f+0x158>
 800cb88:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800cb8c:	6020      	str	r0, [r4, #0]
 800cb8e:	4618      	mov	r0, r3
 800cb90:	e7f5      	b.n	800cb7e <__kernel_rem_pio2f+0x242>
 800cb92:	1e74      	subs	r4, r6, #1
 800cb94:	a808      	add	r0, sp, #32
 800cb96:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800cb9a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800cb9e:	f10d 0c20 	add.w	ip, sp, #32
 800cba2:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 800cba6:	e77e      	b.n	800caa6 <__kernel_rem_pio2f+0x16a>
 800cba8:	1e74      	subs	r4, r6, #1
 800cbaa:	a808      	add	r0, sp, #32
 800cbac:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800cbb0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800cbb4:	e7f3      	b.n	800cb9e <__kernel_rem_pio2f+0x262>
 800cbb6:	ab08      	add	r3, sp, #32
 800cbb8:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800cbbc:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800cbc0:	4318      	orrs	r0, r3
 800cbc2:	e7ab      	b.n	800cb1c <__kernel_rem_pio2f+0x1e0>
 800cbc4:	f10c 0c01 	add.w	ip, ip, #1
 800cbc8:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 800cbcc:	2c00      	cmp	r4, #0
 800cbce:	d0f9      	beq.n	800cbc4 <__kernel_rem_pio2f+0x288>
 800cbd0:	9b05      	ldr	r3, [sp, #20]
 800cbd2:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800cbd6:	eb0d 0003 	add.w	r0, sp, r3
 800cbda:	9b01      	ldr	r3, [sp, #4]
 800cbdc:	18f4      	adds	r4, r6, r3
 800cbde:	ab1c      	add	r3, sp, #112	; 0x70
 800cbe0:	1c77      	adds	r7, r6, #1
 800cbe2:	384c      	subs	r0, #76	; 0x4c
 800cbe4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cbe8:	4466      	add	r6, ip
 800cbea:	42be      	cmp	r6, r7
 800cbec:	f6ff af0b 	blt.w	800ca06 <__kernel_rem_pio2f+0xca>
 800cbf0:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 800cbf4:	f8dd e008 	ldr.w	lr, [sp, #8]
 800cbf8:	ee07 3a90 	vmov	s15, r3
 800cbfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cc00:	f04f 0c00 	mov.w	ip, #0
 800cc04:	ece4 7a01 	vstmia	r4!, {s15}
 800cc08:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800cc48 <__kernel_rem_pio2f+0x30c>
 800cc0c:	46a1      	mov	r9, r4
 800cc0e:	458c      	cmp	ip, r1
 800cc10:	dd07      	ble.n	800cc22 <__kernel_rem_pio2f+0x2e6>
 800cc12:	ece0 7a01 	vstmia	r0!, {s15}
 800cc16:	3701      	adds	r7, #1
 800cc18:	e7e7      	b.n	800cbea <__kernel_rem_pio2f+0x2ae>
 800cc1a:	9804      	ldr	r0, [sp, #16]
 800cc1c:	f04f 0c01 	mov.w	ip, #1
 800cc20:	e7d2      	b.n	800cbc8 <__kernel_rem_pio2f+0x28c>
 800cc22:	ecfe 6a01 	vldmia	lr!, {s13}
 800cc26:	ed39 7a01 	vldmdb	r9!, {s14}
 800cc2a:	f10c 0c01 	add.w	ip, ip, #1
 800cc2e:	eee6 7a87 	vfma.f32	s15, s13, s14
 800cc32:	e7ec      	b.n	800cc0e <__kernel_rem_pio2f+0x2d2>
 800cc34:	3c01      	subs	r4, #1
 800cc36:	e775      	b.n	800cb24 <__kernel_rem_pio2f+0x1e8>
 800cc38:	0800dbe8 	.word	0x0800dbe8
 800cc3c:	0800dbbc 	.word	0x0800dbbc
 800cc40:	43800000 	.word	0x43800000
 800cc44:	3b800000 	.word	0x3b800000
 800cc48:	00000000 	.word	0x00000000
 800cc4c:	9b03      	ldr	r3, [sp, #12]
 800cc4e:	eeb0 0a48 	vmov.f32	s0, s16
 800cc52:	1a98      	subs	r0, r3, r2
 800cc54:	f000 fb34 	bl	800d2c0 <scalbnf>
 800cc58:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800cc40 <__kernel_rem_pio2f+0x304>
 800cc5c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800cc60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc64:	db19      	blt.n	800cc9a <__kernel_rem_pio2f+0x35e>
 800cc66:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800cc44 <__kernel_rem_pio2f+0x308>
 800cc6a:	ee60 7a27 	vmul.f32	s15, s0, s15
 800cc6e:	aa08      	add	r2, sp, #32
 800cc70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cc74:	1c74      	adds	r4, r6, #1
 800cc76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cc7a:	3508      	adds	r5, #8
 800cc7c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800cc80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cc84:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800cc88:	ee10 3a10 	vmov	r3, s0
 800cc8c:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800cc90:	ee17 3a90 	vmov	r3, s15
 800cc94:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800cc98:	e74b      	b.n	800cb32 <__kernel_rem_pio2f+0x1f6>
 800cc9a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800cc9e:	aa08      	add	r2, sp, #32
 800cca0:	ee10 3a10 	vmov	r3, s0
 800cca4:	4634      	mov	r4, r6
 800cca6:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800ccaa:	e742      	b.n	800cb32 <__kernel_rem_pio2f+0x1f6>
 800ccac:	a808      	add	r0, sp, #32
 800ccae:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800ccb2:	9001      	str	r0, [sp, #4]
 800ccb4:	ee07 0a90 	vmov	s15, r0
 800ccb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ccbc:	3a01      	subs	r2, #1
 800ccbe:	ee67 7a80 	vmul.f32	s15, s15, s0
 800ccc2:	ee20 0a07 	vmul.f32	s0, s0, s14
 800ccc6:	ed61 7a01 	vstmdb	r1!, {s15}
 800ccca:	e73e      	b.n	800cb4a <__kernel_rem_pio2f+0x20e>
 800cccc:	ecfc 6a01 	vldmia	ip!, {s13}
 800ccd0:	ecb6 7a01 	vldmia	r6!, {s14}
 800ccd4:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ccd8:	3001      	adds	r0, #1
 800ccda:	4550      	cmp	r0, sl
 800ccdc:	dc01      	bgt.n	800cce2 <__kernel_rem_pio2f+0x3a6>
 800ccde:	4288      	cmp	r0, r1
 800cce0:	ddf4      	ble.n	800cccc <__kernel_rem_pio2f+0x390>
 800cce2:	a858      	add	r0, sp, #352	; 0x160
 800cce4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cce8:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800ccec:	3a01      	subs	r2, #1
 800ccee:	e730      	b.n	800cb52 <__kernel_rem_pio2f+0x216>
 800ccf0:	9a66      	ldr	r2, [sp, #408]	; 0x198
 800ccf2:	2a02      	cmp	r2, #2
 800ccf4:	dc09      	bgt.n	800cd0a <__kernel_rem_pio2f+0x3ce>
 800ccf6:	2a00      	cmp	r2, #0
 800ccf8:	dc2a      	bgt.n	800cd50 <__kernel_rem_pio2f+0x414>
 800ccfa:	d043      	beq.n	800cd84 <__kernel_rem_pio2f+0x448>
 800ccfc:	f009 0007 	and.w	r0, r9, #7
 800cd00:	b059      	add	sp, #356	; 0x164
 800cd02:	ecbd 8b04 	vpop	{d8-d9}
 800cd06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd0a:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800cd0c:	2b03      	cmp	r3, #3
 800cd0e:	d1f5      	bne.n	800ccfc <__kernel_rem_pio2f+0x3c0>
 800cd10:	ab30      	add	r3, sp, #192	; 0xc0
 800cd12:	442b      	add	r3, r5
 800cd14:	461a      	mov	r2, r3
 800cd16:	4619      	mov	r1, r3
 800cd18:	4620      	mov	r0, r4
 800cd1a:	2800      	cmp	r0, #0
 800cd1c:	f1a1 0104 	sub.w	r1, r1, #4
 800cd20:	dc51      	bgt.n	800cdc6 <__kernel_rem_pio2f+0x48a>
 800cd22:	4621      	mov	r1, r4
 800cd24:	2901      	cmp	r1, #1
 800cd26:	f1a2 0204 	sub.w	r2, r2, #4
 800cd2a:	dc5c      	bgt.n	800cde6 <__kernel_rem_pio2f+0x4aa>
 800cd2c:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800cc48 <__kernel_rem_pio2f+0x30c>
 800cd30:	3304      	adds	r3, #4
 800cd32:	2c01      	cmp	r4, #1
 800cd34:	dc67      	bgt.n	800ce06 <__kernel_rem_pio2f+0x4ca>
 800cd36:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800cd3a:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800cd3e:	2f00      	cmp	r7, #0
 800cd40:	d167      	bne.n	800ce12 <__kernel_rem_pio2f+0x4d6>
 800cd42:	edc8 6a00 	vstr	s13, [r8]
 800cd46:	ed88 7a01 	vstr	s14, [r8, #4]
 800cd4a:	edc8 7a02 	vstr	s15, [r8, #8]
 800cd4e:	e7d5      	b.n	800ccfc <__kernel_rem_pio2f+0x3c0>
 800cd50:	aa30      	add	r2, sp, #192	; 0xc0
 800cd52:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 800cc48 <__kernel_rem_pio2f+0x30c>
 800cd56:	4413      	add	r3, r2
 800cd58:	4622      	mov	r2, r4
 800cd5a:	2a00      	cmp	r2, #0
 800cd5c:	da24      	bge.n	800cda8 <__kernel_rem_pio2f+0x46c>
 800cd5e:	b34f      	cbz	r7, 800cdb4 <__kernel_rem_pio2f+0x478>
 800cd60:	eef1 7a47 	vneg.f32	s15, s14
 800cd64:	edc8 7a00 	vstr	s15, [r8]
 800cd68:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800cd6c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cd70:	aa31      	add	r2, sp, #196	; 0xc4
 800cd72:	2301      	movs	r3, #1
 800cd74:	429c      	cmp	r4, r3
 800cd76:	da20      	bge.n	800cdba <__kernel_rem_pio2f+0x47e>
 800cd78:	b10f      	cbz	r7, 800cd7e <__kernel_rem_pio2f+0x442>
 800cd7a:	eef1 7a67 	vneg.f32	s15, s15
 800cd7e:	edc8 7a01 	vstr	s15, [r8, #4]
 800cd82:	e7bb      	b.n	800ccfc <__kernel_rem_pio2f+0x3c0>
 800cd84:	aa30      	add	r2, sp, #192	; 0xc0
 800cd86:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 800cc48 <__kernel_rem_pio2f+0x30c>
 800cd8a:	4413      	add	r3, r2
 800cd8c:	2c00      	cmp	r4, #0
 800cd8e:	da05      	bge.n	800cd9c <__kernel_rem_pio2f+0x460>
 800cd90:	b10f      	cbz	r7, 800cd96 <__kernel_rem_pio2f+0x45a>
 800cd92:	eef1 7a67 	vneg.f32	s15, s15
 800cd96:	edc8 7a00 	vstr	s15, [r8]
 800cd9a:	e7af      	b.n	800ccfc <__kernel_rem_pio2f+0x3c0>
 800cd9c:	ed33 7a01 	vldmdb	r3!, {s14}
 800cda0:	3c01      	subs	r4, #1
 800cda2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cda6:	e7f1      	b.n	800cd8c <__kernel_rem_pio2f+0x450>
 800cda8:	ed73 7a01 	vldmdb	r3!, {s15}
 800cdac:	3a01      	subs	r2, #1
 800cdae:	ee37 7a27 	vadd.f32	s14, s14, s15
 800cdb2:	e7d2      	b.n	800cd5a <__kernel_rem_pio2f+0x41e>
 800cdb4:	eef0 7a47 	vmov.f32	s15, s14
 800cdb8:	e7d4      	b.n	800cd64 <__kernel_rem_pio2f+0x428>
 800cdba:	ecb2 7a01 	vldmia	r2!, {s14}
 800cdbe:	3301      	adds	r3, #1
 800cdc0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cdc4:	e7d6      	b.n	800cd74 <__kernel_rem_pio2f+0x438>
 800cdc6:	edd1 7a00 	vldr	s15, [r1]
 800cdca:	edd1 6a01 	vldr	s13, [r1, #4]
 800cdce:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800cdd2:	3801      	subs	r0, #1
 800cdd4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cdd8:	ed81 7a00 	vstr	s14, [r1]
 800cddc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cde0:	edc1 7a01 	vstr	s15, [r1, #4]
 800cde4:	e799      	b.n	800cd1a <__kernel_rem_pio2f+0x3de>
 800cde6:	edd2 7a00 	vldr	s15, [r2]
 800cdea:	edd2 6a01 	vldr	s13, [r2, #4]
 800cdee:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800cdf2:	3901      	subs	r1, #1
 800cdf4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cdf8:	ed82 7a00 	vstr	s14, [r2]
 800cdfc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce00:	edc2 7a01 	vstr	s15, [r2, #4]
 800ce04:	e78e      	b.n	800cd24 <__kernel_rem_pio2f+0x3e8>
 800ce06:	ed33 7a01 	vldmdb	r3!, {s14}
 800ce0a:	3c01      	subs	r4, #1
 800ce0c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ce10:	e78f      	b.n	800cd32 <__kernel_rem_pio2f+0x3f6>
 800ce12:	eef1 6a66 	vneg.f32	s13, s13
 800ce16:	eeb1 7a47 	vneg.f32	s14, s14
 800ce1a:	edc8 6a00 	vstr	s13, [r8]
 800ce1e:	ed88 7a01 	vstr	s14, [r8, #4]
 800ce22:	eef1 7a67 	vneg.f32	s15, s15
 800ce26:	e790      	b.n	800cd4a <__kernel_rem_pio2f+0x40e>

0800ce28 <__kernel_sinf>:
 800ce28:	ee10 3a10 	vmov	r3, s0
 800ce2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ce30:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800ce34:	da04      	bge.n	800ce40 <__kernel_sinf+0x18>
 800ce36:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800ce3a:	ee17 3a90 	vmov	r3, s15
 800ce3e:	b35b      	cbz	r3, 800ce98 <__kernel_sinf+0x70>
 800ce40:	ee20 7a00 	vmul.f32	s14, s0, s0
 800ce44:	eddf 7a15 	vldr	s15, [pc, #84]	; 800ce9c <__kernel_sinf+0x74>
 800ce48:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800cea0 <__kernel_sinf+0x78>
 800ce4c:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ce50:	eddf 7a14 	vldr	s15, [pc, #80]	; 800cea4 <__kernel_sinf+0x7c>
 800ce54:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ce58:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800cea8 <__kernel_sinf+0x80>
 800ce5c:	eea7 6a87 	vfma.f32	s12, s15, s14
 800ce60:	eddf 7a12 	vldr	s15, [pc, #72]	; 800ceac <__kernel_sinf+0x84>
 800ce64:	ee60 6a07 	vmul.f32	s13, s0, s14
 800ce68:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ce6c:	b930      	cbnz	r0, 800ce7c <__kernel_sinf+0x54>
 800ce6e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800ceb0 <__kernel_sinf+0x88>
 800ce72:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ce76:	eea6 0a26 	vfma.f32	s0, s12, s13
 800ce7a:	4770      	bx	lr
 800ce7c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800ce80:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800ce84:	eee0 7a86 	vfma.f32	s15, s1, s12
 800ce88:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800ce8c:	eddf 7a09 	vldr	s15, [pc, #36]	; 800ceb4 <__kernel_sinf+0x8c>
 800ce90:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800ce94:	ee30 0a60 	vsub.f32	s0, s0, s1
 800ce98:	4770      	bx	lr
 800ce9a:	bf00      	nop
 800ce9c:	2f2ec9d3 	.word	0x2f2ec9d3
 800cea0:	b2d72f34 	.word	0xb2d72f34
 800cea4:	3638ef1b 	.word	0x3638ef1b
 800cea8:	b9500d01 	.word	0xb9500d01
 800ceac:	3c088889 	.word	0x3c088889
 800ceb0:	be2aaaab 	.word	0xbe2aaaab
 800ceb4:	3e2aaaab 	.word	0x3e2aaaab

0800ceb8 <__kernel_tanf>:
 800ceb8:	b508      	push	{r3, lr}
 800ceba:	ee10 3a10 	vmov	r3, s0
 800cebe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800cec2:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 800cec6:	eef0 7a40 	vmov.f32	s15, s0
 800ceca:	da17      	bge.n	800cefc <__kernel_tanf+0x44>
 800cecc:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 800ced0:	ee17 1a10 	vmov	r1, s14
 800ced4:	bb41      	cbnz	r1, 800cf28 <__kernel_tanf+0x70>
 800ced6:	1c43      	adds	r3, r0, #1
 800ced8:	4313      	orrs	r3, r2
 800ceda:	d108      	bne.n	800ceee <__kernel_tanf+0x36>
 800cedc:	f000 f9a0 	bl	800d220 <fabsf>
 800cee0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cee4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800cee8:	eeb0 0a67 	vmov.f32	s0, s15
 800ceec:	bd08      	pop	{r3, pc}
 800ceee:	2801      	cmp	r0, #1
 800cef0:	d0fa      	beq.n	800cee8 <__kernel_tanf+0x30>
 800cef2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800cef6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800cefa:	e7f5      	b.n	800cee8 <__kernel_tanf+0x30>
 800cefc:	494c      	ldr	r1, [pc, #304]	; (800d030 <__kernel_tanf+0x178>)
 800cefe:	428a      	cmp	r2, r1
 800cf00:	db12      	blt.n	800cf28 <__kernel_tanf+0x70>
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	bfb8      	it	lt
 800cf06:	eef1 7a40 	vneglt.f32	s15, s0
 800cf0a:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 800d034 <__kernel_tanf+0x17c>
 800cf0e:	ee70 7a67 	vsub.f32	s15, s0, s15
 800cf12:	ed9f 0a49 	vldr	s0, [pc, #292]	; 800d038 <__kernel_tanf+0x180>
 800cf16:	bfb8      	it	lt
 800cf18:	eef1 0a60 	vneglt.f32	s1, s1
 800cf1c:	ee70 0a60 	vsub.f32	s1, s0, s1
 800cf20:	ee70 7aa7 	vadd.f32	s15, s1, s15
 800cf24:	eddf 0a45 	vldr	s1, [pc, #276]	; 800d03c <__kernel_tanf+0x184>
 800cf28:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d040 <__kernel_tanf+0x188>
 800cf2c:	ed9f 6a45 	vldr	s12, [pc, #276]	; 800d044 <__kernel_tanf+0x18c>
 800cf30:	ed9f 5a45 	vldr	s10, [pc, #276]	; 800d048 <__kernel_tanf+0x190>
 800cf34:	493e      	ldr	r1, [pc, #248]	; (800d030 <__kernel_tanf+0x178>)
 800cf36:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800cf3a:	428a      	cmp	r2, r1
 800cf3c:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800cf40:	eea7 6a25 	vfma.f32	s12, s14, s11
 800cf44:	eddf 5a41 	vldr	s11, [pc, #260]	; 800d04c <__kernel_tanf+0x194>
 800cf48:	eee6 5a07 	vfma.f32	s11, s12, s14
 800cf4c:	ed9f 6a40 	vldr	s12, [pc, #256]	; 800d050 <__kernel_tanf+0x198>
 800cf50:	eea5 6a87 	vfma.f32	s12, s11, s14
 800cf54:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800d054 <__kernel_tanf+0x19c>
 800cf58:	eee6 5a07 	vfma.f32	s11, s12, s14
 800cf5c:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 800d058 <__kernel_tanf+0x1a0>
 800cf60:	eea5 6a87 	vfma.f32	s12, s11, s14
 800cf64:	eddf 5a3d 	vldr	s11, [pc, #244]	; 800d05c <__kernel_tanf+0x1a4>
 800cf68:	eee7 5a05 	vfma.f32	s11, s14, s10
 800cf6c:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 800d060 <__kernel_tanf+0x1a8>
 800cf70:	eea5 5a87 	vfma.f32	s10, s11, s14
 800cf74:	eddf 5a3b 	vldr	s11, [pc, #236]	; 800d064 <__kernel_tanf+0x1ac>
 800cf78:	eee5 5a07 	vfma.f32	s11, s10, s14
 800cf7c:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 800d068 <__kernel_tanf+0x1b0>
 800cf80:	eea5 5a87 	vfma.f32	s10, s11, s14
 800cf84:	eddf 5a39 	vldr	s11, [pc, #228]	; 800d06c <__kernel_tanf+0x1b4>
 800cf88:	eee5 5a07 	vfma.f32	s11, s10, s14
 800cf8c:	eeb0 7a46 	vmov.f32	s14, s12
 800cf90:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800cf94:	ee27 5aa6 	vmul.f32	s10, s15, s13
 800cf98:	eeb0 6a60 	vmov.f32	s12, s1
 800cf9c:	eea7 6a05 	vfma.f32	s12, s14, s10
 800cfa0:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800d070 <__kernel_tanf+0x1b8>
 800cfa4:	eee6 0a26 	vfma.f32	s1, s12, s13
 800cfa8:	eee5 0a07 	vfma.f32	s1, s10, s14
 800cfac:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800cfb0:	db1d      	blt.n	800cfee <__kernel_tanf+0x136>
 800cfb2:	ee06 0a90 	vmov	s13, r0
 800cfb6:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
 800cfba:	ee27 6a07 	vmul.f32	s12, s14, s14
 800cfbe:	ee37 7a00 	vadd.f32	s14, s14, s0
 800cfc2:	179b      	asrs	r3, r3, #30
 800cfc4:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800cfc8:	f003 0302 	and.w	r3, r3, #2
 800cfcc:	f1c3 0301 	rsb	r3, r3, #1
 800cfd0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800cfd4:	ee76 0ae0 	vsub.f32	s1, s13, s1
 800cfd8:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800cfdc:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800cfe0:	ee07 3a90 	vmov	s15, r3
 800cfe4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cfe8:	ee67 7a80 	vmul.f32	s15, s15, s0
 800cfec:	e77c      	b.n	800cee8 <__kernel_tanf+0x30>
 800cfee:	2801      	cmp	r0, #1
 800cff0:	d01b      	beq.n	800d02a <__kernel_tanf+0x172>
 800cff2:	4b20      	ldr	r3, [pc, #128]	; (800d074 <__kernel_tanf+0x1bc>)
 800cff4:	ee17 2a10 	vmov	r2, s14
 800cff8:	401a      	ands	r2, r3
 800cffa:	ee06 2a10 	vmov	s12, r2
 800cffe:	ee76 7a67 	vsub.f32	s15, s12, s15
 800d002:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800d006:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800d00a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d00e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d012:	ee16 2a90 	vmov	r2, s13
 800d016:	4013      	ands	r3, r2
 800d018:	ee07 3a90 	vmov	s15, r3
 800d01c:	eea6 7a27 	vfma.f32	s14, s12, s15
 800d020:	eea0 7aa7 	vfma.f32	s14, s1, s15
 800d024:	eee7 7a26 	vfma.f32	s15, s14, s13
 800d028:	e75e      	b.n	800cee8 <__kernel_tanf+0x30>
 800d02a:	eef0 7a47 	vmov.f32	s15, s14
 800d02e:	e75b      	b.n	800cee8 <__kernel_tanf+0x30>
 800d030:	3f2ca140 	.word	0x3f2ca140
 800d034:	3f490fda 	.word	0x3f490fda
 800d038:	33222168 	.word	0x33222168
 800d03c:	00000000 	.word	0x00000000
 800d040:	b79bae5f 	.word	0xb79bae5f
 800d044:	38a3f445 	.word	0x38a3f445
 800d048:	37d95384 	.word	0x37d95384
 800d04c:	3a1a26c8 	.word	0x3a1a26c8
 800d050:	3b6b6916 	.word	0x3b6b6916
 800d054:	3cb327a4 	.word	0x3cb327a4
 800d058:	3e088889 	.word	0x3e088889
 800d05c:	3895c07a 	.word	0x3895c07a
 800d060:	398137b9 	.word	0x398137b9
 800d064:	3abede48 	.word	0x3abede48
 800d068:	3c11371f 	.word	0x3c11371f
 800d06c:	3d5d0dd1 	.word	0x3d5d0dd1
 800d070:	3eaaaaab 	.word	0x3eaaaaab
 800d074:	fffff000 	.word	0xfffff000

0800d078 <atanf>:
 800d078:	b538      	push	{r3, r4, r5, lr}
 800d07a:	ee10 5a10 	vmov	r5, s0
 800d07e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800d082:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800d086:	eef0 7a40 	vmov.f32	s15, s0
 800d08a:	db10      	blt.n	800d0ae <atanf+0x36>
 800d08c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800d090:	dd04      	ble.n	800d09c <atanf+0x24>
 800d092:	ee70 7a00 	vadd.f32	s15, s0, s0
 800d096:	eeb0 0a67 	vmov.f32	s0, s15
 800d09a:	bd38      	pop	{r3, r4, r5, pc}
 800d09c:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800d1d4 <atanf+0x15c>
 800d0a0:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800d1d8 <atanf+0x160>
 800d0a4:	2d00      	cmp	r5, #0
 800d0a6:	bfd8      	it	le
 800d0a8:	eef0 7a40 	vmovle.f32	s15, s0
 800d0ac:	e7f3      	b.n	800d096 <atanf+0x1e>
 800d0ae:	4b4b      	ldr	r3, [pc, #300]	; (800d1dc <atanf+0x164>)
 800d0b0:	429c      	cmp	r4, r3
 800d0b2:	dc10      	bgt.n	800d0d6 <atanf+0x5e>
 800d0b4:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800d0b8:	da0a      	bge.n	800d0d0 <atanf+0x58>
 800d0ba:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800d1e0 <atanf+0x168>
 800d0be:	ee30 7a07 	vadd.f32	s14, s0, s14
 800d0c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d0c6:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800d0ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0ce:	dce2      	bgt.n	800d096 <atanf+0x1e>
 800d0d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d0d4:	e013      	b.n	800d0fe <atanf+0x86>
 800d0d6:	f000 f8a3 	bl	800d220 <fabsf>
 800d0da:	4b42      	ldr	r3, [pc, #264]	; (800d1e4 <atanf+0x16c>)
 800d0dc:	429c      	cmp	r4, r3
 800d0de:	dc4f      	bgt.n	800d180 <atanf+0x108>
 800d0e0:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800d0e4:	429c      	cmp	r4, r3
 800d0e6:	dc41      	bgt.n	800d16c <atanf+0xf4>
 800d0e8:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800d0ec:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800d0f0:	eea0 7a27 	vfma.f32	s14, s0, s15
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d0fa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800d0fe:	1c5a      	adds	r2, r3, #1
 800d100:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800d104:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800d1e8 <atanf+0x170>
 800d108:	eddf 5a38 	vldr	s11, [pc, #224]	; 800d1ec <atanf+0x174>
 800d10c:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800d1f0 <atanf+0x178>
 800d110:	ee66 6a06 	vmul.f32	s13, s12, s12
 800d114:	eee6 5a87 	vfma.f32	s11, s13, s14
 800d118:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800d1f4 <atanf+0x17c>
 800d11c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800d120:	eddf 5a35 	vldr	s11, [pc, #212]	; 800d1f8 <atanf+0x180>
 800d124:	eee7 5a26 	vfma.f32	s11, s14, s13
 800d128:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800d1fc <atanf+0x184>
 800d12c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800d130:	eddf 5a33 	vldr	s11, [pc, #204]	; 800d200 <atanf+0x188>
 800d134:	eee7 5a26 	vfma.f32	s11, s14, s13
 800d138:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800d204 <atanf+0x18c>
 800d13c:	eea6 5a87 	vfma.f32	s10, s13, s14
 800d140:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800d208 <atanf+0x190>
 800d144:	eea5 7a26 	vfma.f32	s14, s10, s13
 800d148:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800d20c <atanf+0x194>
 800d14c:	eea7 5a26 	vfma.f32	s10, s14, s13
 800d150:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800d210 <atanf+0x198>
 800d154:	eea5 7a26 	vfma.f32	s14, s10, s13
 800d158:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d15c:	eea5 7a86 	vfma.f32	s14, s11, s12
 800d160:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d164:	d121      	bne.n	800d1aa <atanf+0x132>
 800d166:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d16a:	e794      	b.n	800d096 <atanf+0x1e>
 800d16c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d170:	ee30 7a67 	vsub.f32	s14, s0, s15
 800d174:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d178:	2301      	movs	r3, #1
 800d17a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800d17e:	e7be      	b.n	800d0fe <atanf+0x86>
 800d180:	4b24      	ldr	r3, [pc, #144]	; (800d214 <atanf+0x19c>)
 800d182:	429c      	cmp	r4, r3
 800d184:	dc0b      	bgt.n	800d19e <atanf+0x126>
 800d186:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800d18a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d18e:	eea0 7a27 	vfma.f32	s14, s0, s15
 800d192:	2302      	movs	r3, #2
 800d194:	ee70 6a67 	vsub.f32	s13, s0, s15
 800d198:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d19c:	e7af      	b.n	800d0fe <atanf+0x86>
 800d19e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800d1a2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800d1a6:	2303      	movs	r3, #3
 800d1a8:	e7a9      	b.n	800d0fe <atanf+0x86>
 800d1aa:	4a1b      	ldr	r2, [pc, #108]	; (800d218 <atanf+0x1a0>)
 800d1ac:	491b      	ldr	r1, [pc, #108]	; (800d21c <atanf+0x1a4>)
 800d1ae:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800d1b2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800d1b6:	ed93 0a00 	vldr	s0, [r3]
 800d1ba:	ee37 7a40 	vsub.f32	s14, s14, s0
 800d1be:	ed92 0a00 	vldr	s0, [r2]
 800d1c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d1c6:	2d00      	cmp	r5, #0
 800d1c8:	ee70 7a67 	vsub.f32	s15, s0, s15
 800d1cc:	bfb8      	it	lt
 800d1ce:	eef1 7a67 	vneglt.f32	s15, s15
 800d1d2:	e760      	b.n	800d096 <atanf+0x1e>
 800d1d4:	3fc90fdb 	.word	0x3fc90fdb
 800d1d8:	bfc90fdb 	.word	0xbfc90fdb
 800d1dc:	3edfffff 	.word	0x3edfffff
 800d1e0:	7149f2ca 	.word	0x7149f2ca
 800d1e4:	3f97ffff 	.word	0x3f97ffff
 800d1e8:	3c8569d7 	.word	0x3c8569d7
 800d1ec:	3d4bda59 	.word	0x3d4bda59
 800d1f0:	bd6ef16b 	.word	0xbd6ef16b
 800d1f4:	3d886b35 	.word	0x3d886b35
 800d1f8:	3dba2e6e 	.word	0x3dba2e6e
 800d1fc:	3e124925 	.word	0x3e124925
 800d200:	3eaaaaab 	.word	0x3eaaaaab
 800d204:	bd15a221 	.word	0xbd15a221
 800d208:	bd9d8795 	.word	0xbd9d8795
 800d20c:	bde38e38 	.word	0xbde38e38
 800d210:	be4ccccd 	.word	0xbe4ccccd
 800d214:	401bffff 	.word	0x401bffff
 800d218:	0800dbf4 	.word	0x0800dbf4
 800d21c:	0800dc04 	.word	0x0800dc04

0800d220 <fabsf>:
 800d220:	ee10 3a10 	vmov	r3, s0
 800d224:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d228:	ee00 3a10 	vmov	s0, r3
 800d22c:	4770      	bx	lr
	...

0800d230 <floorf>:
 800d230:	ee10 3a10 	vmov	r3, s0
 800d234:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d238:	3a7f      	subs	r2, #127	; 0x7f
 800d23a:	2a16      	cmp	r2, #22
 800d23c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d240:	dc2a      	bgt.n	800d298 <floorf+0x68>
 800d242:	2a00      	cmp	r2, #0
 800d244:	da11      	bge.n	800d26a <floorf+0x3a>
 800d246:	eddf 7a18 	vldr	s15, [pc, #96]	; 800d2a8 <floorf+0x78>
 800d24a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d24e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d256:	dd05      	ble.n	800d264 <floorf+0x34>
 800d258:	2b00      	cmp	r3, #0
 800d25a:	da23      	bge.n	800d2a4 <floorf+0x74>
 800d25c:	4a13      	ldr	r2, [pc, #76]	; (800d2ac <floorf+0x7c>)
 800d25e:	2900      	cmp	r1, #0
 800d260:	bf18      	it	ne
 800d262:	4613      	movne	r3, r2
 800d264:	ee00 3a10 	vmov	s0, r3
 800d268:	4770      	bx	lr
 800d26a:	4911      	ldr	r1, [pc, #68]	; (800d2b0 <floorf+0x80>)
 800d26c:	4111      	asrs	r1, r2
 800d26e:	420b      	tst	r3, r1
 800d270:	d0fa      	beq.n	800d268 <floorf+0x38>
 800d272:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800d2a8 <floorf+0x78>
 800d276:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d27a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d27e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d282:	ddef      	ble.n	800d264 <floorf+0x34>
 800d284:	2b00      	cmp	r3, #0
 800d286:	bfbe      	ittt	lt
 800d288:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800d28c:	fa40 f202 	asrlt.w	r2, r0, r2
 800d290:	189b      	addlt	r3, r3, r2
 800d292:	ea23 0301 	bic.w	r3, r3, r1
 800d296:	e7e5      	b.n	800d264 <floorf+0x34>
 800d298:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800d29c:	d3e4      	bcc.n	800d268 <floorf+0x38>
 800d29e:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d2a2:	4770      	bx	lr
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	e7dd      	b.n	800d264 <floorf+0x34>
 800d2a8:	7149f2ca 	.word	0x7149f2ca
 800d2ac:	bf800000 	.word	0xbf800000
 800d2b0:	007fffff 	.word	0x007fffff

0800d2b4 <nanf>:
 800d2b4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d2bc <nanf+0x8>
 800d2b8:	4770      	bx	lr
 800d2ba:	bf00      	nop
 800d2bc:	7fc00000 	.word	0x7fc00000

0800d2c0 <scalbnf>:
 800d2c0:	ee10 3a10 	vmov	r3, s0
 800d2c4:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800d2c8:	d025      	beq.n	800d316 <scalbnf+0x56>
 800d2ca:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800d2ce:	d302      	bcc.n	800d2d6 <scalbnf+0x16>
 800d2d0:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d2d4:	4770      	bx	lr
 800d2d6:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800d2da:	d122      	bne.n	800d322 <scalbnf+0x62>
 800d2dc:	4b2a      	ldr	r3, [pc, #168]	; (800d388 <scalbnf+0xc8>)
 800d2de:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800d38c <scalbnf+0xcc>
 800d2e2:	4298      	cmp	r0, r3
 800d2e4:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d2e8:	db16      	blt.n	800d318 <scalbnf+0x58>
 800d2ea:	ee10 3a10 	vmov	r3, s0
 800d2ee:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d2f2:	3a19      	subs	r2, #25
 800d2f4:	4402      	add	r2, r0
 800d2f6:	2afe      	cmp	r2, #254	; 0xfe
 800d2f8:	dd15      	ble.n	800d326 <scalbnf+0x66>
 800d2fa:	ee10 3a10 	vmov	r3, s0
 800d2fe:	eddf 7a24 	vldr	s15, [pc, #144]	; 800d390 <scalbnf+0xd0>
 800d302:	eddf 6a24 	vldr	s13, [pc, #144]	; 800d394 <scalbnf+0xd4>
 800d306:	2b00      	cmp	r3, #0
 800d308:	eeb0 7a67 	vmov.f32	s14, s15
 800d30c:	bfb8      	it	lt
 800d30e:	eef0 7a66 	vmovlt.f32	s15, s13
 800d312:	ee27 0a27 	vmul.f32	s0, s14, s15
 800d316:	4770      	bx	lr
 800d318:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800d398 <scalbnf+0xd8>
 800d31c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d320:	4770      	bx	lr
 800d322:	0dd2      	lsrs	r2, r2, #23
 800d324:	e7e6      	b.n	800d2f4 <scalbnf+0x34>
 800d326:	2a00      	cmp	r2, #0
 800d328:	dd06      	ble.n	800d338 <scalbnf+0x78>
 800d32a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d32e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800d332:	ee00 3a10 	vmov	s0, r3
 800d336:	4770      	bx	lr
 800d338:	f112 0f16 	cmn.w	r2, #22
 800d33c:	da1a      	bge.n	800d374 <scalbnf+0xb4>
 800d33e:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d342:	4298      	cmp	r0, r3
 800d344:	ee10 3a10 	vmov	r3, s0
 800d348:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d34c:	dd0a      	ble.n	800d364 <scalbnf+0xa4>
 800d34e:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800d390 <scalbnf+0xd0>
 800d352:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800d394 <scalbnf+0xd4>
 800d356:	eef0 7a40 	vmov.f32	s15, s0
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	bf18      	it	ne
 800d35e:	eeb0 0a47 	vmovne.f32	s0, s14
 800d362:	e7db      	b.n	800d31c <scalbnf+0x5c>
 800d364:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800d398 <scalbnf+0xd8>
 800d368:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800d39c <scalbnf+0xdc>
 800d36c:	eef0 7a40 	vmov.f32	s15, s0
 800d370:	2b00      	cmp	r3, #0
 800d372:	e7f3      	b.n	800d35c <scalbnf+0x9c>
 800d374:	3219      	adds	r2, #25
 800d376:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d37a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800d37e:	eddf 7a08 	vldr	s15, [pc, #32]	; 800d3a0 <scalbnf+0xe0>
 800d382:	ee07 3a10 	vmov	s14, r3
 800d386:	e7c4      	b.n	800d312 <scalbnf+0x52>
 800d388:	ffff3cb0 	.word	0xffff3cb0
 800d38c:	4c000000 	.word	0x4c000000
 800d390:	7149f2ca 	.word	0x7149f2ca
 800d394:	f149f2ca 	.word	0xf149f2ca
 800d398:	0da24260 	.word	0x0da24260
 800d39c:	8da24260 	.word	0x8da24260
 800d3a0:	33000000 	.word	0x33000000

0800d3a4 <_init>:
 800d3a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3a6:	bf00      	nop
 800d3a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3aa:	bc08      	pop	{r3}
 800d3ac:	469e      	mov	lr, r3
 800d3ae:	4770      	bx	lr

0800d3b0 <_fini>:
 800d3b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3b2:	bf00      	nop
 800d3b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3b6:	bc08      	pop	{r3}
 800d3b8:	469e      	mov	lr, r3
 800d3ba:	4770      	bx	lr
